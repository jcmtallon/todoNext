const OPTIONS = require('./../optionHandler/OptionHandler');
const InfoHint = require('./../hints/infoHint');

module.exports = class ListItemTag{
  constructor(filteredTaskPage = undefined){
    this.filteredTaskPage = filteredTaskPage;
  }

  /**
   * Returns a tag element with the letter "L" of learning in it
   * and the same color as the corresponding category of the task.
   * If category id does not exist anymore, a blue color is applied
   * by default to the tag.
   */
  getLearningTag(isLearning, catId){

    if(isLearning){

      let catDeets = getCategoryDeets(catId);

      let tag;
      tag = $('<span>',{
        text: 'L',
        class: 'std_listItem_tag'});
      tag.css('background-color',catDeets.color);
      tag.css('opacity','0.75');

      return tag;
    }

  }

  /**
   * Returns a tag element with the letter "N" of notes in it
   * and the same color as the corresponding category of the task.
   * If category id does not exist anymore, a blue color is applied
   * by default to the tag.
   * It also attaches a description hint to the tag that
   * activates with a hover action.
   */
  getNotesTag(notes, catId){

    if(notes!=undefined && notes!=''){
      let catDeets = getCategoryDeets(catId);

      let tag;
      tag = $('<span>',{
        text: 'N',
        class: 'std_listItem_tag'});
      tag.css('background-color',catDeets.color);
      tag.css('opacity','0.75');

      let hintFab = new InfoHint(tag);
      let tagWhEvent = hintFab.loadHint(notes);

      return tagWhEvent;
    }
  }


  /**
   * Returns a tag element with the corresponding text and color
   * to the received category id.
   * If category id does not exist anymore, a 'Other' category
   * is generated by default.
   */
  getProjectTag(projId, comProjects = undefined){

    let projDeets = getProjectDeets(projId, comProjects);
    if (projDeets == undefined){return;}

    let catDeets = getCategoryDeets(projDeets.categoryId);

    let tag;
    tag = $('<span>',{
      text: projDeets.title,
      class: 'std_listItem_tag'});
    tag.css('background-color',catDeets.color);

    tag.click(()=>{
      const renderQuery = {fadeIn: true,
                           scrollToTop: true};
      const searchQuery = {pageNb: 1,
                           projectId: projId};
      this.filteredTaskPage.show(renderQuery, searchQuery);
    });

    return tag;

  }


  /**
   * Returns a tag element with the corresponding text and color
   * to the received category id.
   * If category id does not exist anymore, a 'Other' category
   * is generated by default.
   */
  getCategoryTag(catId){

    let catDeets = getCategoryDeets(catId);

    let tag;
    tag = $('<span>',{
      text: catDeets.title,
      class: 'std_listItem_tag'});
    tag.css('background-color',catDeets.color);

    tag.click(()=>{
      const renderQuery = {fadeIn: true,
                           scrollToTop: true};
      const searchQuery = {pageNb: 1,
                           categoryId: catId};
      this.filteredTaskPage.show(renderQuery, searchQuery);
    });

    return tag;
  }
};



function getCategoryDeets(catId) {

  let catTitle = 'Other';
  let catColor = '#263e65';

  if (catId!=''){
    let catObj = OPTIONS.categories.getCategoryById(catId);
    if (catObj != undefined){
      catTitle = catObj.title;
      catColor = catObj.color;
    }
  }

  return {title: catTitle, color: catColor};
}

function getProjectDeets(projId, completeProjects) {
  let projObj;

  if (projId!=''){

    //completeProjects not being undefined means that the app
    //is asking us to search complete projects too. Therefore
    //we use a different method.
    if (completeProjects == undefined){
      projObj = OPTIONS.projects.getProjectById(projId);
    }else{
      projObj = getProjectFromCompleteList(projId, completeProjects);
    }

    if (projObj != undefined){
      let projTitle = projObj.title;
      let projCatId = projObj.categoryId;
      return {title: projTitle, categoryId: projCatId};
    }
  }
}

function getProjectFromCompleteList(projId, projects){
  // We join active and complete projects into one array.
  let activeProjects = OPTIONS.projects.getProjects();
  activeProjects.map((proj)=>{
    projects.push({title: proj.title, categoryId: proj.categoryId, _id: proj._id});
  });

  return  projects.find (obj => {return obj._id == projId;});
}
