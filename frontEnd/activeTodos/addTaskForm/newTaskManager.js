/*jshint esversion: 6 */
const EventEmitter = require('events');
const OPTIONS = require('./../../optionHandler/OptionHandler');
const Task = require('./../Task');
const Category = require('./../../categories/Category');
const activeTaskPage = require('./../activeTaskPage');




/*
Task: an object generated by the add task form that
includes enough information to be able to generate new habits,
projects, tasks and habits from it.
Example:
  category: ""
  categoryId: ""
  dueTo: Fri Jun 07 2019 14:43:46 GMT+0900 (Japan Standard Time) {}
  frequency: 0
  habitId: ""
  hours: "1"
  learning: false
  name: "Dame una b"
  nextTaskDate: ""
  progress: 0
  project: ""
  projectId: ""
  status: "active"
  type: "task"
  urgency: "Normal"
  user: "5cecb8ba49c45525f49f4941"
  isNewCategory: false
  isNewProject: true
 */


/**
 *
 */
module.exports = class NewTaskManager extends EventEmitter{

  constructor(model){
    super();
    model.on('newTask', (task) => manageTask(task));
  }
};

function manageTask(task){

  if (task.isNewCategory){
    addCategoryToLocalOptions(task);
  }

  if (task.isNewProject){
    console.log('newProj!');
  }

  if (task.type == 'task'){
    saveActiveTaskAndDisplay(task);
  }

}



/**
 * Adds new category to local category array.
 * Without updating the database.
 */
function addCategoryToLocalOptions(task) {
  let newCat = new Category();
  newCat.title = task.category;
  newCat.color = '';
  OPTIONS.categories.addCategoryToLocalOptions(newCat);
}


/**
 *
 */
function saveActiveTaskAndDisplay(dbTask) {

  let task = new Task();
  task.title = dbTask.name;
  task.dueTo = dbTask.dueTo;
  task.urgency = dbTask.urgency;
  task.hours = dbTask.hours;
  task.isLearning = dbTask.learning;
  task.categoryId = dbTask.categoryId;
  task.projectId = dbTask.projectId;
  task.progress = 0;

  let callback;
  let errorHandler;

  if (OPTIONS.checkingHabitsIsNeeded()){
    console.log('need to check habits first!');
    let today = new Date();
    OPTIONS.setLastHabitUpdate(today);

  }else{
    callback = () => {};
    errorhandler = () => {activeTaskPage.showPage();};
    OPTIONS.activeTasks.addToLocalOptions([task]);
    OPTIONS.saveIntoDb(callback, errorHandler);
    activeTaskPage.showPageWithHightlights();
  }
}
