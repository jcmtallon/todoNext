/*jshint esversion: 9 */
const EventEmitter = require('events');
const OPTIONS = require('./../../optionHandler/OptionHandler');
const Task = require('./../Task');
const Category = require('./../../categories/Category');
const Project = require('./../../projects/Project');
const Habit = require('./../../habits/habit');
const MsgBox = require('./../../messageBox/messageBox');
const HabitTaskFactory = require('./../../habits/habitTaskFactory');
const activeTaskPage = require('./../activeTaskPage');
const moment = require('moment');

/*
Todo: an object generated by the add task form that
includes enough information to be able to generate new habits,
projects, tasks and habits from it.
Example:
  category: ""
  categoryId: ""
  dueTo: Fri Jun 07 2019 14:43:46 GMT+0900 (Japan Standard Time) {}
  frequency: 0
  habitId: ""
  hours: "1"
  learning: false
  name: "Dame una b"
  lastTaskDate: ""
  progress: 0
  project: ""
  projectId: ""
  status: "active"
  type: "task"
  urgency: "Normal"
  user: "5cecb8ba49c45525f49f4941"
  isNewCategory: false
  isNewProject: true
 */

 let _messanger = new MsgBox();


/**
 *  Detects when a new todo have been created by the add task form
 *  and creates the relevant tasks, habits, categories and projects
 *  depending on the selected options in the form.
 */
module.exports = class NewTaskManager extends EventEmitter{

  constructor(model){
    super();
    model.on('newTask', (todo) => manageTask(todo));
  }
};




/**
 *
 */
async function manageTask(todo){

  let optionBUp = OPTIONS.getLocalOptions();

  try {
    await saveCategoryData(todo);
    await saveProjectData(todo);
    await saveHabitData(todo);

    // Use to identify new tasks later.
    OPTIONS.activeTasks.rememberInstantIds();

    generateHabitTasks(todo);
    generateActiveTask(todo);
    activeTaskPage.showPageWithHightlights();
    OPTIONS.updateDb();

  } catch (err){
    _messanger.showMsgBox('An error occurred when updating the new data. Please refresh the page and try again.','error','down');
    console.log(err);
    OPTIONS.updateLocalOptions(optionBUp);
    activeTaskPage.showPageWithFadeIn();
  }
}


/**
 *  If new category, creates and saves a new category object
 *  into the database, updates the local options object and
 *  returns the new category including the database id.
 */
async function saveCategoryData (todo){

  if (!todo.isNewCategory){
    return;
  }

  let newCat = new Category();
  newCat.title = todo.category;
  newCat.color = '';

  const dbCat = await OPTIONS.categories.promiseToAddCategory(newCat);
  todo.categoryId = dbCat._id;
  return;
}


/**
 *  If new project, creates and saves a new project object
 *  into the database, updates the local options object and
 *  returns the new project including the database id.
 */
async function saveProjectData(todo) {

  if (!todo.isNewProject){
    return;
  }

  let newProj = new Project();
  newProj.title = todo.project;
  newProj.catId = '';

  const dbProj = await OPTIONS.projects.promiseToAddProject(newProj);
  todo.projectId = dbProj._id;
  return;
}



/**
 *  If habyt type, adds the habit to the local and db habit array
 *  and returns the todo with the new habitId information updated.
 */
async function saveHabitData(todo) {

  if (todo.type == 'task'){
    return;
  }

  const {name, categoryId, frequency, hours, urgency} = todo;

  let newHab = new Habit();
  newHab.title = name;
  newHab.categoryId = categoryId;
  newHab.frequency = frequency;
  newHab.hours = hours;
  newHab.urgency = urgency;
  newHab.isActive = true;

  // We save a yesterday date value in lastTaskDate so
  // a few seconds later, the habit task factory considers
  // that this habit needs to generate tasks right away.
  let yesterday = moment().subtract(1, 'days');
  newHab.lastTaskDate = yesterday;

  const dbHabit = await OPTIONS.habits.promiseToAddHabit(newHab);
  todo.habitId = dbHabit._id;
  return;
}


/**
 * If no habits have been generated for today, or the passed
 * todo is a habit, then generate habit tasks and update
 * options last habit date.
 */
function generateHabitTasks(todo) {

  if (!OPTIONS.logs.mustGenerateHabits() && todo.type == 'task'){
    return;
  }

  let factory = new HabitTaskFactory();
  factory.generateHabitTasks();

  OPTIONS.logs.setLastHabitDateAsToday();
}


/**
 * Generates a task for the specified todo and
 * adds it to the options active task array. .
 */
function generateActiveTask(dbTask) {

  if (dbTask.type != 'task'){
    return;
  }

  const {name, dueTo, urgency, hours, learning, categoryId, projectId} = dbTask;

  let task = new Task();
  task.title = name;
  task.dueTo = dueTo;
  task.urgency = urgency;
  task.hours = hours;
  task.isLearning = learning;
  task.categoryId = categoryId;
  task.projectId = projectId;
  task.progress = 0;

  OPTIONS.activeTasks.addToActiveTasks([task]);
  OPTIONS.categories.addToCounters([task]);
  OPTIONS.projects.addToCounters([task]);
}
