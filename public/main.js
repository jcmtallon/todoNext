/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./controllers/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./controllers/forms/add_task_form.js":
/*!********************************************!*\
  !*** ./controllers/forms/add_task_form.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\nconst setCurlet = __webpack_require__(/*! ./../otherMethods/setCaret */ \"./controllers/otherMethods/setCaret.js\");\r\nconst NewTaskModel = __webpack_require__(/*! ./add_task_form/new_task_model */ \"./controllers/forms/add_task_form/new_task_model.js\");\r\nconst NewTaskView = __webpack_require__(/*! ./add_task_form/new_task_view */ \"./controllers/forms/add_task_form/new_task_view.js\");\r\nconst NewTaskController = __webpack_require__(/*! ./add_task_form/new_task_controllers */ \"./controllers/forms/add_task_form/new_task_controllers.js\");\r\n\r\n// (Dummy_To_be_replaced)\r\n// Includes all available options for the user\r\n// when interacting the form.\r\nconst options = {\r\n  categories: [\r\n    {title:'Salud', color:'#b5ea93', id:'catRRD3F'},\r\n    {title:'Dinero', color:'#8ee2d3', id:'catRRD3G'},\r\n    {title:'Programación', color:'#8c9be2', id:'catRRD3H'},\r\n    {title:'Social', color:'#e2af8c', id:'catRRD3I'},\r\n    {title:'True Story', color:'#e2988c', id:'catRRD3J'}\r\n  ],\r\n  projects:[\r\n    {title: 'Correr la maraton', category: 'Salud', color:'#b5ea93', id:'proRRD3F'},\r\n    {title: 'Completar esta maldita aplicacion', category: 'Programación', color:'#8c9be2', id:'proRRD3G'},\r\n    {title: 'Ahorarr 10 millones de yenes', category: 'Dinero', color:'#8ee2d3', id:'proRRD3H'},\r\n    {title: 'Grabar una película', category: 'True Story', color:'#e2988c', id:'proRRD3I'}\r\n  ],\r\n  hours:[\r\n    {title: 'Score', value: 0, type:'habit', icon:'/assets/icon_star.svg', active:'/assets/icon_star_active.svg'},\r\n    {title: 'Fast task', value: 1, type:'both', icon:'/assets/icon_hours.svg', active:'/assets/icon_hours.svg'},\r\n    {title: '1 hour', value: 2, type:'both', icon:'/assets/icon_hours.svg', active:'/assets/number 1.svg'},\r\n    {title: '2 hours', value: 3, type:'both', icon:'/assets/icon_hours.svg', active:'/assets/number 2.svg'},\r\n    {title: '3 hours', value: 4, type:'both', icon:'/assets/icon_hours.svg', active:'/assets/number 3.svg'},\r\n    {title: '4 hours', value: 5, type:'both', icon:'/assets/icon_hours.svg', active:'/assets/number 4.svg'},\r\n    {title: '5 hours', value: 6, type:'both', icon:'/assets/icon_hours.svg', active:'/assets/number 5.svg'},\r\n    {title: '6 hours', value: 7, type:'both', icon:'/assets/icon_hours.svg', active:'/assets/number 6.svg'},\r\n    {title: '7 hours', value: 8, type:'both', icon:'/assets/icon_hours.svg', active:'/assets/number 7.svg'},\r\n    {title: '8 hours', value: 9, type:'both', icon:'/assets/icon_hours.svg', active:'/assets/number 8.svg'},\r\n    {title: '9 hours', value: 10, type:'both', icon:'/assets/icon_hours.svg', active:'/assets/number 9.svg'}\r\n  ],\r\n  urgency:[\r\n    {title: 'High', icon:'/assets/icon_arrow_up.svg'},\r\n    {title: 'Normal', icon:'/assets/icon_arrow_left.svg'},\r\n    {title: 'Low', icon:'/assets/icon_arrow_down.svg'}\r\n  ],\r\n  learning:[\r\n    {title: 'Also a learning', icon:'/assets/icon_learning.svg', active:'/assets/icon_learning_active.svg'},\r\n    {title: 'Just a task', icon:'/assets/icon_justTask.svg', active:'/assets/icon_justTask.svg'}\r\n  ]\r\n};\r\n\r\nexports.showModal = function(){\r\n\r\n  const model = new NewTaskModel();\r\n  const view = new NewTaskView(model, options);\r\n  const controller = new NewTaskController(model, view, options);\r\n} ;\r\n\n\n//# sourceURL=webpack:///./controllers/forms/add_task_form.js?");

/***/ }),

/***/ "./controllers/forms/add_task_form/new_task_controllers.js":
/*!*****************************************************************!*\
  !*** ./controllers/forms/add_task_form/new_task_controllers.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\nconst EventEmitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\r\nconst MsgBox = __webpack_require__(/*! ./../../messageBox/messageBox */ \"./controllers/messageBox/messageBox.js\");\r\n\r\n/**\r\n* Controller responds to user actions and\r\n* invokes changes on the model.\r\n */\r\n\r\n module.exports = class NewTaskController extends EventEmitter{\r\n   constructor(model, view, options){\r\n     super();\r\n     this._model = model;\r\n     this._view = view;\r\n     this._options = options;\r\n\r\n     view.on('saveType', type => this.saveType(type));\r\n     view.on('saveLearning', option => this.saveLearning(option));\r\n     view.on('saveUrgency', option => this.saveUrgency(option));\r\n     view.on('saveHours', option => this.saveHours(option));\r\n     view.on('saveCategory', (option, input) => this.saveCategory(option, input));\r\n     view.on('saveProject', (option, input) => this.saveProject(option, input));\r\n     view.on('saveNameDate', (name, date) => this.saveNameDate(name, date));\r\n   }\r\n\r\n   saveType(type){\r\n     this._model.type = type;\r\n   }\r\n\r\n   saveLearning(option){\r\n     let result = (option == 'Also a learning') ? true : false;\r\n     this._model.learning = result;\r\n   }\r\n\r\n   saveUrgency(option){\r\n     this._model.urgency = option;\r\n   }\r\n\r\n   saveHours(option){\r\n     this._model.hours = option;\r\n   }\r\n\r\n   saveCategory(option, input){\r\n\r\n     let isNew = false;\r\n     let categoryName = option;\r\n\r\n     // If new category, change isNew to True.\r\n     if (option == 'Add new'){\r\n       isNew = true;\r\n       categoryName = input;\r\n     }\r\n\r\n     let categoryPackage = {categoryName: categoryName, isNew:isNew};\r\n     this._model.category = categoryPackage;\r\n\r\n     //If project is not compatible with this category, remove project.\r\n     let projectName;\r\n\r\n     if (isNew){\r\n        projectName = '';\r\n     }else if (categoryName == ''){\r\n        projectName = '';\r\n     }else{\r\n       let projectModel = this._options.projects.find( obj => {\r\n         return obj.category == categoryName;});\r\n       projectName = (this._model.project != projectModel.title) ? '' : this._model.project;\r\n     }\r\n\r\n     let projectPackage = {projectName: projectName, isNew: false};\r\n     this._model.project = projectPackage;\r\n\r\n   }\r\n\r\n   saveProject(option, input){\r\n\r\n     let isNew = false;\r\n     let projectName = option;\r\n\r\n     if (option == 'Add new'){\r\n       isNew = true;\r\n       projectName = input;\r\n     }\r\n\r\n     let projectPackage = {projectName: projectName, isNew:isNew};\r\n     this._model.project = projectPackage;\r\n\r\n     //If project is not compatible with this category, change category corresponding.\r\n     let categoryName;\r\n\r\n     if (projectName!=''){\r\n\r\n       if (isNew){\r\n         categoryName='';\r\n       }else{\r\n         let projectModel = this._options.projects.find( obj => {\r\n           return obj.title == projectName;});\r\n         categoryName = projectModel.category;\r\n       }\r\n\r\n       let categoryPackage = {categoryName: categoryName, isNew: false};\r\n       this._model.category = categoryPackage;\r\n\r\n     }\r\n   }\r\n\r\n\r\n   /**\r\n    * saveNameDate - Saves name and validates input date.\r\n    * For tasks, it also accepts numbers from 1 to 355. Numbers are\r\n    * automatically transformed into dates (summed to the current date).\r\n    * For habits, it only accepts numbers and not dates.\r\n    *\r\n    * @param  {string} name description\r\n    * @param  {string} date\r\n    */\r\n   saveNameDate(name, date){\r\n\r\n     this._model.name = name;\r\n\r\n     if (this._model.type == 'task'){\r\n\r\n       // We initially assume that the input date will be correct.\r\n       let sendDate = true;\r\n\r\n       // We save input into a date class and extracts its year for later validation.\r\n       let inputDate = new Date(date);\r\n       let inputYear = inputDate.getYear();\r\n\r\n       // Variable sent at the very end of this method to the model.\r\n       let finalDate= new Date();\r\n\r\n       // For date validation purposes.\r\n       let thisYear = finalDate.getYear();\r\n       let nextYear = thisYear + 1;\r\n\r\n       switch (true) {\r\n\r\n         case (isValidDate(inputDate) && (inputYear>=thisYear && inputYear<=nextYear)):\r\n           finalDate = inputDate;\r\n           break;\r\n\r\n         case date == 'Today':\r\n           break;\r\n\r\n         case date == 'TMR':\r\n           finalDate.setDate(finalDate.getDate()+1);\r\n           break;\r\n\r\n         case date == 'DAT':\r\n           finalDate.setDate(finalDate.getDate()+2);\r\n           break;\r\n\r\n         case date == '1 week':\r\n           finalDate.setDate(finalDate.getDate()+7);\r\n           break;\r\n\r\n         case date == '2 weeks':\r\n           finalDate.setDate(finalDate.getDate()+14);\r\n           break;\r\n\r\n         case date == '1 month':\r\n           finalDate.setDate(finalDate.getDate()+30);\r\n           break;\r\n\r\n         case !isNaN(date) && date<365 && date>0:\r\n           finalDate.setDate(finalDate.getDate() + Number(date));\r\n           break;\r\n\r\n         default:\r\n         sendDate = false;\r\n\r\n       }\r\n\r\n       if(sendDate){\r\n         this._model.dueTo = finalDate;\r\n       }else {\r\n         let messenger = new MsgBox();\r\n         messenger.showMsgBox('Insert a valid date or a exact number of days.','error','up');\r\n       }\r\n\r\n     }else{\r\n\r\n     }\r\n\r\n\r\n   }\r\n\r\n };\r\n\r\n function isValidDate(date) {\r\n   return date && Object.prototype.toString.call(date) === \"[object Date]\" && !isNaN(date);\r\n }\r\n\n\n//# sourceURL=webpack:///./controllers/forms/add_task_form/new_task_controllers.js?");

/***/ }),

/***/ "./controllers/forms/add_task_form/new_task_model.js":
/*!***********************************************************!*\
  !*** ./controllers/forms/add_task_form/new_task_model.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\nconst EventEmitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\r\n\r\n/**\r\n * Stores the new task attributes and observes about changes.\r\n */\r\n\r\n module.exports = class NewTaskModel extends EventEmitter{\r\n   constructor(){\r\n     super();\r\n     this._type = 'task';\r\n     this._name = '';\r\n     this._dueTo = new Date();\r\n     this._frequency = 0;\r\n     this._category = 'other';\r\n     this._isNewCategory = false;\r\n     this._project = '';\r\n     this._isNewProject = false;\r\n     this._hours = 'Fast task';\r\n     this._urgency = 'Normal';\r\n     this._learning = false;\r\n     this._user = '';\r\n   }\r\n\r\n   get type(){\r\n     return this._type;\r\n   }\r\n\r\n   set type(type) {\r\n    this._type = type;\r\n    this.emit('typeSaved');\r\n  }\r\n\r\n   set name(name){\r\n    this._name = name;\r\n   }\r\n\r\n   get name(){\r\n     return this._name;\r\n   }\r\n\r\n   set dueTo(date){\r\n      this._dueTo = date;\r\n      this.emit('dateSaved');\r\n   }\r\n\r\n   get dueTo(){\r\n     return this._dueTo;\r\n   }\r\n\r\n   set category(categoryPackage){\r\n     this._category = categoryPackage.categoryName;\r\n     this._isNewCategory = categoryPackage.isNew;\r\n     this.emit('categorySaved');\r\n   }\r\n\r\n   get category(){\r\n     return this._category;\r\n   }\r\n\r\n   set project(projectPackage){\r\n     this._project = projectPackage.projectName;\r\n     this._isNewProject = projectPackage.isNew;\r\n     this.emit('projectSaved');\r\n   }\r\n\r\n   get project(){\r\n     return this._project;\r\n   }\r\n\r\n   set hours(option){\r\n     this._hours = option;\r\n     this.emit('hoursSaved');\r\n   }\r\n\r\n   get hours(){\r\n     return this._hours;\r\n   }\r\n\r\n   get urgency(){\r\n     return this._urgency;\r\n   }\r\n\r\n   set urgency(option){\r\n     this._urgency = option;\r\n     this.emit('urgencySaved');\r\n   }\r\n\r\n   get learning(){\r\n     return this._learning;\r\n   }\r\n\r\n   set learning(option) {\r\n    this._learning = option;\r\n    this.emit('learningSaved');\r\n  }\r\n\r\n   get user(){\r\n     return this._user;\r\n   }\r\n };\r\n\n\n//# sourceURL=webpack:///./controllers/forms/add_task_form/new_task_model.js?");

/***/ }),

/***/ "./controllers/forms/add_task_form/new_task_view.js":
/*!**********************************************************!*\
  !*** ./controllers/forms/add_task_form/new_task_view.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\nconst EventEmitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\r\nconst Hint = __webpack_require__(/*! ./../../hints/help_hint */ \"./controllers/hints/help_hint.js\");\r\nconst Shortcuts = __webpack_require__(/*! ./../../shortcuts/shortcuts */ \"./controllers/shortcuts/shortcuts.js\");\r\nconst SetCurlet = __webpack_require__(/*! ./../../otherMethods/setCaret */ \"./controllers/otherMethods/setCaret.js\");\r\n\r\n/**\r\n * Builds the form base UI.\r\n * Sets the form event handlers.\r\n * Prints and modifies the form UI elements.\r\n */\r\n\r\n let activeRow;\r\n\r\n module.exports = class NewTaskView extends EventEmitter{\r\n   //Builds the form base UI\r\n   constructor(model, options){\r\n     super();\r\n     this._model = model;\r\n     this._options = options;\r\n\r\n     //Listeners\r\n     model.on('typeSaved', () => this.changeTodoType());\r\n     model.on('learningSaved', () => this.updateLearningIcon());\r\n     model.on('urgencySaved', () => this.updateUrgencyIcon());\r\n     model.on('hoursSaved', () => this.updateHourIcon());\r\n     model.on('categorySaved', () => this.updateCategory());\r\n     model.on('projectSaved', () => this.updateProject());\r\n\r\n     this._textInput = '';\r\n     //Stores user tag input (text input after summoning a menu)\r\n\r\n\r\n     // Print base structure\r\n     this._modal = this.buildModal();\r\n     $(document.body).append(this._modal);\r\n\r\n\r\n     // Print icons into the icon bar.\r\n     this.printIcons();\r\n\r\n\r\n     // Focuses modal text box.\r\n     this._textBox = $('.modal_addTask_body_textBox');\r\n     this._textBox.focus();\r\n\r\n     // Set datapicker and date eventhandlers\r\n     this.setDateBox();\r\n\r\n     // Add recognize function to datebox.\r\n     this._dateBox.on(\"input\", () => this.recognizeDate());\r\n     this._dateBox.on(\"change\", () => this.recognizeDate());\r\n\r\n     // Set the actions that can close this modal.\r\n     this.setCloseEvents();\r\n\r\n     this._projectTagContainer = $('.modal_addTask_caption_proj');\r\n     this._categoryTagContainer = $('.modal_addTask_caption_cat');\r\n     this._todoBtn = $('#addTask_radio_todo');\r\n     this._habitBtn = $('#addTask_radio_habit');\r\n     this._iconBarHolder = $('.modal_addTask_body_icons_col');\r\n\r\n     // Set type buttons.\r\n     this.setTodoTypeButtons();\r\n\r\n     // Set event handlers for option drop down menus\r\n     this.setDropDownTables();\r\n\r\n     // Set icon button actions\r\n     this.setIconActions();\r\n\r\n     // Set submit button\r\n     this.setSubmit();\r\n\r\n   }\r\n\r\n   // Sends date and task name to database\r\n   // Once data is correctly saved, a different method\r\n   // interacts with the dbHandler class to add the task to the system.\r\n   setSubmit(){\r\n\r\n     this._submit = $('#modal_addTask_body_submit_btn');\r\n     this._submit.on(\"click\", () => {\r\n\r\n       this.emit('saveNameDate', this._textBox.text(),\r\n                                 this._dateBox.val());\r\n\r\n     });\r\n\r\n   }\r\n\r\n\r\n   //Puts form header and body together into one div element.\r\n   buildModal(){\r\n\r\n     let modalHeader = this.buildModalHeader();\r\n     let modalBody = this.buildModalBody();\r\n\r\n     // Body and header container\r\n     let modalContent = $('<div>', {id:'modal_addTask_content'});\r\n     modalContent.append(modalHeader).append(modalBody);\r\n\r\n     // Modal container\r\n     let modal = $('<div>', {\r\n       class: 'modal_addTask',\r\n       id:'modal_addTask'});\r\n     modal.append(modalContent);\r\n\r\n     return modal;\r\n\r\n   }\r\n\r\n\r\n   buildModalHeader(){\r\n\r\n     // todo and habit radio buttons\r\n     let radioControlGroup = $('<div>',{\r\n       class: 'addTask_radio_container'});\r\n     let radioInputTodo = $('<input>',{\r\n       type: 'radio',\r\n       name: 'addTask_radio',\r\n       id: 'addTask_radio_todo',\r\n       checked: 'checked'});\r\n     let radioLabelTodo = $('<label>',{\r\n       for: 'addTask_radio_todo',\r\n       text: 'Task',\r\n       class: 'radio_label'});\r\n     let radioInputHabit = $('<input>',{\r\n       type: 'radio',\r\n       name: 'addTask_radio',\r\n       id: 'addTask_radio_habit'});\r\n     let radioLabelHabit = $('<label>',{\r\n       for: 'addTask_radio_habit',\r\n       text: 'Habit',\r\n       class: 'radio_label'});\r\n     radioControlGroup\r\n       .append(radioInputTodo)\r\n       .append(radioLabelTodo)\r\n       .append(radioInputHabit)\r\n       .append(radioLabelHabit);\r\n     let modalHeaderTableRadioColumn = $('<td>',{\r\n       class: 'modal_addTask_header_table_radioClm'});\r\n     modalHeaderTableRadioColumn.append(radioControlGroup);\r\n\r\n\r\n     // Modal header middle column\r\n     let captionLeft = $('<div>',{\r\n       class:'modal_addTask_caption_cat'\r\n     });\r\n\r\n     let captionRight = $('<div>',{\r\n       class:'modal_addTask_caption_proj'\r\n     });\r\n\r\n     let modalHeaderTableCaptionColumn = $('<td>',{\r\n       class: 'modal_addTask_header_table_captionClm'});\r\n       modalHeaderTableCaptionColumn.append(captionLeft).append(captionRight);\r\n\r\n\r\n     // close button\r\n     let modalHeaderTableCloseColumn = $('<td>',{\r\n       class: 'modal_addTask_header_table_closeClm'});\r\n     let emptyDiv = $('<div>',{});\r\n     let emptySpan = $('<span>',{});\r\n     let closeBtn = $('<img>',{\r\n       class:'modal_addTask_closeBtn',\r\n       src: '/assets/btn_close_modal.svg',\r\n       id: 'modal_addTask_closeBtn'});\r\n     emptySpan.append(closeBtn);\r\n     emptyDiv.append(emptySpan);\r\n     modalHeaderTableCloseColumn.append(emptyDiv);\r\n\r\n\r\n     // compile header\r\n     let modalHeaderTableBody = $('<tbody>',{});\r\n     modalHeaderTableBody\r\n       .append(modalHeaderTableRadioColumn)\r\n       .append(modalHeaderTableCaptionColumn)\r\n       .append(modalHeaderTableCloseColumn);\r\n\r\n       let modalHeaderTable = $('<table>',{\r\n         class: 'modal_addTask_header_table',\r\n         id:'modal_addTask_header_table'});\r\n\r\n       modalHeaderTable.append(modalHeaderTableBody);\r\n       let header = $('<div>', {\r\n         class: 'modal_addTask_header',\r\n         id:'modal_addTask_header'});\r\n       header.append(modalHeaderTable);\r\n\r\n       return header;\r\n   }\r\n\r\n\r\n   buildModalBody(){\r\n\r\n     //modal body top part\r\n     let text_box_container = $('<div>',{\r\n       class:'modal_addTask_body_textBox',\r\n       tabindex:'1',\r\n       autocomplete:'off',\r\n       contenteditable:'true',\r\n       placeholder:\"Write your task or habit here...\"});\r\n\r\n     let text_box_clm = $('<td>',{\r\n       class:'modal_addTask_body_textBox_col'});\r\n     text_box_clm.append(text_box_container);\r\n\r\n     let date_box_container = $('<input>',{\r\n       type:'text',\r\n       class:'modal_addTask_body_dueDate',\r\n       id: 'modal_addTask_body_dueDate',\r\n       name:'modal_addTask_body_dueDate',\r\n       tabindex:'2',\r\n       autocomplete:'off'});\r\n\r\n     let date_box_clm = $('<td>',{\r\n       class:'modal_addTask_body_dueDate_col'});\r\n     date_box_clm.append(date_box_container);\r\n\r\n     let taskNameTableBodyRow = $('<tr>',{});\r\n     taskNameTableBodyRow.append(text_box_clm).append(date_box_clm);\r\n\r\n     let taskNameTableBody = $('<tbody>',{});\r\n     taskNameTableBody.append(taskNameTableBodyRow);\r\n\r\n     let taskNameTable = $('<table>',{\r\n       class:'modal_addTask_body_taskNameRow_table'});\r\n     taskNameTable.append(taskNameTableBody);\r\n\r\n\r\n     //modal body lower part\r\n\r\n    this._iconBar = $('<td>',{\r\n       class:'modal_addTask_body_icons_col'});\r\n\r\n     let submit_Btn = $('<div>',{\r\n       class:'blue_botton',\r\n       id:'modal_addTask_body_submit_btn',\r\n       tabindex: 3,\r\n       text: 'Add task'});\r\n\r\n     let add_btn_col = $('<td>',{\r\n       class:'modal_addTask_body_submit_col'});\r\n     add_btn_col.append(submit_Btn);\r\n\r\n     let buttonsTableBodyRow = $('<tr>',{});\r\n     buttonsTableBodyRow.append(add_btn_col).append(this._iconBar);\r\n\r\n     let buttonsTableBody = $('<tbody>',{});\r\n     buttonsTableBody.append(buttonsTableBodyRow);\r\n\r\n     let buttonsTable = $('<table>',{\r\n       class:'modal_addTask_body_buttonsRow_table'});\r\n     buttonsTable.append(buttonsTableBody);\r\n\r\n\r\n     //modal body frame\r\n     let modalBody_manager = $('<div>',{\r\n       class:'modal_addTask_body_manager',\r\n       id:'modal_addTask_body_manager'});\r\n     modalBody_manager.append(taskNameTable).append(buttonsTable);\r\n\r\n     let modalBody_EmptyDiv = $('<div>',{});\r\n     modalBody_EmptyDiv.append(modalBody_manager);\r\n\r\n     let modalBody_iframe = $('<div>',{\r\n       class:'modal_addTask_iframe'});\r\n     modalBody_iframe.append(modalBody_EmptyDiv);\r\n\r\n     let modalBody = $('<div>', {\r\n       class:'modal_addTask_body',\r\n       id:'modal_addTask_body'});\r\n     modalBody.append(modalBody_iframe);\r\n\r\n     return modalBody;\r\n\r\n   }\r\n\r\n    //(old_remove) createIconPackage\r\n    // Prints the necessary icons into the UI based on the\r\n    // type of task selected by the user.\r\n    printIcons(){\r\n\r\n      //Create icon container\r\n      let iconContainer = $('<span>',{\r\n          class:'modal_addTask_body_icons_iconHolder'});\r\n\r\n      let category_icon = {\r\n        class:'modal_addTask_menuIcon',\r\n        id:'modal_addTask_categoryIcon',\r\n        image:'/assets/icon_category.svg'\r\n      };\r\n\r\n      let  project_icon = {\r\n        class:'modal_addTask_menuIcon',\r\n        id:'modal_addTask_projectIcon',\r\n        image:'/assets/icon_project.svg'\r\n      };\r\n\r\n      let priority_icon = {\r\n        class:'modal_addTask_menuIcon',\r\n        id:'modal_addTask_priorityIcon',\r\n        image:'/assets/icon_arrow_left.svg'\r\n      };\r\n\r\n      let learning_icon = {\r\n        class:'modal_addTask_menuIcon',\r\n        id:'modal_addTask_learningIcon',\r\n        image:'/assets/icon_learning.svg'\r\n      };\r\n\r\n      let hours_icon = {\r\n        class:'modal_addTask_menuIcon',\r\n        id:'modal_addTask_hoursIcon',\r\n        image:'/assets/icon_hours.svg'\r\n      };\r\n\r\n    let icons =  [priority_icon,\r\n                 learning_icon,\r\n                 project_icon,\r\n                 category_icon,\r\n                 hours_icon];\r\n\r\n    //If habit, project and learning icons are removed.\r\n    if (this._model._type == 'habit'){icons = [priority_icon,\r\n                                              category_icon,\r\n                                              hours_icon];}\r\n\r\n    for (let i=0; i<icons.length; i++){\r\n\r\n      let divContainer = $([]);\r\n      let content = $([]);\r\n\r\n      divContainer = $('<div>',{\r\n        class: icons[i].class\r\n      });\r\n\r\n      content = $('<img>',{\r\n        class:'modal_icon hintHolder',\r\n        id: icons[i].id,\r\n        src:icons[i].image});\r\n\r\n      divContainer.append(content);\r\n      iconContainer.append(divContainer);\r\n      }\r\n\r\n      this._iconBar.append(iconContainer);\r\n\r\n      //Loads a hint into each icon.\r\n      const mainHints = new Hint('.modal_addTask_body_icons_col .hintHolder');\r\n    }\r\n\r\n    // Set datapicker and date eventhandlers\r\n    setDateBox(){\r\n\r\n      // Jquery ui datapicker container\r\n      let dataContainer = $('.modal_addTask_body_dueDate');\r\n\r\n      // Date textbox\r\n      this._dateBox = $('#modal_addTask_body_dueDate');\r\n\r\n      if(this._model.type=='task'){\r\n\r\n        // Set jquery ui datapicker\r\n        dataContainer.datepicker({ minDate: 0, maxDate: \"+5Y +10D\" });\r\n        dataContainer.datepicker( \"option\", \"dateFormat\",\"d M, y\");\r\n\r\n        // Give a default value of Today\r\n        const today = new Date();\r\n        this._dateBox.val('Today');\r\n        this._dateBox.addClass('recognized_dueDate');\r\n\r\n        // Change placeholder\r\n        this._dateBox.attr(\"placeholder\", \"Date\");\r\n\r\n      }else{\r\n\r\n        // Disable when habit\r\n        dataContainer.datepicker( \"destroy\" );\r\n\r\n        // Remove default value and show \"days\" placeholder.\r\n        this._dateBox.val('');\r\n        this._dateBox.attr(\"placeholder\", \"N Days\");\r\n        this._dateBox.removeClass('recognized_dueDate');\r\n      }\r\n\r\n    }\r\n\r\n    // If the user inputs a valid date format, this method\r\n    // highlights the date textbox text by attaching a\r\n    // class to it.\r\n    recognizeDate(){\r\n\r\n      //Function used to validate dates.\r\n      function isValidDate(date) {\r\n        return date && Object.prototype.toString.call(date) === \"[object Date]\" && !isNaN(date);\r\n      }\r\n\r\n      //We transform input into date so we can try to validate it.\r\n      let inputDate = new Date(this._dateBox.val());\r\n      let inputYear = inputDate.getYear();\r\n\r\n      // Dates used to validate the input date.\r\n      let today = new Date();\r\n      let thisYear = today.getYear();\r\n      let nextYear = thisYear+1;\r\n\r\n      if (this._model.type == 'task'){\r\n        switch(true){\r\n          case (isValidDate(inputDate) && (inputYear>=thisYear && inputYear<=nextYear)):\r\n            this._dateBox.addClass('recognized_dueDate');\r\n            break;\r\n          case this._dateBox.val() == 'Today':\r\n            this._dateBox.addClass('recognized_dueDate');\r\n            break;\r\n          case this._dateBox.val() == 'TMR':\r\n            this._dateBox.addClass('recognized_dueDate');\r\n            break;\r\n          case this._dateBox.val() == 'DAT':\r\n            this._dateBox.addClass('recognized_dueDate');\r\n            break;\r\n          case this._dateBox.val() == '1 week':\r\n            this._dateBox.addClass('recognized_dueDate');\r\n            break;\r\n          case this._dateBox.val() == '2 weeks':\r\n            this._dateBox.addClass('recognized_dueDate');\r\n            break;\r\n          case this._dateBox.val() == '1 month':\r\n            this._dateBox.addClass('recognized_dueDate');\r\n            break;\r\n          case !isNaN(this._dateBox.val()) && this._dateBox.val()<365 && this._dateBox.val()>0:\r\n            this._dateBox.addClass('recognized_dueDate');\r\n            break;\r\n          default:\r\n            this._dateBox.removeClass('recognized_dueDate');\r\n        }\r\n      }else{\r\n        if(!isNaN(this._dateBox.val()) && this._dateBox.val()<365 && this._dateBox.val()>0){\r\n          this._dateBox.addClass('recognized_dueDate');\r\n        }else{\r\n          this._dateBox.removeClass('recognized_dueDate');\r\n        }\r\n      }\r\n    }\r\n\r\n    // Set actions that can close this modal.\r\n    setCloseEvents(){\r\n\r\n      // Set close button.\r\n      this._closeBtn = $('.modal_addTask_closeBtn');\r\n      this._closeBtn.on('click', () => this.closeModal());\r\n\r\n      // closing modal when clicking outside\r\n      this._modal.on('click', (e) =>{\r\n        let notModal = document.getElementById('modal_addTask');\r\n        if(e.target == notModal){this.closeModal();}\r\n      });\r\n\r\n      // ESCAPE key pressed\r\n      this.setEscapeKey();\r\n    }\r\n\r\n    // Sets escape key for closing modal and ENTER for submit.\r\n    setEscapeKey(){\r\n\r\n      //Reset first to make sure that we are not adding\r\n      // the same event multiple times.\r\n      this._modal.off('keydown');\r\n\r\n      this._modal.keydown((e) => {\r\n        if (e.keyCode == 27) {this.closeModal();}\r\n        if (e.keyCode == 13){\r\n          e.preventDefault();\r\n          this.emit('saveNameDate', this._textBox.text(),\r\n                                    this._dateBox.val());\r\n        }\r\n      });\r\n\r\n    }\r\n\r\n    // Closes modal div and reactivates main page shortcuts.\r\n    closeModal(){\r\n      this._modal.remove();\r\n      const mainPageShortcuts = new Shortcuts();\r\n\r\n      // Removes any main page shortcuts that could affect this modal (if there are).\r\n      mainPageShortcuts.removeMainPageShortctus();\r\n\r\n      // Sets new shortcuts.\r\n      mainPageShortcuts.setMainPageShortcuts();\r\n    }\r\n\r\n    // sets the event handlers for the task and habit buttons.\r\n    setTodoTypeButtons(){\r\n\r\n      this._todoBtn.on('click',() => {\r\n        this.emit('saveType', 'task');\r\n      });\r\n\r\n      this._habitBtn.on('click',() =>{\r\n        this.emit('saveType', 'habit');\r\n      });\r\n    }\r\n\r\n    // Removes current icons, prints new icons, reloads hints\r\n    // sets icon actions and remove selected tags.\r\n    changeTodoType(){\r\n      this._iconBarHolder.children().remove();\r\n      this.printIcons();\r\n      this.setIconActions();\r\n      this.emit('saveProject','','');\r\n      this.emit('saveCategory','','');\r\n      this.emit('saveHours', 'Fast task');\r\n      this.emit('saveLearning', false);\r\n      this.emit('saveUrgency', 'Normal');\r\n      this.setDateBox();\r\n      this._textBox.focus();\r\n    }\r\n\r\n    // Set event handlers for option drop down menus\r\n    setDropDownTables(){\r\n\r\n      this._textBox.on('input',() =>{\r\n\r\n        // Text in the textBox\r\n        let text = this._textBox.text();\r\n\r\n        // Stores text inserted before last point in textBox.\r\n        this._textInput = text.substr(this._textBox[0].innerText.lastIndexOf('.') + 1);\r\n\r\n        // The following inputs (specific character + . ), provided that there\r\n        // are no more than 2 points in the text, will summon the corresponding menu.\r\n        // For projects or learning menus to show up, it is a condition that\r\n        // the Task button is selected.\r\n        if ((text.match( RegExp('\\\\.','g'))||[]).length < 2){\r\n\r\n          if(text.indexOf('c.') >= 0){\r\n            this.displayDropDownTable('categories');\r\n\r\n          }else if(text.indexOf('p.') >= 0 && this._model.type=='task'){\r\n            this.displayDropDownTable('projects');\r\n\r\n          }else if(text.indexOf('h.') >= 0){\r\n            this.displayDropDownTable('hours');\r\n\r\n          }else if(text.indexOf('u.') >= 0){\r\n            this.displayDropDownTable('urgency');\r\n\r\n          }else if(text.indexOf('l.') >= 0 && this._model.type=='task'){\r\n            this.displayDropDownTable('learning');\r\n\r\n          }else{\r\n            this._textInput = \"\";\r\n            this.hideDropDownTable();\r\n          }\r\n\r\n        }else{\r\n          this._textInput = \"\";\r\n          this.hideDropDownTable();\r\n        }\r\n\r\n      });\r\n    }\r\n\r\n    // Builds corresponding drop down menu\r\n    // and sets menu event listeners\r\n    displayDropDownTable(userChoice){\r\n\r\n      // First remove whatever menu might be open.\r\n      this.hideDropDownTable();\r\n\r\n      //Variable to remember the index of the active row\r\n      activeRow = 0;\r\n\r\n      //Build corresponding menu\r\n      let menu = this.buildDropDownMenu(userChoice);\r\n\r\n      if(menu){\r\n\r\n        //Selects first available row as active.\r\n        let rows = menu.find('tr');\r\n        rows[activeRow].classList.add(\"addTask_tableOption_active\");\r\n\r\n        //disable esc key\r\n        let modal = $('.modal_addTask');\r\n        modal.off('keydown');\r\n\r\n        //Add listener to keydown so we can navigate through the menu\r\n        $(document).keydown((e) =>{\r\n\r\n          //If key down - select next row\r\n          if (e.keyCode == 40){\r\n            e.preventDefault();\r\n            this.changeActiveRow('down', rows);\r\n\r\n          //If key up - move active up\r\n          }else if(e.keyCode == 38){\r\n            e.preventDefault();\r\n            this.changeActiveRow('up', rows);\r\n\r\n\r\n          //If tab or ENTER key --- save selection and remove from textbox\r\n          }else if(e.keyCode == 9 || e.keyCode ==13){\r\n            e.preventDefault();\r\n            this.saveMenuSelection(rows);\r\n\r\n          //If escape or SPACE key - close and reset table menu\r\n          }else if(e.keyCode == 27){\r\n            this.removeSelectionFromTextBox();\r\n            this._textInput='';\r\n            this.hideDropDownTable();\r\n            this.setEscapeKey();\r\n          }\r\n\r\n        });\r\n\r\n\r\n\r\n        // Hightlights selected row.\r\n        $('.addTask_optTb tr').mouseover(function(e){\r\n          rows[activeRow].classList.remove(\"addTask_tableOption_active\");\r\n          activeRow = $(this).index();\r\n          rows[activeRow].classList.add(\"addTask_tableOption_active\");\r\n        });\r\n\r\n\r\n        $('.addTask_optTb tr').on('click',() =>{\r\n          this.saveMenuSelection(rows);\r\n        });\r\n\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // Removes tag text from textbox. Resets input memory.\r\n    // Hides menu. Sets escape key back.\r\n    saveMenuSelection(rows){\r\n\r\n      let currentMenu = rows[activeRow].getAttribute('data-value');\r\n      let currentOption = rows[activeRow].children[0].children[0].children[1].textContent;\r\n      let currentInput =  this._textInput;\r\n\r\n      this.removeSelectionFromTextBox();\r\n\r\n      this._textInput='';\r\n\r\n      // Close table and reset input memory\r\n      this.hideDropDownTable();\r\n\r\n      // Set escape key so it can close the modal again.\r\n      this.setEscapeKey();\r\n\r\n      switch (currentMenu) {\r\n        case 'learning':\r\n          this.emit('saveLearning', currentOption);\r\n          break;\r\n\r\n        case 'urgency':\r\n          this.emit('saveUrgency', currentOption);\r\n          break;\r\n\r\n        case 'hours':\r\n          this.emit('saveHours', currentOption);\r\n          break;\r\n\r\n        case 'categories':\r\n        case 'new_categories':\r\n          this.emit('saveCategory', currentOption, currentInput);\r\n          break;\r\n\r\n        case 'projects':\r\n        case 'new_projects':\r\n          this.emit('saveProject', currentOption, currentInput);\r\n        break;\r\n\r\n        default:\r\n      }\r\n      // Saves menu selection input\r\n      // saveMenuSelection(currentMenu,currentOption,currentInput, currentColor, linkedCategory);\r\n    }\r\n\r\n    updateLearningIcon(){\r\n\r\n      // Retrieve selected option data so we can know the corresponding icon image.\r\n      let option = this._options.learning.find( obj => {\r\n        return obj.title == 'Also a learning';\r\n      });\r\n\r\n      // Reflects image in modal.\r\n      let learningNode = $('#modal_addTask_learningIcon');\r\n\r\n      if (this._model._learning == true) {\r\n          learningNode.attr('src',option.active);\r\n      }else{\r\n          learningNode.attr('src',option.icon);\r\n      }\r\n\r\n    }\r\n\r\n    updateUrgencyIcon(){\r\n\r\n      // Retrieve selected option data so we can know the corresponding icon image.\r\n      let option = this._options.urgency.find( obj => {\r\n        return obj.title == this._model._urgency;\r\n      });\r\n\r\n      let urgencyNode = $('#modal_addTask_priorityIcon');\r\n      urgencyNode.attr('src',option.icon);\r\n\r\n    }\r\n\r\n    updateHourIcon(){\r\n\r\n      // Retrieve selected option data so we can know the corresponding icon image.\r\n      let option = this._options.hours.find( obj => {\r\n        return obj.title == this._model._hours;\r\n      });\r\n\r\n      let hoursNode = $('#modal_addTask_hoursIcon');\r\n      hoursNode.attr('src',option.active);\r\n    }\r\n\r\n    updateCategory(){\r\n\r\n      let categoryNode = $('#modal_addTask_categoryIcon');\r\n\r\n      if (this._model._category == ''){\r\n        categoryNode.attr('src','/assets/icon_category.svg');\r\n      }else {\r\n        categoryNode.attr('src','/assets/icon_category_active.svg');\r\n      }\r\n\r\n      this.removeCategoryTag();\r\n      this.insertTag('category');\r\n\r\n    }\r\n\r\n    updateProject(){\r\n      let projectNode = $('#modal_addTask_projectIcon');\r\n\r\n      if (this._model._project == ''){\r\n        projectNode.attr('src','/assets/icon_project.svg');\r\n      }else{\r\n        projectNode.attr('src','/assets/icon_project_active.svg');\r\n      }\r\n\r\n      this.removeProjectTag();\r\n      this.insertTag('project');\r\n    }\r\n\r\n    removeProjectTag(){\r\n      let projContainer = $('.modal_addTask_caption_proj');\r\n      projContainer.children().remove();\r\n    }\r\n\r\n    removeCategoryTag(){\r\n      let tagContainer = $('.modal_addTask_caption_cat');\r\n      tagContainer.children().remove();\r\n\r\n    }\r\n\r\n    insertTag(type){\r\n\r\n      let targetContainer;\r\n      let tagText;\r\n      let tagColor;\r\n      let addTag;\r\n\r\n      // Default color used when it is a new category, new project\r\n      // or a undefined category.\r\n      let othercolor = '#9da0a5';\r\n      // Retrieves tag text and color from model, and decides if\r\n      // the tag must be added or not.\r\n      if (type=='category'){\r\n\r\n        targetContainer = $('.modal_addTask_caption_cat');\r\n\r\n        if (this._model._isNewCategory){\r\n            tagText = this._model.category;\r\n            tagColor = othercolor;\r\n            addTag = true;\r\n\r\n        }else if (this._model.category!= ''){\r\n          let categoryModel = this._options.categories.find( obj => {\r\n            return obj.title == this._model.category;});\r\n          tagText = this._model.category;\r\n          tagColor = categoryModel.color;\r\n          addTag = true;\r\n\r\n        }else if (this._model._isNewProject){\r\n          tagText = 'その他';\r\n          tagColor = othercolor;\r\n          addTag = true;\r\n        }\r\n\r\n      }else{\r\n\r\n        targetContainer = $('.modal_addTask_caption_proj');\r\n\r\n        if (this._model._isNewProject){\r\n          tagText = this._model.project;\r\n          tagColor = othercolor;\r\n          addTag = true;\r\n\r\n        }else if (this._model._project!=''){\r\n          let projectModel = this._options.projects.find( obj => {\r\n            return obj.title == this._model.project;});\r\n          tagText = this._model.project;\r\n          tagColor = projectModel.color;\r\n          addTag = true;\r\n        }\r\n      }\r\n\r\n      // Constructs the tag\r\n      if (addTag){\r\n\r\n        let tagBody = $('<a>',{\r\n          class: 'modal_addTask_tagBody',\r\n          text: tagText\r\n        });\r\n        tagBody.css(\"background-color\",tagColor);\r\n\r\n        let tagIcon = $('<img>',{\r\n          class:'modal_addTask_tagIcon',\r\n          src: '/assets/btn_close_modal_white.svg'\r\n        });\r\n\r\n        let tagButton = $('<a>',{\r\n          class: 'modal_addTask_tagButton',\r\n        });\r\n\r\n        tagButton.css(\"background-color\",tagColor);\r\n        tagButton.append(tagIcon);\r\n\r\n        let tag = $('<div>', {\r\n          class: 'modal_addTask_tag'\r\n        });\r\n\r\n        tag.append(tagBody).append(tagButton);\r\n        targetContainer.append(tag);\r\n\r\n        if (type == 'category'){\r\n          $('.modal_addTask_caption_cat .modal_addTask_tagButton').on('click',() => {\r\n            this.emit('saveProject', '', '');\r\n            this.emit('saveCategory', '', '');\r\n          });\r\n\r\n        }else{\r\n          $('.modal_addTask_caption_proj .modal_addTask_tagButton').on('click',() => {\r\n            this.emit('saveProject', '', '');});\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n\r\n    // Removes currently selected menu option text from\r\n    // the modal user input text box.\r\n    removeSelectionFromTextBox(){\r\n\r\n      // Removes selection text.\r\n      this._textBox.text(\r\n        this._textBox.text().replace(new RegExp(this._textInput + '$'), '')\r\n      );\r\n\r\n      // Removes remaining shortcuts\r\n      this._textBox.text(\r\n        this._textBox.text().replace(new RegExp('c\\\\.' + '|' + 'p\\\\.' + '|' + 'l\\\\.' + '|' + 'u\\\\.' + '|' + 'h\\\\.' + '|', 'g'), '')\r\n      );\r\n\r\n      // Trims white spaces\r\n      this._textBox.text(this._textBox.text().trim());\r\n\r\n      // Place curlet at the end of the text box\r\n      let textBoxNode = document.getElementsByClassName('modal_addTask_body_textBox')[0];\r\n      SetCurlet.setEndOfContenteditable(textBoxNode);\r\n\r\n    }\r\n\r\n\r\n    // Changes the selected drop down table row based on\r\n    // the user's action.\r\n    changeActiveRow(direction, rows){\r\n\r\n        // Remove highlight from active row\r\n        rows[activeRow].classList.remove(\"addTask_tableOption_active\");\r\n\r\n        // Move active row up or down depending on the user input.\r\n        if (direction=='down'){\r\n            if(activeRow<rows.length-1){activeRow++;}else{activeRow=0;}\r\n        }else{\r\n            if(activeRow>0){activeRow--;}else{activeRow=rows.length-1;}\r\n        }\r\n\r\n        // Add highlight to new active row.\r\n        rows[activeRow].classList.add(\"addTask_tableOption_active\");\r\n    }\r\n\r\n    // Removes whatever drop down menu might be open.\r\n    hideDropDownTable(){\r\n\r\n      //Remove menu\r\n      $(\".addTask_floater\").remove();\r\n\r\n      //Remove key up-down listener\r\n      $(document).off('keydown');\r\n      $(document).off('keyup');\r\n\r\n      this.setCloseEvents();\r\n\r\n    }\r\n\r\n    // Builds passed menu.\r\n    buildDropDownMenu(userChoice){\r\n\r\n\r\n      // This array will store all the available menu options for this action.\r\n      let optionArray = [];\r\n\r\n      let textInput = this._textInput;\r\n      // Function used later for filtering options matching input text.\r\n      function takeIfContains(item){\r\n        return item.title.includes(textInput);\r\n      }\r\n\r\n      // If there is no input yet, show all options. If input, show matching options only.\r\n      if (this._textInput!= ''){\r\n        optionArray = this._options[userChoice].filter(takeIfContains);\r\n      }else{\r\n        optionArray = this._options[userChoice].slice();\r\n      }\r\n\r\n      // If the current type is task and the user has selected the hours menu\r\n      // we have to remove from the menu all the habit exclusive options.\r\n      // We do this by filtering those hour options that are not both type.\r\n      function takeIfBoth(item){return item.type == 'both';}\r\n      if (userChoice == 'hours' && this._model.type == 'task'){\r\n        let tempArray = optionArray.filter(takeIfBoth);\r\n        optionArray = tempArray.slice();\r\n      }\r\n\r\n      // Build tbody\r\n      let optTbody = $('<tbody>',{});\r\n\r\n      // Construct table row for each option in optionArray\r\n      if (optionArray.length>0){\r\n        for (let i = 0; i < optionArray.length; i++){\r\n          let optTbRow = this.constructTableRow(optionArray, userChoice, i);\r\n          optTbody.append(optTbRow);\r\n        }\r\n\r\n      // If we got an empty array\r\n      }else{\r\n\r\n        let otherOptions = [];\r\n        if (userChoice =='categories' || userChoice =='projects'){otherOptions.push({title: 'Add new', property: userChoice});}\r\n        let optTbRow = this.constructTableRow(otherOptions, 'new_' + userChoice , 0);\r\n\r\n        if (optTbRow){optTbody.append(optTbRow);}\r\n        else{return null;}\r\n      }\r\n\r\n      // Build option table\r\n      let optTable = $('<table>',{\r\n        id:'addTask_optTb_' + userChoice,\r\n        class:'addTask_optTb'});\r\n      optTable.append(optTbody);\r\n\r\n      // Build inner holder\r\n      let innerHolder = $('<div>',{\r\n        id:'addTask_innerHolder_' + userChoice,\r\n        class:'addTask_innerHolder'});\r\n      innerHolder.append(optTable);\r\n\r\n      //Build base div container\r\n      let outerHolder = $('<div>',{\r\n        id:'addTask_floater_' + userChoice,\r\n        class:'addTask_floater'});\r\n      outerHolder.append(innerHolder);\r\n\r\n      $('#modal_addTask_content').append(outerHolder);\r\n\r\n      //The drop down table receives its position and width from the text box.\r\n      let textBoxFrame = $('.modal_addTask_body_taskNameRow_table');\r\n      let refPos = textBoxFrame.offset();\r\n      let refWidth = this._textBox[0].parentNode.offsetWidth;\r\n\r\n      //Position and display menu.\r\n      outerHolder.css({top: refPos.top + 36,left: refPos.left,width:refWidth});\r\n      outerHolder.show();\r\n\r\n      return outerHolder;\r\n    }\r\n\r\n    //Builds each menu table row\r\n    constructTableRow(optionArray, property, index){\r\n\r\n      //If we get an empty array because all possible options have been filtered\r\n      //we retun a null object\r\n      if (optionArray.length==0){return null;}\r\n\r\n      let itemIcon = $([]);\r\n\r\n      //Icon changes depending on the property.\r\n      switch (property) {\r\n        case 'categories':\r\n          itemIcon = $('<div>',{\r\n            class:'addTask_tableOption_catIcon'});\r\n          itemIcon.css(\"background-color\",optionArray[index].color);\r\n          break;\r\n\r\n        case 'projects':\r\n          itemIcon = $('<div>',{\r\n            class:'addTask_tableOption_proIcon'});\r\n          itemIcon.css(\"background-color\",optionArray[index].color);\r\n          break;\r\n\r\n        case 'hours':\r\n          itemIcon = $('<img>',{\r\n            class:'addTask_tableOption_icon',\r\n            src: optionArray[index].icon});\r\n          break;\r\n\r\n        case 'urgency':\r\n          itemIcon = $('<img>',{\r\n            class:'addTask_tableOption_icon',\r\n            src: optionArray[index].icon});\r\n          break;\r\n\r\n        case 'learning':\r\n          itemIcon = $('<img>',{\r\n            class:'addTask_tableOption_icon',\r\n            src: optionArray[index].icon});\r\n            break;\r\n\r\n        case 'new_categories':\r\n        itemIcon = $('<img>',{\r\n          class:'addTask_tableOption_icon',\r\n          'data-value':optionArray[index].property,\r\n          src: '/assets/btn_plus.svg'});\r\n          break;\r\n\r\n        case 'new_projects':\r\n        itemIcon = $('<img>',{\r\n          class:'addTask_tableOption_icon',\r\n          'data-value':optionArray[index].property,\r\n          src: '/assets/btn_plus.svg'});\r\n          break;\r\n      }\r\n\r\n      // Row structure\r\n      let leftPart = $('<div>',{\r\n        class:'addTask_tableOption_leftPart'});\r\n      leftPart.append(itemIcon);\r\n\r\n      let rightPart = $('<div>',{\r\n        class:'addTask_tableOption_rightPart',\r\n        text: optionArray[index].title});\r\n\r\n      let emptyDiv = $('<div>',{});\r\n      emptyDiv.css('display','flex');\r\n      emptyDiv.css('align-items','center');\r\n      emptyDiv.append(leftPart).append(rightPart);\r\n\r\n      let optTbCol = $('<td>',{\r\n        class:'addTask_tableOption'});\r\n      optTbCol.append(emptyDiv);\r\n\r\n      let optTbRow = $('<tr>',{\r\n        'data-value':property\r\n      });\r\n\r\n      optTbRow.append(optTbCol);\r\n\r\n      return optTbRow;\r\n\r\n    }\r\n\r\n    // Set icon button actions\r\n    setIconActions(){\r\n\r\n      let iconBtn = $('.modal_icon');\r\n      let keyword;\r\n      let choice;\r\n\r\n      iconBtn.on('click',(e) =>{\r\n        switch (e.target.id) {\r\n          case 'modal_addTask_categoryIcon':\r\n            keyword='c.';\r\n            choice='categories';\r\n            break;\r\n          case 'modal_addTask_projectIcon':\r\n            keyword='p.';\r\n            choice='projects';\r\n            break;\r\n\r\n          case 'modal_addTask_hoursIcon':\r\n            keyword='h.';\r\n            choice='hours';\r\n            break;\r\n\r\n          case 'modal_addTask_learningIcon':\r\n            keyword='l.';\r\n            choice='learning';\r\n            break;\r\n\r\n          case 'modal_addTask_priorityIcon':\r\n            keyword='u.';\r\n            choice='urgency';\r\n            break;\r\n        }\r\n\r\n        //Remove input\r\n        this.removeSelectionFromTextBox();\r\n\r\n        //Adds the selected icon shorcut to the end of the text box\r\n        if (this._textBox.text()==\"\"){\r\n          this._textBox.text(keyword);\r\n        }else{\r\n          this._textBox.text(this._textBox.text() + ' ' + keyword);\r\n        }\r\n\r\n        // Place curlet at the end of the text box\r\n        let textBoxNode = document.getElementsByClassName('modal_addTask_body_textBox')[0];\r\n        SetCurlet.setEndOfContenteditable(textBoxNode);\r\n\r\n        this._textInput = '';\r\n\r\n        //Display corresponding menu\r\n        this.displayDropDownTable(choice);\r\n      });\r\n\r\n    }\r\n };\r\n\n\n//# sourceURL=webpack:///./controllers/forms/add_task_form/new_task_view.js?");

/***/ }),

/***/ "./controllers/hints/help_hint.js":
/*!****************************************!*\
  !*** ./controllers/hints/help_hint.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*jshint esversion: 6 */\r\n\r\n// Display hints when hovering certain elements in the ui\r\nmodule.exports = class Hint{\r\n\r\n  //Builds the form base UI\r\n  constructor(targetElements){\r\n\r\n    this._target = $(targetElements);\r\n    this._hintBox = $('.hintBox_frame');\r\n    this._target.hover(e => this.showHint(e), e => this.hideHint(e));\r\n  }\r\n\r\n  //Displays a hint next to the target element.\r\n  showHint (e){\r\n\r\n      //Hints can become a big annoynace when accessing the mobile version\r\n      //as they are being displayed every time you hit a button.\r\n      //Therefore, for mobile version, we deactivate this function.\r\n      if($( window ).width()<950){return;}\r\n\r\n      let hint = this.hintMatcher(e.target.id);\r\n      let hintContent = $('<div>', {\r\n        class:'hintBoxContent',\r\n        text: hint});\r\n\r\n      let xPosition = this.calculateXPosition(e.target.x);\r\n      let yPosition = e.target.y + e.target.height;\r\n\r\n      this._hintBox.append(hintContent);\r\n      this._hintBox.css('display','block');\r\n      this._hintBox.css('top', yPosition);\r\n      this._hintBox.css('left', xPosition);\r\n  }\r\n\r\n\r\n  hideHint (e){\r\n      $('.hintBoxContent').remove();\r\n      this._hintBox.css('display','none');\r\n    }\r\n\r\n\r\n  //Calculates x position so the hintbox is never shown out of the screen.\r\n  calculateXPosition(targetPosition){\r\n\r\n    let result = targetPosition;\r\n\r\n    //200 is the max width of the hintBox\r\n    if ((targetPosition + 200) > $( window ).width()){\r\n        result = result-((targetPosition + 200) - $( window ).width()-26);\r\n    }else{\r\n        // IMPORTANT: Due to an unknown issue, hint boxes always show up around\r\n        // 120px sepparated from where they should show up.\r\n        // I added this line as my last resource in order to be able to fix the problem.\r\n        result = result-120;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  //Finds the corresponding hint message.\r\n  hintMatcher(id){\r\n\r\n    switch (id) {\r\n      case 'top_bar_add_btn': return 'Add new tasks and habits. [q]';\r\n      case 'top_bar_stats_btn': return 'See your performance in numbers!';\r\n      case 'top_bar_account_btn': return 'Manage your account like a boss!';\r\n      case 'modal_addTask_categoryIcon': return 'Assing a category to this item [c.]';\r\n      case 'modal_addTask_projectIcon': return 'Include this task inside a project [p.]';\r\n      case 'modal_addTask_priorityIcon': return 'Select the urgency level of this item [u.]';\r\n      case 'modal_addTask_learningIcon': return 'Add this item to your list of learnt things [l.]';\r\n      case 'modal_addTask_hoursIcon': return 'Estimate how many hours this item will take to complete to get more accurate stats later! [h.]';\r\n      default: return 'Error: No hint found';\r\n    }\r\n  }\r\n\r\n};\r\n\n\n//# sourceURL=webpack:///./controllers/hints/help_hint.js?");

/***/ }),

/***/ "./controllers/index.js":
/*!******************************!*\
  !*** ./controllers/index.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\nconst addTaksForm = __webpack_require__(/*! ./forms/add_task_form */ \"./controllers/forms/add_task_form.js\");\r\nconst leftMenuHandler = __webpack_require__(/*! ./menus/left_menu */ \"./controllers/menus/left_menu.js\");\r\nconst Hint = __webpack_require__(/*! ./hints/help_hint */ \"./controllers/hints/help_hint.js\");\r\nconst Shortcuts = __webpack_require__(/*! ./shortcuts/shortcuts */ \"./controllers/shortcuts/shortcuts.js\");\r\n\r\n//Main task list element\r\nconst ol = document.getElementById('mainList');\r\n\r\n$(document).ready(function(){\r\n\r\n  //Adding new tasks\r\n  $('#formBtn').on('click', function(){\r\n\r\n      var item = $('form input');\r\n      var todo = {item: item.val()};\r\n\r\n      const secondList = $('#mainList');\r\n\r\n      console.log(\"button clicked\");\r\n      console.log(todo);\r\n\r\n      $.ajax({\r\n        type: 'POST',\r\n        url: '/',\r\n        data: todo,\r\n        success: function(data){\r\n\r\n          secondList.append('<li>' + todo.item + '</li>');\r\n          // for (let i = 0; i<data.length;i++){\r\n          //   secondList.append('<li>' + data[i].item + '</li>');\r\n          // }\r\n\r\n          //do something with the data via front-end framework\r\n          //location.reload();\r\n        }\r\n      });\r\n      return false;\r\n  });\r\n\r\n  // $('li').on('click', function(){\r\n  //\r\n  //     console.log($(this));\r\n  //     let item = {item: $(this).text()};\r\n  //\r\n  //     $.ajax({\r\n  //       type: 'POST',\r\n  //       url: '/remove',\r\n  //       data: item,\r\n  //       success: function(item){\r\n  //\r\n  //         console.log(\"listo\");\r\n  //         //do something with the data via front-end framework\r\n  //         // location.reload();\r\n  //       }\r\n  //     });\r\n  // });\r\n\r\n\r\n  ol.addEventListener('slip:beforereorder', function(e){\r\n      if (/demo-no-reorder/.test(e.target.className)) {\r\n          e.preventDefault();\r\n      }\r\n  }, false);\r\n\r\n  ol.addEventListener('slip:swipe', function(e){\r\n    console.log(e.detail.direction);\r\n  },false);\r\n\r\n\r\n  ol.addEventListener('slip:beforeswipe', function(e){\r\n      if (e.target.nodeName == 'INPUT' || /demo-no-swipe/.test(e.target.className)) {\r\n          e.preventDefault();\r\n      }\r\n  }, false);\r\n\r\n  ol.addEventListener('slip:beforewait', function(e){\r\n      if (e.target.className.indexOf('instant') > -1)\r\n      e.preventDefault();\r\n  }, false);\r\n\r\n  ol.addEventListener('slip:afterswipe', function(e){\r\n      e.target.parentNode.removeChild(e.target);\r\n  }, false);\r\n\r\n  ol.addEventListener('slip:reorder', function(e){\r\n      e.target.parentNode.insertBefore(e.target, e.detail.insertBefore);\r\n      return false;\r\n  }, false);\r\n\r\n  new Slip(ol);\r\n\r\n\r\n  //User interface elements\r\n  const leftMenuIcon = $('#top_bar_menu_icon');\r\n  const leftMenu = $(\"#left_menu\");\r\n  const content = $(\"#content\");\r\n\r\n\r\n  // Shows and hides left menu in mobile version.\r\n  leftMenuIcon.on('click', function(){\r\n    if ($( window ).width()<950){\r\n      if(leftMenu.hasClass(\"show_left_menu\")){\r\n        leftMenuHandler.leftMenuHide(leftMenu,content,leftMenuIcon);\r\n      }else{\r\n        leftMenuHandler.leftMenuShow(content,leftMenu,leftMenuIcon);\r\n      }\r\n    }\r\n  });\r\n\r\n\r\n  // Removes mobile left menu when screen is enlarged to PC size.\r\n  $( window ).resize(function() {\r\n   if($( window ).width()>950 &&  leftMenu.hasClass(\"show_left_menu\")){\r\n     leftMenuHandler.leftMenuHide(leftMenu,content,leftMenuIcon);\r\n   }\r\n});\r\n\r\n\r\n  // Displays add task form\r\n  $('#top_bar_add_btn').on('click', function(){\r\n      addTaksForm.showModal();\r\n  });\r\n\r\n\r\n  // Displays hint when user hovers elements with hints attached.\r\n  const mainHints = new Hint('.hintHolder');\r\n\r\n  // Set main page Shortcuts\r\n  const mainPageShortcuts = new Shortcuts();\r\n  mainPageShortcuts.setMainPageShortcuts();\r\n\r\n});\r\n\n\n//# sourceURL=webpack:///./controllers/index.js?");

/***/ }),

/***/ "./controllers/menus/left_menu.js":
/*!****************************************!*\
  !*** ./controllers/menus/left_menu.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n// Module in charge of displaying and hidding the different ui menus.\r\n\r\nexports.leftMenuHide = function(leftMenu,content,leftMenuIcon){\r\n  leftMenu.removeClass(\"show_left_menu\");\r\n  content.removeClass(\"grey_content\");\r\n  leftMenuIcon.attr(\"src\", \"/assets/btn_topbar_menuicon.svg\");\r\n};\r\n\r\nexports.leftMenuShow = function(content,leftMenu,leftMenuIcon){\r\n  content.addClass(\"grey_content\");\r\n  leftMenu.addClass(\"show_left_menu\");\r\n  leftMenuIcon.attr(\"src\", \"/assets/btn_top_close_menu.svg\");\r\n};\r\n\n\n//# sourceURL=webpack:///./controllers/menus/left_menu.js?");

/***/ }),

/***/ "./controllers/messageBox/messageBox.js":
/*!**********************************************!*\
  !*** ./controllers/messageBox/messageBox.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*jshint esversion: 6 */\r\n\r\nmodule.exports = class MsgBox{\r\n  constructor(){\r\n  }\r\n\r\n\r\n  /**\r\n   * showMsgBox - temporarily displays a floating message with the color\r\n   * and in the position passed by the caller.\r\n   *\r\n   * @param  {string} msg      Text to display in the floating message box.\r\n   * @param  {string} type     Can be 'error','notice','goal'\r\n   * @param  {string} position Can be 'up', 'down'\r\n   */\r\n  showMsgBox(msg, type, position){\r\n\r\n    let targetClass;\r\n\r\n    // Set msgbox background color.\r\n    switch (type) {\r\n      case 'error':\r\n        targetClass = 'inner_msgBox_error';\r\n        break;\r\n      default:\r\n        targetClass = 'inner_msgBox';\r\n    }\r\n\r\n    // Construct msgbox container\r\n    let msgBoxWrapper = $('<div>', {\r\n      class: 'floating_msgBox',\r\n      id:'floating_msgBox'});\r\n\r\n    // If mobile, reduce top value.\r\n    let topDistance = '82px';\r\n    if($(window).width()<950){\r\n      topDistance='27px';\r\n    }\r\n\r\n    // Set msbgox position\r\n    if(position=='up'){\r\n      msgBoxWrapper.css('top',topDistance);\r\n    }else{\r\n      msgBoxWrapper.css('bottom','40px');\r\n    }\r\n\r\n\r\n    // Construct inner div\r\n    let msgBox = $('<div>', {\r\n      class: targetClass,\r\n      text: msg});\r\n\r\n    // Append to body\r\n    msgBoxWrapper.append(msgBox);\r\n    $(document.body).append(msgBoxWrapper);\r\n\r\n    //Apply animation\r\n    $('#floating_msgBox').hide().fadeIn(800).delay(4000).fadeOut(1000, function(){\r\n      $(this).remove();\r\n    });\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n};\r\n\n\n//# sourceURL=webpack:///./controllers/messageBox/messageBox.js?");

/***/ }),

/***/ "./controllers/otherMethods/setCaret.js":
/*!**********************************************!*\
  !*** ./controllers/otherMethods/setCaret.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n// Places the curlet at the end in contend editable elements\r\nexports.setEndOfContenteditable = function setEndOfContenteditable(contentEditableElement)\r\n{\r\n    var range,selection;\r\n    if(document.createRange) //Firefox, Chrome, Opera, Safari, IE 9+\r\n    {\r\n        range = document.createRange(); //Create a range (a range is a like the selection but invisible)\r\n        range.selectNodeContents(contentEditableElement); //Select the entire contents of the element with the range\r\n        range.collapse(false); //collapse the range to the end point. false means collapse to end rather than the start\r\n        selection = window.getSelection();//get the selection object (allows you to change selection)\r\n        selection.removeAllRanges();//remove any selections already made\r\n        selection.addRange(range);//make the range you have just created the visible selection\r\n    }\r\n    else if(document.selection)//IE 8 and lower\r\n    {\r\n        range = document.body.createTextRange();//Create a range (a range is a like the selection but invisible)\r\n        range.moveToElementText(contentEditableElement);//Select the entire contents of the element with the range\r\n        range.collapse(false);//collapse the range to the end point. false means collapse to end rather than the start\r\n        range.select();//Select the range (make it the visible selection\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./controllers/otherMethods/setCaret.js?");

/***/ }),

/***/ "./controllers/shortcuts/shortcuts.js":
/*!********************************************!*\
  !*** ./controllers/shortcuts/shortcuts.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\nconst addTaksForm = __webpack_require__(/*! ./../forms/add_task_form */ \"./controllers/forms/add_task_form.js\");\r\n\r\nmodule.exports = class Shortcuts{\r\n\r\n  constructor(){\r\n    this._mainPage = $(document);\r\n  }\r\n\r\n  setMainPageShortcuts(){\r\n\r\n    this._mainPage.keydown((e) =>{\r\n\r\n      //(q) Opens addtask panel.\r\n      if (e.keyCode == 81){\r\n        e.preventDefault();\r\n        this._mainPage.off('keydown');\r\n        addTaksForm.showModal();\r\n\r\n      }\r\n  });\r\n  }\r\n\r\n  removeMainPageShortctus(){\r\n    this._mainPage.off('keydown');\r\n  }\r\n\r\n};\r\n\n\n//# sourceURL=webpack:///./controllers/shortcuts/shortcuts.js?");

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n//# sourceURL=webpack:///./node_modules/events/events.js?");

/***/ })

/******/ });