/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./controllers/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./controllers/DbHandler/DbHandler.js":
/*!********************************************!*\
  !*** ./controllers/DbHandler/DbHandler.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\nconst EventEmitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\r\nconst MsgBox = __webpack_require__(/*! ./../messageBox/messageBox */ \"./controllers/messageBox/messageBox.js\");\r\n\r\n\r\n/**\r\n *\r\n */\r\nmodule.exports = class DbHandler extends EventEmitter{\r\n  constructor(id){\r\n    super(id);\r\n\r\n    this._messanger = new MsgBox();\r\n\r\n  }\r\n\r\n//-----------------------TODOS-------------------------------------------\r\n\r\n/**\r\n * addTodos - Requests the back end to add an array of todos into\r\n * the database.\r\n *\r\n * @param  {Array} todos Array of todo objects.\r\n * @return {Ajax}        Ajax response.\r\n */\r\naddTodos(todos){\r\n\r\n  const delivery = {todos: JSON.stringify(todos,null,2)};\r\n\r\n  return $.ajax({\r\n    type: 'POST',\r\n    url: '/todos',\r\n    data: delivery,\r\n  });\r\n}\r\n\r\n\r\n  /**\r\n   * getTodos - Retrieves all matching todos from db.\r\n   *\r\n   * @param  {Object} request ex. {user: OPTIONS.id, status:'active'}\r\n   * @return {ajax}\r\n   */\r\n  getTodos(request){\r\n\r\n    return $.ajax({\r\n      type: 'GET',\r\n      url: '/todos',\r\n      data: request,\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * updateTodo - Requests back-end to save passed modifications into\r\n   * corresponding todo in the database.\r\n   *\r\n   * @param  {String} id\r\n   * @param  {object} request\r\n   * @return {ajax}\r\n   */\r\n  updateTodoById(id, request){\r\n\r\n    let delivery = {id: id,\r\n                    request: JSON.stringify(request,null,2)};\r\n\r\n    return $.ajax({\r\n      type: 'PATCH',\r\n      url: '/todos',\r\n      data: delivery,\r\n    });\r\n  }\r\n\r\n\r\n//-----------------------OPTIONS-------------------------------------------\r\n\r\nupdateOptions(id, request){\r\n\r\n  let delivery = {id: id,\r\n                  request: JSON.stringify(request,null,2)};\r\n\r\n  return $.ajax({\r\n    type: 'PATCH',\r\n    url: '/users',\r\n    data: delivery,\r\n  });\r\n}\r\n\r\n\r\n//-----------------------POINTS-------------------------------------------\r\n\r\n\r\n\r\n  /**\r\n   * addPoints - description\r\n   *\r\n   * @param  {Array} todos Array of todo objects.\r\n   * @return {Ajax}\r\n   */\r\n  addPoints(todos){\r\n\r\n    const delivery = {points: JSON.stringify(todos,null,2)};\r\n\r\n    return $.ajax({\r\n      type: 'POST',\r\n      url: '/points',\r\n      data: delivery,\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * removePoint - Completely removes indicated point\r\n   * fromt db.\r\n   *\r\n   * @param  {Object} point  ex.{taskId : pointId};\r\n   * @return {ajax}          ajax response\r\n   */\r\n  removePoint(point){\r\n\r\n    return $.ajax({\r\n        type: 'DELETE',\r\n        url: '/points',\r\n        data: point,\r\n      });\r\n  }\r\n\r\n};\r\n\n\n//# sourceURL=webpack:///./controllers/DbHandler/DbHandler.js?");

/***/ }),

/***/ "./controllers/forms/add_note_form.js":
/*!********************************************!*\
  !*** ./controllers/forms/add_note_form.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\n\r\nconst Shortcuts = __webpack_require__(/*! ./../shortcuts/shortcuts */ \"./controllers/shortcuts/shortcuts.js\");\r\nconst MsgBox = __webpack_require__(/*! ./../messageBox/messageBox */ \"./controllers/messageBox/messageBox.js\");\r\nconst SetCurlet = __webpack_require__(/*! ./../otherMethods/setCaret */ \"./controllers/otherMethods/setCaret.js\");\r\n\r\nlet messenger = new MsgBox();\r\n\r\nlet listController;\r\n\r\n// Todo as it was when the file was printed into the list.\r\nlet todo;\r\n\r\n// Note data extracted from the user interface list item.\r\nlet notes;\r\n\r\n// Note input dom.\r\nlet inputTextBox;\r\n\r\n// Reference to the user interface list item.\r\nlet listItem;\r\n\r\n\r\nmodule.exports = class NotesForm{\r\n  constructor(listControl, swipeControl){\r\n    listController = listControl;\r\n  }\r\n\r\n\r\n  displayForm(currentTodo){\r\n\r\n    // Disable main page shortcuts.\r\n    Shortcuts.removeMainPageShortctus();\r\n\r\n    // Save todo and current list item.\r\n    todo = currentTodo;\r\n    listItem = $(`#${todo._id}`);\r\n\r\n    // Get most recent note data\r\n    // directly from the listItem.\r\n    notes = listItem.attr('data-notes');\r\n\r\n    // Display modal\r\n    $(document.body).append(buildModal());\r\n\r\n    inputTextBox.text(notes);\r\n    inputTextBox.focus();\r\n\r\n    // Adds escpe shortcut.\r\n    $(document).off('keydown');\r\n    $(document).keydown((e) => {\r\n      if (e.keyCode == 27) {\r\n        closeModal();\r\n      }\r\n    });\r\n\r\n    // Places curlet at the end of the text.\r\n    let textBoxNode = document.getElementsByClassName('notes_textBox')[0];\r\n    SetCurlet.setEndOfContenteditable(textBoxNode);\r\n\r\n  }\r\n\r\n};\r\n\r\n\r\nfunction saveChanges(){\r\n\r\n  // Abort saving if there is no Internet conection.\r\n  if(navigator.onLine){\r\n\r\n    let updateRequest = {notes:inputTextBox.text()};\r\n\r\n   // Mark object as complete and extract points\r\n   listController.updateTaskProgress(todo._id, updateRequest);\r\n\r\n   // Updates value in user interface list item too.\r\n   listItem.attr('data-notes',inputTextBox.text());\r\n\r\n   closeModal();\r\n\r\n   if(inputTextBox.text()!=''){\r\n     listItem.find('#notesTag').css('opacity','0.75');\r\n   }else{\r\n     listItem.find('#notesTag').css('opacity','0');\r\n   }\r\n\r\n  }else{\r\n    messenger.showMsgBox('Failed to save new data. \\nCheck if there is an internet connection.','error','down');\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @private\r\n * buildModal - Returns a popup screen with a title, subtitle, and btns.\r\n * @return {$}  jquery element.\r\n */\r\nfunction buildModal() {\r\n\r\n  // Modal window\r\n\r\n  let modal = $('<div>', {\r\n    class:'modal_centered modal_notes',\r\n    id:'modal_notes',\r\n  });\r\n\r\n\r\n  // Modal background\r\n\r\n  let modalBackground = $('<div>', {\r\n    class: 'modal_blackBackground',\r\n    id:'modal_notes_background'});\r\n\r\n  modalBackground.append(modal);\r\n\r\n\r\n  // Modal title row\r\n\r\n  let titleRow = $('<div>',{\r\n    class: 'modal_title_row'\r\n  });\r\n\r\n  let titleSpan = $('<span>',{\r\n    class: 'modal_title_text',\r\n    text: 'Side Notes'\r\n  });\r\n\r\n  let closeBtn = $('<span>',{\r\n    class: 'modal_close_btn_container',\r\n  });\r\n\r\n  let closeIcon = $('<img>',{\r\n    src:'/assets/btn_close_modal.svg',\r\n    class: 'modal_close_icon'\r\n  });\r\n\r\n  closeBtn.click(()=>{\r\n    closeModal();\r\n  });\r\n\r\n  closeBtn.append(closeIcon);\r\n  titleRow.append(closeBtn);\r\n\r\n  titleRow.append(titleSpan);\r\n\r\n\r\n  // Modal task name row\r\n\r\n  let todoNameRow = $('<div>',{\r\n    class: 'modal_subtitle_row'\r\n  });\r\n\r\n  let todoNameSpan = $('<span>',{\r\n    class: 'modal_subtitle_text',\r\n    text: todo.name\r\n  });\r\n\r\n  todoNameRow.append(todoNameSpan);\r\n\r\n  // Textbox Row\r\n\r\n  let inputRow = $('<div>',{\r\n    class: 'modal_content_row'\r\n  });\r\n  inputRow.css('margin-bottom', '16px');\r\n\r\n  inputTextBox = $('<div>',{\r\n    class:'notes_textBox',\r\n    autocomplete: 'off',\r\n    contenteditable: 'true',\r\n    placeholder: 'Something important about this task?',\r\n    tabindex: '1'\r\n  });\r\n\r\n  inputTextBox.keydown((e) =>{\r\n    if (e.which === 13 && e.shiftKey === false){\r\n      e.preventDefault();\r\n      saveChanges();\r\n    }\r\n  });\r\n\r\n\r\n  // Buttons row\r\n\r\n  let btnRow = $('<div>',{\r\n    id: 'modal_btns_row',\r\n  });\r\n  btnRow.css('text-align','center');\r\n\r\n  let saveBtn = $('<span>',{\r\n    class: 'blue_botton',\r\n    tabindex: '2',\r\n    text: 'Save'});\r\n  saveBtn.css('margin-right', '5px');\r\n\r\n  let cancelBtn = $('<span>',{\r\n    class: 'blue_botton',\r\n    tabindex: '3',\r\n    text: 'Cancel'});\r\n  cancelBtn.css('margin-left', '5px');\r\n\r\n  saveBtn.click(()=>{\r\n    saveChanges();\r\n  });\r\n\r\n  saveBtn.keydown((e) =>{\r\n    if (e.which === 13){\r\n      saveChanges();\r\n    }\r\n  });\r\n\r\n  cancelBtn.click(()=>{\r\n    closeModal();\r\n  });\r\n\r\n  cancelBtn.keydown((e) =>{\r\n    if (e.which === 13){\r\n      closeModal();\r\n    }\r\n  });\r\n\r\n  btnRow.append(saveBtn)\r\n        .append(cancelBtn);\r\n\r\n  inputRow.append(inputTextBox);\r\n\r\n  modal.append(titleRow)\r\n       .append(todoNameRow)\r\n       .append(inputRow)\r\n       .append(btnRow);\r\n\r\n  return modalBackground;\r\n\r\n}\r\n\r\n\r\n/**\r\n * @private\r\n * closeModal - Closes modal and restores main screen shortcuts.\r\n */\r\nfunction closeModal(){\r\n\r\n  // Set main page Shortcuts\r\n  // (Remove first to avoid any possible duplicates. )\r\n  Shortcuts.removeMainPageShortctus();\r\n  Shortcuts.setMainPageShortcuts();\r\n\r\n  $('#modal_notes_background').fadeOut(200);\r\n\r\n  setTimeout( () => {\r\n    $('#modal_notes_background').remove();\r\n  }, 200);\r\n}\r\n\n\n//# sourceURL=webpack:///./controllers/forms/add_note_form.js?");

/***/ }),

/***/ "./controllers/forms/add_progress_form.js":
/*!************************************************!*\
  !*** ./controllers/forms/add_progress_form.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\n\r\nconst Shortcuts = __webpack_require__(/*! ./../shortcuts/shortcuts */ \"./controllers/shortcuts/shortcuts.js\");\r\nconst MsgBox = __webpack_require__(/*! ./../messageBox/messageBox */ \"./controllers/messageBox/messageBox.js\");\r\nconst Icons = __webpack_require__(/*! ./../icons/icons.js */ \"./controllers/icons/icons.js\");\r\n\r\nlet messenger = new MsgBox();\r\nlet listController;\r\nlet swipeController;\r\n\r\n// Todo as it was when the file was printed into the list.\r\nlet todo;\r\nlet listItem;\r\n\r\n// + and - buttons\r\nlet addBtn;\r\nlet subsBtn;\r\n\r\n// Row where progress btns are printed.\r\nlet progressRow;\r\n\r\n// Total hours and progress\r\nlet totalHours;\r\nlet currentProgress;\r\n\r\n// Used to remember the hours and progress before any\r\n// changed were applied using the modal.\r\nlet hours;\r\nlet progress;\r\n\r\n\r\n/**\r\n *\r\n */\r\nmodule.exports = class ProgressForm{\r\n  constructor(listControl, swipeControl){\r\n    listController = listControl;\r\n    swipeController = swipeControl;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * displayForm - Remembers the initial hour and progress values\r\n   * prints the add progress modal and deactivates the shortcuts\r\n   * from the main screen.\r\n   *\r\n   * @param  {Object} currentTodo todo item from the db.\r\n   */\r\n  displayForm(currentTodo){\r\n\r\n    // Disable main page shortcuts.\r\n    Shortcuts.removeMainPageShortctus();\r\n\r\n    // Save todo and current list item.\r\n    todo = currentTodo;\r\n    listItem = $(`#${todo._id}`);\r\n\r\n    // Get most recent hours and progress info\r\n    // directly from the listItem.\r\n    hours = listItem.attr('data-hours');\r\n    progress = listItem.attr('data-progress');\r\n\r\n\r\n    // We copy the hour and progress data into differente variables\r\n    // so we can manipulate this data without losing the original\r\n    // info that we will use when saving the changes into the db.\r\n    totalHours = (hours == 'Fast task') ? 1: Number(hours);\r\n    currentProgress = Number(progress);\r\n\r\n\r\n    // Display modal\r\n    $(document.body).append(buildModal());\r\n\r\n    // Refresh Progress bar\r\n    refreshProgress();\r\n\r\n  }\r\n\r\n};\r\n\r\n\r\n\r\n/**\r\n * saveProgress - Makes sure that there is an internet conection,\r\n * checks that the initial values have changed and then reflect\r\n * the changes into the list item and into the database saving\r\n * the corresponding earned or losed points.\r\n * It also changes the task status of completed.\r\n */\r\nfunction saveProgress() {\r\n\r\n  // Abort saving if there is no Internet conection.\r\n  if(navigator.onLine){\r\n\r\n    // Abort doing anything if the initial values\r\n    // remain the same.\r\n    if(totalHours!=hours || currentProgress!=progress){\r\n\r\n      // If hours and progress are the same,\r\n      // then we can mark the task as completed\r\n      // and save all the earned points as one single item.\r\n      if(totalHours == currentProgress){\r\n\r\n        let completedTodo = {id: todo._id,\r\n                            hours: (hours=='Fast task') ? 1: hours,\r\n                            progress: progress};\r\n\r\n        // Mark object as complete and extract points\r\n        listController.completeTodo(completedTodo);\r\n\r\n        // Removes object and minimizes list header if went empty.\r\n        swipeController.minimize(todo._id);\r\n\r\n      }else{\r\n\r\n        // Udate list item counter, progress bar and inner data.\r\n        // Counter is not visible for fast tasks, that's why we\r\n        // make it visible in here by default.\r\n        listItem.find('#progress_div').text(`${currentProgress}/${totalHours}`);\r\n        listItem.find('#progress_div').css('opacity','1');\r\n        listItem.find('#progress_div').css('color','rgb(21, 81, 181)');\r\n\r\n        listItem.attr('data-hours',totalHours);\r\n        listItem.attr('data-progress',currentProgress);\r\n\r\n        barLength = (currentProgress>0) ? Math.round((currentProgress/Number(totalHours))*100) : 0;\r\n        listItem.find('.task_item_progress_bar').css('width',barLength+'%');\r\n\r\n        // Find if points must be added or rested from the db.\r\n        let points = currentProgress - progress;\r\n\r\n        // If points must be added, add them one by one, assigning them\r\n        // an id equal to the todo.id + _p + point index\r\n        if(points>=1){\r\n\r\n          for(let pt=Number(progress) + 1; pt<currentProgress+1; pt++){\r\n            listController.sendPoint(`${todo._id}_p${pt}`, todo);\r\n          }\r\n\r\n        // If points have to be removed, request the db to remove\r\n        // those points from the database.\r\n        }else if(points<0){\r\n\r\n          for(let pto=currentProgress+1; pto<Number(progress) + 1; pto++){\r\n            listController.removePoint(`${todo._id}_p${pto}`);\r\n          }\r\n\r\n        }\r\n\r\n        listController.updateTaskProgress(todo._id,\r\n                                          {hours: totalHours,\r\n                                           progress: currentProgress\r\n                                           });\r\n\r\n      }\r\n    }\r\n\r\n  closeModal();\r\n\r\n  }else{\r\n    messenger.showMsgBox('Failed to save new data. \\nCheck if there is an internet connection.','error','down');\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @private\r\n * insertProgress - Updates progress bar based on user input.\r\n * @param  {Number} option Indicates selected cell.\r\n */\r\nfunction insertProgress(option){\r\n\r\n  if(currentProgress==option){\r\n    currentProgress=option-1;\r\n  }else{\r\n    currentProgress=option;\r\n  }\r\n\r\n  refreshProgress();\r\n}\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * refreshProgress - Prints the progress bar based based on the current\r\n * totalhours and currentprogress values.\r\n */\r\nfunction refreshProgress() {\r\n\r\n  progressRow.empty();\r\n\r\n  let table = $('<table>', {\r\n    id: 'progress_table',\r\n    cellspacing:0,\r\n    cellpadding:0});\r\n  table.css('width','100%');\r\n\r\n  let body = $('<tbody>');\r\n  body.css('width','100%');\r\n\r\n  let firstRow = $('<tr>');\r\n  let secondRow = $('<tr>');\r\n\r\n  body.append(firstRow).append(secondRow);\r\n  table.append(body);\r\n  progressRow.append(table);\r\n\r\n  for(let i=1; i<totalHours+1; i++){\r\n\r\n    let progressBtn = $('<td>',{\r\n      class: 'progress_modal_progress_cell',\r\n      id: `progress_cell_${i}`});\r\n    firstRow.append(progressBtn);\r\n\r\n    let progressLabel = $('<td>',{\r\n      class:'progress_modal_progress_label',\r\n      text: `${i}h`});\r\n    secondRow.append(progressLabel);\r\n\r\n    // Add blue color if this hour was completed.\r\n    if(currentProgress>=i){\r\n      progressBtn.css('background-color','#1551b5');\r\n      progressLabel.css('color','#1551b5');\r\n    }\r\n\r\n    let cellNumber = i;\r\n\r\n    // Add click hanlder to the cell.\r\n    progressBtn.click(() => {insertProgress(cellNumber);});\r\n    progressLabel.click(() => {insertProgress(cellNumber);});\r\n\r\n\r\n    // Add border radious based on the position of the cell.\r\n    switch (true) {\r\n      case totalHours+1==2:\r\n        progressBtn.css('border-radius','5px');\r\n        break;\r\n      case i==1:\r\n        progressBtn.css('border-radius','5px 0px 0px 5px');\r\n        break;\r\n      case i==totalHours:\r\n        progressBtn.css('border-radius','0px 5px 5px 0px');\r\n        break;\r\n      default:\r\n    }\r\n\r\n    // Udpate +- buttons\r\n    refreshControlButtons();\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * refreshControlButtons - Activates and deactivates total hour\r\n * control buttons depending on if the totalHours value has reached\r\n * its top and bottom limits or not.\r\n */\r\nfunction refreshControlButtons() {\r\n\r\n  switch (true) {\r\n    case totalHours <= 1:\r\n        enableAdd(true);\r\n        enableSubstract(false);\r\n      break;\r\n    case totalHours >= 9:\r\n        enableAdd(false);\r\n        enableSubstract(true);\r\n      break;\r\n    default:\r\n      enableAdd(true);\r\n      enableSubstract(true);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * enableAdd - Enables or desables the add hours button.\r\n * @param  {boolean} active true activates, false desactivates the btn.\r\n */\r\nfunction enableAdd(active){\r\n\r\n  addBtn.removeClass('btnDisabled');\r\n\r\n  if(active){\r\n    addBtn.off('click');\r\n    addBtn.click(() =>{\r\n      totalHours++;\r\n      refreshProgress();\r\n    });\r\n  }else{\r\n    addBtn.off('click');\r\n    addBtn.addClass('btnDisabled');\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * enableSubstract - Enables or desables the substract hours button.\r\n * @param  {boolean} active true activates, false desactivates the btn.\r\n */\r\nfunction enableSubstract(active){\r\n\r\n  subsBtn.removeClass('btnDisabled');\r\n\r\n  if(active){\r\n    subsBtn.off('click');\r\n    subsBtn.click(() =>{\r\n      totalHours--;\r\n      if(totalHours<currentProgress){currentProgress=totalHours;}\r\n      refreshProgress();\r\n    });\r\n  }else{\r\n    subsBtn.off('click');\r\n    subsBtn.addClass('btnDisabled');\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * buildModal - Returns a popup screen with a title, subtitle, and btns.\r\n * @return {$}  jquery element.\r\n */\r\nfunction buildModal() {\r\n\r\n  // Modal window\r\n  let modal = $('<div>', {\r\n    class:'modal_centered modal_score',\r\n    id:'modal_score',\r\n  });\r\n\r\n  // Modal background\r\n\r\n  let modalBackground = $('<div>', {\r\n    class: 'modal_blackBackground',\r\n    id:'modal_score_background'});\r\n\r\n  modalBackground.append(modal);\r\n\r\n\r\n  // Modal title row\r\n\r\n  let titleRow = $('<div>',{\r\n    class: 'modal_title_row'\r\n  });\r\n\r\n  let titleSpan = $('<span>',{\r\n    class: 'modal_title_text',\r\n    text: 'Add your progress!'\r\n  });\r\n\r\n  let closeBtn = $('<span>',{\r\n    class: 'modal_close_btn_container'\r\n  });\r\n\r\n  let closeIcon = Icons.close();\r\n  closeIcon.addClass('modal_close_icon');\r\n\r\n  closeBtn.click(()=>{\r\n    closeModal();\r\n  });\r\n\r\n  closeBtn.append(closeIcon);\r\n  titleRow.append(closeBtn);\r\n\r\n  titleRow.append(titleSpan);\r\n\r\n\r\n  // Modal task name row\r\n\r\n  let todoNameRow = $('<div>',{\r\n    class: 'modal_subtitle_row'\r\n  });\r\n\r\n  let todoNameSpan = $('<span>',{\r\n    class: 'modal_subtitle_text',\r\n    text: todo.name\r\n  });\r\n\r\n  todoNameRow.append(todoNameSpan);\r\n\r\n\r\n  // Progress Row\r\n\r\n  progressRow = $('<div>',{\r\n    class: 'modal_content_row'\r\n  });\r\n\r\n\r\n  // Buttons row\r\n\r\n  let btnRow = $('<div>',{\r\n    id: 'modal_btns_row',\r\n  });\r\n\r\n  addBtn = $('<span>',{\r\n    class: 'blue_botton_little',\r\n    id: 'progress_modal_addBtn',\r\n    text: '+'});\r\n  addBtn.css('float','left');\r\n\r\n  subsBtn = $('<span>',{\r\n    class: 'blue_botton_little',\r\n    id: 'progress_modal_restBtn',\r\n    text: '-'});\r\n  subsBtn.css('float','left');\r\n  subsBtn.css('margin-right','4px');\r\n\r\n  let saveBtn = $('<span>',{\r\n    class: 'blue_botton',\r\n    text: 'Save'});\r\n  saveBtn.css('float','right');\r\n\r\n  saveBtn.click(()=>{\r\n    saveProgress();\r\n  });\r\n\r\n\r\n  btnRow.append(saveBtn)\r\n        .append(subsBtn)\r\n        .append(addBtn);\r\n\r\n\r\n  modal.append(titleRow)\r\n       .append(todoNameRow)\r\n       .append(progressRow)\r\n       .append(btnRow);\r\n\r\n  return modalBackground;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * closeModal - Closes modal and restores main screen shortcuts.\r\n */\r\nfunction closeModal(){\r\n\r\n  // Set main page Shortcuts\r\n  // (Remove first to avoid any possible duplicates. )\r\n  Shortcuts.removeMainPageShortctus();\r\n  Shortcuts.setMainPageShortcuts();\r\n\r\n  $('#modal_score_background').fadeOut(200);\r\n\r\n  setTimeout( () => {\r\n    $('#modal_score_background').remove();\r\n  }, 200);\r\n}\r\n\n\n//# sourceURL=webpack:///./controllers/forms/add_progress_form.js?");

/***/ }),

/***/ "./controllers/forms/add_score_form.js":
/*!*********************************************!*\
  !*** ./controllers/forms/add_score_form.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\n\r\nconst Shortcuts = __webpack_require__(/*! ./../shortcuts/shortcuts */ \"./controllers/shortcuts/shortcuts.js\");\r\nconst Icons = __webpack_require__(/*! ./../icons/icons.js */ \"./controllers/icons/icons.js\");\r\n\r\nlet listController;\r\nlet todo;\r\nlet todoName;\r\n\r\n\r\n\r\nmodule.exports = class ScoreForm{\r\n  constructor(listControl){\r\n    listController = listControl;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * displayForm - Saves todo and prints score modal into the screen.\r\n   *\r\n   * @param  {Object} completedTodo ex {id:xxx, hours:xxx, progress:xxxx}\r\n   */\r\n  displayForm(completedTodo, name){\r\n\r\n    // Disable main page shortcuts.\r\n    Shortcuts.removeMainPageShortctus();\r\n\r\n    todo = completedTodo;\r\n    todoName = name;\r\n    $(document.body).append(buildModal());\r\n\r\n  }\r\n};\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * buildModal - Prints modal into the screen and apply events to modal.\r\n */\r\nfunction buildModal(){\r\n\r\n  // Modal window\r\n  let modal = $('<div>', {\r\n    class:'modal_centered modal_score',\r\n    id:'modal_score',\r\n  });\r\n\r\n  // Modal background\r\n\r\n  let modalBackground = $('<div>', {\r\n    class: 'modal_blackBackground',\r\n    id:'modal_score_background'});\r\n\r\n  modalBackground.append(modal);\r\n\r\n\r\n  // Modal title row\r\n\r\n  let titleRow = $('<div>',{\r\n    class: 'modal_title_row'\r\n  });\r\n\r\n  let titleSpan = $('<span>',{\r\n    class: 'modal_title_text',\r\n    text: 'Rate this task!'\r\n  });\r\n\r\n  let closeBtn = $('<span>',{\r\n    class: 'modal_close_btn_container'\r\n  });\r\n\r\n  let closeIcon = Icons.close();\r\n  closeIcon.addClass('modal_close_icon');\r\n\r\n  closeBtn.click(()=>{\r\n    cancelScore();\r\n  });\r\n\r\n  closeBtn.append(closeIcon);\r\n  titleRow.append(closeBtn);\r\n\r\n  titleRow.append(titleSpan);\r\n\r\n\r\n  // Modal task name row\r\n\r\n  let todoNameRow = $('<div>',{\r\n    class: 'modal_subtitle_row'\r\n  });\r\n\r\n  let todoNameSpan = $('<span>',{\r\n    class: 'modal_subtitle_text',\r\n    text: todoName\r\n  });\r\n\r\n  todoNameRow.append(todoNameSpan);\r\n\r\n\r\n  // Modal star row\r\n\r\n  let starRow = $('<div>',{\r\n    id: 'modal_star_row'\r\n  });\r\n\r\n  let options = [\r\n    {id:'star1', value:0.50, index:1},\r\n    {id:'star2', value:0.75, index:2},\r\n    {id:'star3', value:1, index:3},\r\n    {id:'star4', value:1.25, index:4},\r\n    {id:'star5', value:1.5, index:5}\r\n  ];\r\n\r\n  $.each(options,(index, option)=>{\r\n\r\n    let starIcon = Icons.star();\r\n    starIcon.attr({'id':option.id,\r\n                   'value':option.value,\r\n                   'class': 'score_stars',\r\n                   'data-index': option.index});\r\n\r\n  // Add hover functionality.\r\n  starIcon.hover(e => showStars(e.target.id), e => hideStars());\r\n\r\n  // Add on click functionality.\r\n  starIcon.click(e => saveScore(e.target));\r\n\r\n  starRow.append(starIcon);\r\n\r\n  });\r\n\r\n  modal.append(titleRow).append(todoNameRow).append(starRow);\r\n  return modalBackground;\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * saveScore - Retrieves value from selected star and request list controller\r\n * to save the value, mark the task as done and save the scored points.\r\n * @private\r\n * @param  {Object} star dom element\r\n */\r\nfunction saveScore(star) {\r\n\r\n  todo.progress = Number(star.getAttribute('value'));\r\n\r\n  closeModal();\r\n  listController.completeTodo(todo);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * closeModal - Removes modal from screen.\r\n * Small timeout effect added so the fadeout\r\n * animation does not get interrupted.\r\n * @Private\r\n */\r\nfunction closeModal(){\r\n\r\n  // Set main page Shortcuts\r\n  // (Remove first to avoid any possible duplicates. )\r\n  Shortcuts.removeMainPageShortctus();\r\n  Shortcuts.setMainPageShortcuts();\r\n\r\n  $('#modal_score_background').fadeOut(200);\r\n\r\n  setTimeout( () => {\r\n    $('#modal_score_background').remove();\r\n  }, 200);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * cancelScore - Closes the modal without saving any data\r\n * and reprints the active todo list.\r\n\r\n */\r\nfunction cancelScore(){\r\n\r\n  listController.printActiveTodos([]);\r\n  closeModal();\r\n}\r\n\r\n\r\n\r\n/**\r\n * showStars - Hightlights stars based on the id passed.\r\n * @private\r\n * @param  {string} id description\r\n */\r\nfunction showStars(id) {\r\n\r\n  switch (id) {\r\n    case 'star1':\r\n      $(\"#star1\").children(0).attr('fill', '#1551b5');\r\n      break;\r\n    case 'star2':\r\n      $(\"#star1\").children(0).attr('fill', '#1551b5');\r\n      $(\"#star2\").children(0).attr('fill', '#1551b5');\r\n      break;\r\n    case 'star3':\r\n      $(\"#star1\").children(0).attr('fill', '#1551b5');\r\n      $(\"#star2\").children(0).attr('fill', '#1551b5');\r\n      $(\"#star3\").children(0).attr('fill', '#1551b5');\r\n      break;\r\n    case 'star4':\r\n      $(\"#star1\").children(0).attr('fill', '#1551b5');\r\n      $(\"#star2\").children(0).attr('fill', '#1551b5');\r\n      $(\"#star3\").children(0).attr('fill', '#1551b5');\r\n      $(\"#star4\").children(0).attr('fill', '#1551b5');\r\n      break;\r\n    case 'star5':\r\n      $(\"#star1\").children(0).attr('fill', '#1551b5');\r\n      $(\"#star2\").children(0).attr('fill', '#1551b5');\r\n      $(\"#star3\").children(0).attr('fill', '#1551b5');\r\n      $(\"#star4\").children(0).attr('fill', '#1551b5');\r\n      $(\"#star5\").children(0).attr('fill', '#1551b5');\r\n      break;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @private\r\n * hideStars - Removes highlight from all score starts\r\n */\r\nfunction hideStars() {\r\n\r\n  let starts = $('.score_stars');\r\n  starts.children().attr('fill', '#c6c6c6');\r\n}\r\n\n\n//# sourceURL=webpack:///./controllers/forms/add_score_form.js?");

/***/ }),

/***/ "./controllers/forms/add_task_form.js":
/*!********************************************!*\
  !*** ./controllers/forms/add_task_form.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\nconst NewTaskModel = __webpack_require__(/*! ./add_task_form/new_task_model */ \"./controllers/forms/add_task_form/new_task_model.js\");\r\nconst NewTaskView = __webpack_require__(/*! ./add_task_form/new_task_view */ \"./controllers/forms/add_task_form/new_task_view.js\");\r\nconst NewTaskController = __webpack_require__(/*! ./add_task_form/new_task_controllers */ \"./controllers/forms/add_task_form/new_task_controllers.js\");\r\nconst TodoListController = __webpack_require__(/*! ./../todoList/todoList_controller */ \"./controllers/todoList/todoList_controller.js\");\r\nconst OPTIONS = __webpack_require__(/*! ./../optionHandler/optionHandler.js */ \"./controllers/optionHandler/optionHandler.js\");\r\n\r\n// ID generator\r\n// '_' + Math.random().toString(36).substr(2, 9);\r\n\r\n// (Dummy_To_be_replaced)\r\n// Includes all available options for the user\r\n// when interacting the form.\r\nconst options = {\r\n  hours:[\r\n    {title: \"Score\", value: \"Score\", type:\"habit\", icon:\"star\", active:\"starActive\"},\r\n    {title: \"Fast task\", value: \"Fast task\", type:\"both\", icon:\"hours\", active:\"hours\"},\r\n    {title: \"1 hour\", value: \"1\", type:\"both\", icon:\"hours\", active:\"number1\"},\r\n    {title: \"2 hours\", value: \"2\", type:\"both\", icon:\"hours\", active:\"number2\"},\r\n    {title: \"3 hours\", value: \"3\", type:\"both\", icon:\"hours\", active:\"number3\"},\r\n    {title: \"4 hours\", value: \"4\", type:\"both\", icon:\"hours\", active:\"number4\"},\r\n    {title: \"5 hours\", value: \"5\", type:\"both\", icon:\"hours\", active:\"number5\"},\r\n    {title: \"6 hours\", value: \"6\", type:\"both\", icon:\"hours\", active:\"number6\"},\r\n    {title: \"7 hours\", value: \"7\", type:\"both\", icon:\"hours\", active:\"number7\"},\r\n    {title: \"8 hours\", value: \"8\", type:\"both\", icon:\"hours\", active:\"number8\"},\r\n    {title: \"9 hours\", value: \"9\", type:\"both\", icon:\"hours\", active:\"number9\"}\r\n  ],\r\n  urgency:[\r\n    {title: \"High\", icon: \"urgHigh\"},\r\n    {title: \"Normal\", icon: \"urgNormal\"},\r\n    {title: \"Low\", icon: \"urgLow\"}\r\n  ],\r\n  learning:[\r\n    {title: \"Also a learning\", icon:\"learning\", active:\"/assets/icon_learning_active.svg\"},\r\n    {title: \"Just a task\", icon:\"regularTask\", active:\"/assets/icon_justTask.svg\"}\r\n  ]\r\n};\r\n\r\nexports.showModal = function(){\r\n\r\n  compileOptions(OPTIONS.options);\r\n\r\n  const model = new NewTaskModel(OPTIONS.id);\r\n  const listMaster = new TodoListController(model);\r\n  const view = new NewTaskView(model, options, listMaster);\r\n  const controller = new NewTaskController(model, view, options);\r\n\r\n};\r\n\r\n\r\n\r\n/**\r\n * compileOptions - Adds the user custom categories and projects to the add modal option collection.\r\n * In the case of projects, it retrieves the corresponding category color and title for the linked\r\n * categories.\r\n *\r\n * @param  {Object} userOptions user options sent by the database when logging in.\r\n */\r\nfunction compileOptions(userOptions) {\r\n\r\n\r\n    // Extract categories (no need for any modifications)\r\n    options.categories = userOptions.categories;\r\n\r\n    // Extract projects (category color and category title data\r\n    // is added to each project item to facilitate later the\r\n    // printing)\r\n    options.projects=[];\r\n\r\n    $.each(userOptions.projects,( index, category) =>{\r\n\r\n      if (userOptions.projects[index].status=='active'){\r\n\r\n        let proj ={title: userOptions.projects[index].title,\r\n                   id: userOptions.projects[index].id,\r\n                   categoryId: userOptions.projects[index].categoryId,\r\n        };\r\n\r\n        // Find the corresponding category for this project.\r\n        if (proj.categoryId!=''){\r\n          let cat  = options.categories.find (obj => {\r\n            return obj.id == proj.categoryId;\r\n          });\r\n\r\n          proj.category = cat.title;\r\n          proj.color = cat.color;\r\n\r\n        }else{\r\n          proj.category = '';\r\n          proj.color = '#263e65';\r\n        }\r\n\r\n        options.projects.push(proj);\r\n\r\n      }\r\n\r\n\r\n    });\r\n\r\n}\r\n\n\n//# sourceURL=webpack:///./controllers/forms/add_task_form.js?");

/***/ }),

/***/ "./controllers/forms/add_task_form/new_task_controllers.js":
/*!*****************************************************************!*\
  !*** ./controllers/forms/add_task_form/new_task_controllers.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\nconst EventEmitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\r\nconst MsgBox = __webpack_require__(/*! ./../../messageBox/messageBox */ \"./controllers/messageBox/messageBox.js\");\r\n\r\n/**\r\n* Controller responds to user actions and\r\n* invokes changes on the model.\r\n */\r\n\r\n module.exports = class NewTaskController extends EventEmitter{\r\n   constructor(model, view, options){\r\n     super();\r\n     this._model = model;\r\n     this._view = view;\r\n     this._options = options;\r\n\r\n     view.on('saveType', type => this.saveType(type));\r\n     view.on('saveLearning', option => this.saveLearning(option));\r\n     view.on('saveUrgency', option => this.saveUrgency(option));\r\n     view.on('saveHours', option => this.saveHours(option));\r\n     view.on('saveCategory', (option, input) => this.saveCategory(option, input));\r\n     view.on('saveProject', (option, input) => this.saveProject(option, input));\r\n     view.on('saveNameDate', (name, date) => this.saveNameDate(name, date));\r\n   }\r\n\r\n   saveType(type){\r\n     this._model.type = type;\r\n   }\r\n\r\n   saveLearning(option){\r\n     let result = (option == 'Also a learning') ? true : false;\r\n     this._model.learning = result;\r\n   }\r\n\r\n   saveUrgency(option){\r\n     this._model.urgency = option;\r\n   }\r\n\r\n   saveHours(option){\r\n\r\n     // Get corresponding value from options object.\r\n     let hourModel = this._options.hours.find( obj => {\r\n       return obj.title == option;});\r\n\r\n     this._model.hours = hourModel.value;\r\n   }\r\n\r\n   saveCategory(option, input){\r\n\r\n     let isNew = false;\r\n     let categoryName = option;\r\n\r\n     // If new category, change isNew to True.\r\n     if (option == 'Add new'){\r\n       isNew = true;\r\n       categoryName = input;\r\n     }\r\n\r\n     let categoryPackage = {categoryName: categoryName, isNew:isNew};\r\n     this._model.category = categoryPackage;\r\n\r\n     //If project is not compatible with this category, remove project.\r\n     let projectName;\r\n\r\n     if (isNew){\r\n        projectName = '';\r\n     }else if (categoryName == ''){\r\n        projectName = '';\r\n     }else{\r\n       if(this._model.project!=''){\r\n         let projectModel = this._options.projects.find( obj => {\r\n           return obj.title == this._model.project;});\r\n           projectName = (categoryName != projectModel.category) ? '' : this._model.project;\r\n       }else{\r\n         projectName = '';\r\n       }\r\n     }\r\n\r\n     let projectPackage = {projectName: projectName, isNew: false};\r\n     this._model.project = projectPackage;\r\n\r\n\r\n     // Finally retrieve category and project ID from options and\r\n     // save them into the model (if there are ids)\r\n     if(categoryName!='' && isNew==false){\r\n       let catId = this._options.categories.find(obj => {\r\n         return obj.title == categoryName;});\r\n        this._model.categoryId= catId.id;\r\n     }else if(categoryName=='' && isNew==false){\r\n       this._model.categoryId = '';\r\n     }\r\n\r\n     if(projectName!='' && isNew==false){\r\n       let proId = this._options.projects.find(obj => {\r\n         return obj.title == projectName;});\r\n       this._model.projectId= proId.id;\r\n     }else if(projectName=='' && isNew==false){\r\n       this._model.projectId= '';\r\n     }\r\n\r\n   }\r\n\r\n   saveProject(option, input){\r\n\r\n     let isNew = false;\r\n     let projectName = option;\r\n\r\n     if (option == 'Add new'){\r\n       isNew = true;\r\n       projectName = input;\r\n     }\r\n\r\n     let projectPackage = {projectName: projectName, isNew:isNew};\r\n     this._model.project = projectPackage;\r\n\r\n     //If project is not compatible with this category, change category corresponding.\r\n     let categoryName;\r\n\r\n     if (projectName!=''){\r\n\r\n       if (isNew){\r\n         categoryName='';\r\n       }else{\r\n         let projectModel = this._options.projects.find( obj => {\r\n           return obj.title == projectName;});\r\n         categoryName = projectModel.category;\r\n       }\r\n\r\n       let categoryPackage = {categoryName: categoryName, isNew: false};\r\n       this._model.category = categoryPackage;\r\n\r\n       // Retrieve category ID from options and\r\n       // save it into the model.\r\n       if(categoryName!='' && isNew==false){\r\n         let catId = this._options.categories.find(obj => {\r\n           return obj.title == categoryName;});\r\n          this._model.categoryId= catId.id;\r\n       }else if(categoryName=='' && isNew==false){\r\n         this._model.categoryId= '';\r\n       }\r\n\r\n     }\r\n\r\n     // Retrieve project ID from options and\r\n     // save it into the model (if there is)\r\n     if(projectName!='' && isNew==false){\r\n       let proId = this._options.projects.find(obj => {\r\n         return obj.title == projectName;});\r\n        this._model.projectId= proId.id;\r\n     }else if(projectName=='' && isNew==false){\r\n       this._model.projectId= '';\r\n     }\r\n   }\r\n\r\n\r\n   /**\r\n    * saveNameDate - Saves name and validates input date.\r\n    * For tasks, it also accepts numbers from 1 to 355. Numbers are\r\n    * automatically transformed into dates (summed to the current date).\r\n    * For habits, it only accepts numbers and not dates.\r\n    *\r\n    * @param  {string} name description\r\n    * @param  {string} date\r\n    */\r\n   saveNameDate(name, date){\r\n\r\n     let messenger = new MsgBox();\r\n\r\n     // Abort if no internet connection.\r\n     if(!navigator.onLine){\r\n       messenger.showMsgBox('Failed to add item. \\nCheck if there is an internet connection.','error','down');\r\n       return;\r\n     }\r\n\r\n\r\n     // If no task/habit name, abort submit.\r\n     if(name==''){\r\n       messenger.showMsgBox('You have to insert a task or habit first.','error','up');\r\n       return;\r\n     }\r\n\r\n     this._model.name = name;\r\n\r\n     if (this._model.type == 'task'){\r\n\r\n       // We initially assume that the input date will be correct.\r\n       let sendDate = true;\r\n\r\n       // We save input into a date class and extracts its year for later validation.\r\n       let inputDate = new Date(date);\r\n       let inputYear = inputDate.getYear();\r\n\r\n       // Variable sent at the very end of this method to the model.\r\n       let finalDate= new Date();\r\n\r\n       // For date validation purposes.\r\n       let thisYear = finalDate.getYear();\r\n       let nextYear = thisYear + 1;\r\n\r\n       switch (true) {\r\n\r\n         case (isValidDate(inputDate) && (inputYear>=thisYear && inputYear<=nextYear)):\r\n           finalDate = inputDate;\r\n           break;\r\n\r\n         case date == 'Today':\r\n           break;\r\n\r\n         case date == 'TMR':\r\n           finalDate.setDate(finalDate.getDate()+1);\r\n           break;\r\n\r\n         case date == 'DAT':\r\n           finalDate.setDate(finalDate.getDate()+2);\r\n           break;\r\n\r\n         case date == '1 week':\r\n           finalDate.setDate(finalDate.getDate()+7);\r\n           break;\r\n\r\n         case date == '2 weeks':\r\n           finalDate.setDate(finalDate.getDate()+14);\r\n           break;\r\n\r\n         case date == '1 month':\r\n           finalDate.setDate(finalDate.getDate()+30);\r\n           break;\r\n\r\n         case !isNaN(date) && date<365 && date>0:\r\n           finalDate.setDate(finalDate.getDate() + Number(date));\r\n           break;\r\n\r\n         default:\r\n         sendDate = false;\r\n\r\n       }\r\n\r\n       if(sendDate){\r\n         this._model.dueTo = finalDate;\r\n       }else {\r\n         messenger.showMsgBox('Insert a valid date or a exact number of days.','error','up');\r\n       }\r\n\r\n\r\n     // Went it is a habit.\r\n     }else{\r\n\r\n       if(!isNaN(date) && date<365 && date>0){\r\n         this._model.frequency = date;\r\n       }else{\r\n         messenger.showMsgBox('Insert a exact number of days.','error','up');\r\n       }\r\n\r\n     }\r\n\r\n\r\n   }\r\n\r\n };\r\n\r\n function isValidDate(date) {\r\n   return date && Object.prototype.toString.call(date) === \"[object Date]\" && !isNaN(date);\r\n }\r\n\n\n//# sourceURL=webpack:///./controllers/forms/add_task_form/new_task_controllers.js?");

/***/ }),

/***/ "./controllers/forms/add_task_form/new_task_model.js":
/*!***********************************************************!*\
  !*** ./controllers/forms/add_task_form/new_task_model.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\nconst EventEmitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\r\n\r\n\r\n/**\r\n *  Creates the query that will be sent to the db in order to\r\n *  add new tasks.\r\n */\r\n module.exports = class NewTaskModel extends EventEmitter{\r\n   constructor(userId){\r\n     super(userId);\r\n     this._type = 'task';\r\n     this._name = '';\r\n     this._dueTo = '';\r\n     this._frequency = 0;\r\n     this._category = '';\r\n     this._categoryId = '';\r\n     this._isNewCategory = false;\r\n     this._project = '';\r\n     this._projectId = '';\r\n     this._isNewProject = false;\r\n     this._hours = 'Fast task';\r\n     this._urgency = 'Normal';\r\n     this._learning = false;\r\n     this._user = userId;\r\n     this._status = 'active';\r\n     this._progress = 0;\r\n     this._habitId = \"\";\r\n     this._nextTaskDate = \"\";\r\n   }\r\n\r\n   get progress(){\r\n     return this._progress;\r\n   }\r\n\r\n\r\n   get type(){\r\n     return this._type;\r\n   }\r\n\r\n   set type(type) {\r\n    this._type = type;\r\n    this.emit('typeSaved');\r\n  }\r\n\r\n   set name(name){\r\n    this._name = name;\r\n   }\r\n\r\n   get name(){\r\n     return this._name;\r\n   }\r\n\r\n   set dueTo(date){\r\n      this._dueTo = date;\r\n      this.submitTodo();\r\n   }\r\n\r\n   get frequency(){\r\n     return this._frequency;\r\n   }\r\n\r\n   set frequency(frequency){\r\n     this._frequency = Number(frequency);\r\n     this.submitTodo();\r\n   }\r\n\r\n   get dueTo(){\r\n     return this._dueTo;\r\n   }\r\n\r\n   set category(categoryPackage){\r\n     this._category = categoryPackage.categoryName;\r\n     this._isNewCategory = categoryPackage.isNew;\r\n     this.emit('categorySaved');\r\n   }\r\n\r\n   get category(){\r\n     return this._category;\r\n   }\r\n\r\n   set project(projectPackage){\r\n     this._project = projectPackage.projectName;\r\n     this._isNewProject = projectPackage.isNew;\r\n     this.emit('projectSaved');\r\n   }\r\n\r\n   get project(){\r\n     return this._project;\r\n   }\r\n\r\n   set hours(option){\r\n     this._hours = option;\r\n     this.emit('hoursSaved');\r\n   }\r\n\r\n   get hours(){\r\n     return this._hours;\r\n   }\r\n\r\n   get urgency(){\r\n     return this._urgency;\r\n   }\r\n\r\n   set urgency(option){\r\n     this._urgency = option;\r\n     this.emit('urgencySaved');\r\n   }\r\n\r\n   get learning(){\r\n     return this._learning;\r\n   }\r\n\r\n   set learning(option) {\r\n    this._learning = option;\r\n    this.emit('learningSaved');\r\n  }\r\n\r\n   get user(){\r\n     return this._user;\r\n   }\r\n\r\n   get status(){\r\n     return this._status;\r\n   }\r\n\r\n   get projectId(){\r\n      return this._projectId;\r\n   }\r\n\r\n   set projectId(id){\r\n     this._projectId = id;\r\n   }\r\n\r\n   get categoryId(){\r\n     return this._categoryId;\r\n   }\r\n\r\n   set categoryId(id){\r\n     this._categoryId=id;\r\n   }\r\n\r\n   get habitId(){\r\n     return this._habitId;\r\n   }\r\n\r\n   set habitId(id){\r\n     this._habitId=id;\r\n   }\r\n\r\n   get nextTaskDate(){\r\n     return this._nextTaskDate;\r\n   }\r\n\r\n   set nextTaskDate(date){\r\n     this._nextTaskDate=date;\r\n   }\r\n\r\n   submitTodo(){\r\n\r\n     let todos = [];\r\n\r\n     let todo = {type: this.type,\r\n                 name: this.name,\r\n                 dueTo: this.dueTo,\r\n                 frequency: this.frequency,\r\n                 category: this.category,\r\n                 project: this.project,\r\n                 hours: this.hours,\r\n                 urgency: this.urgency,\r\n                 learning: this.learning,\r\n                 status: this.status,\r\n                 user: this.user,\r\n                 categoryId: this.categoryId,\r\n                 projectId: this.projectId,\r\n                 progress: this.progress,\r\n                 habitId: this.habitId,\r\n                 nextTaskDate: this.nextTaskDate};\r\n\r\n     todos.push(todo);\r\n     this.emit('dateSaved',todos);\r\n\r\n   }\r\n\r\n\r\n };\r\n\n\n//# sourceURL=webpack:///./controllers/forms/add_task_form/new_task_model.js?");

/***/ }),

/***/ "./controllers/forms/add_task_form/new_task_view.js":
/*!**********************************************************!*\
  !*** ./controllers/forms/add_task_form/new_task_view.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\nconst EventEmitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\r\nconst Hints = __webpack_require__(/*! ./../../hints/help_hint */ \"./controllers/hints/help_hint.js\");\r\nconst Shortcuts = __webpack_require__(/*! ./../../shortcuts/shortcuts */ \"./controllers/shortcuts/shortcuts.js\");\r\nconst SetCurlet = __webpack_require__(/*! ./../../otherMethods/setCaret */ \"./controllers/otherMethods/setCaret.js\");\r\nconst Icons = __webpack_require__(/*! ./../../icons/icons.js */ \"./controllers/icons/icons.js\");\r\n\r\n/**\r\n * Builds the form base UI.\r\n * Sets the form event handlers.\r\n * Prints and modifies the form UI elements.\r\n */\r\n\r\n let activeRow;\r\n\r\n module.exports = class NewTaskView extends EventEmitter{\r\n   //Builds the form base UI\r\n   constructor(model, options, listMaster){\r\n     super();\r\n     this._model = model;\r\n     this._options = options;\r\n     this._listMaster = listMaster;\r\n\r\n     //Listeners\r\n     model.on('typeSaved', () => this.changeTodoType());\r\n     model.on('learningSaved', () => this.updateLearningIcon());\r\n     model.on('urgencySaved', () => this.updateUrgencyIcon());\r\n     model.on('hoursSaved', () => this.updateHourIcon());\r\n     model.on('categorySaved', () => this.updateCategory());\r\n     model.on('projectSaved', () => this.updateProject());\r\n     listMaster.on('taskSaved',() => this.closeModal());\r\n\r\n     this._textInput = '';\r\n     //Stores user tag input (text input after summoning a menu)\r\n\r\n\r\n     // Print base structure\r\n     this._modal = this.buildModal();\r\n     $(document.body).append(this._modal);\r\n\r\n\r\n     // Print icons into the icon bar.\r\n     this.printIcons();\r\n\r\n\r\n     // Focuses modal text box.\r\n     this._textBox = $('.modal_addTask_body_textBox');\r\n     this._textBox.focus();\r\n\r\n     // Set datapicker and date eventhandlers\r\n     this.setDateBox();\r\n\r\n     // Add recognize function to datebox.\r\n     this._dateBox.on(\"input\", () => this.recognizeDate());\r\n     this._dateBox.on(\"change\", () => this.recognizeDate());\r\n\r\n     // Set the actions that can close this modal.\r\n     this.setCloseEvents();\r\n\r\n     this._projectTagContainer = $('.modal_addTask_caption_proj');\r\n     this._categoryTagContainer = $('.modal_addTask_caption_cat');\r\n     this._todoBtn = $('#addTask_radio_todo');\r\n     this._habitBtn = $('#addTask_radio_habit');\r\n     this._iconBarHolder = $('.modal_addTask_body_icons_col');\r\n\r\n     // Set type buttons.\r\n     this.setTodoTypeButtons();\r\n\r\n     // Set event handlers for option drop down menus\r\n     this.setDropDownTables();\r\n\r\n     // Set icon button actions\r\n     this.setIconActions();\r\n\r\n     // Set submit button\r\n     this.setSubmit();\r\n\r\n   }\r\n\r\n   // Sends date and task name to database\r\n   // Once data is correctly saved, a different method\r\n   // interacts with the dbHandler class to add the task to the system.\r\n   setSubmit(){\r\n\r\n       this._submit = $('#modal_addTask_body_submit_btn');\r\n       this._submit.on(\"click\", () => {\r\n\r\n       this.emit('saveNameDate', this._textBox.text(),\r\n                                 this._dateBox.val());\r\n\r\n       });\r\n\r\n   }\r\n\r\n\r\n\r\n\r\n   //Puts form header and body together into one div element.\r\n   buildModal(){\r\n\r\n     let modalHeader = this.buildModalHeader();\r\n     let modalBody = this.buildModalBody();\r\n\r\n     // Body and header container\r\n     let modalContent = $('<div>', {id:'modal_addTask_content'});\r\n     modalContent.append(modalHeader).append(modalBody);\r\n\r\n     // Modal container\r\n     let modal = $('<div>', {\r\n       class: 'modal_blackBackground',\r\n       id:'modal_addTask'});\r\n     modal.append(modalContent);\r\n\r\n     return modal;\r\n\r\n   }\r\n\r\n\r\n   buildModalHeader(){\r\n\r\n     // todo and habit radio buttons\r\n     let radioControlGroup = $('<div>',{\r\n       class: 'addTask_radio_container'});\r\n     let radioInputTodo = $('<input>',{\r\n       type: 'radio',\r\n       name: 'addTask_radio',\r\n       id: 'addTask_radio_todo',\r\n       checked: 'checked'});\r\n     let radioLabelTodo = $('<label>',{\r\n       for: 'addTask_radio_todo',\r\n       text: 'Task',\r\n       class: 'radio_label'});\r\n     let radioInputHabit = $('<input>',{\r\n       type: 'radio',\r\n       name: 'addTask_radio',\r\n       id: 'addTask_radio_habit'});\r\n     let radioLabelHabit = $('<label>',{\r\n       for: 'addTask_radio_habit',\r\n       text: 'Habit',\r\n       class: 'radio_label'});\r\n     radioControlGroup\r\n       .append(radioInputTodo)\r\n       .append(radioLabelTodo)\r\n       .append(radioInputHabit)\r\n       .append(radioLabelHabit);\r\n     let modalHeaderTableRadioColumn = $('<td>',{\r\n       class: 'modal_addTask_header_table_radioClm'});\r\n     modalHeaderTableRadioColumn.append(radioControlGroup);\r\n\r\n\r\n     // Modal header middle column\r\n     let captionLeft = $('<div>',{\r\n       class:'modal_addTask_caption_cat'\r\n     });\r\n\r\n     let captionRight = $('<div>',{\r\n       class:'modal_addTask_caption_proj'\r\n     });\r\n\r\n     let modalHeaderTableCaptionColumn = $('<td>',{\r\n       class: 'modal_addTask_header_table_captionClm'});\r\n       modalHeaderTableCaptionColumn.append(captionLeft).append(captionRight);\r\n\r\n\r\n     // close button\r\n     let modalHeaderTableCloseColumn = $('<td>',{\r\n       class: 'modal_addTask_header_table_closeClm'});\r\n     let emptyDiv = $('<div>',{});\r\n     let emptySpan = $('<span>',{});\r\n     let closeBtn = Icons.close();\r\n     closeBtn.addClass('modal_addTask_closeBtn');\r\n     closeBtn.attr('id','modal_addTask_closeBtn');\r\n     emptySpan.append(closeBtn);\r\n     emptyDiv.append(emptySpan);\r\n     modalHeaderTableCloseColumn.append(emptyDiv);\r\n\r\n\r\n     // compile header\r\n     let modalHeaderTableBody = $('<tbody>',{});\r\n     modalHeaderTableBody\r\n       .append(modalHeaderTableRadioColumn)\r\n       .append(modalHeaderTableCaptionColumn)\r\n       .append(modalHeaderTableCloseColumn);\r\n\r\n       let modalHeaderTable = $('<table>',{\r\n         class: 'modal_addTask_header_table',\r\n         id:'modal_addTask_header_table'});\r\n\r\n       modalHeaderTable.append(modalHeaderTableBody);\r\n       let header = $('<div>', {\r\n         class: 'modal_addTask_header',\r\n         id:'modal_addTask_header'});\r\n       header.append(modalHeaderTable);\r\n\r\n       return header;\r\n   }\r\n\r\n\r\n   buildModalBody(){\r\n\r\n     //modal body top part\r\n     let text_box_container = $('<div>',{\r\n       class:'modal_addTask_body_textBox',\r\n       tabindex:'1',\r\n       autocomplete:'off',\r\n       contenteditable:'true',\r\n       placeholder:\"Write your task or habit here...\"});\r\n\r\n     let text_box_clm = $('<td>',{\r\n       class:'modal_addTask_body_textBox_col'});\r\n     text_box_clm.append(text_box_container);\r\n\r\n     let date_box_container = $('<input>',{\r\n       type:'text',\r\n       class:'modal_addTask_body_dueDate',\r\n       id: 'modal_addTask_body_dueDate',\r\n       name:'modal_addTask_body_dueDate',\r\n       tabindex:'2',\r\n       autocomplete:'off'});\r\n\r\n     let date_box_clm = $('<td>',{\r\n       class:'modal_addTask_body_dueDate_col'});\r\n     date_box_clm.append(date_box_container);\r\n\r\n     let taskNameTableBodyRow = $('<tr>',{});\r\n     taskNameTableBodyRow.append(text_box_clm).append(date_box_clm);\r\n\r\n     let taskNameTableBody = $('<tbody>',{});\r\n     taskNameTableBody.append(taskNameTableBodyRow);\r\n\r\n     let taskNameTable = $('<table>',{\r\n       class:'modal_addTask_body_taskNameRow_table'});\r\n     taskNameTable.append(taskNameTableBody);\r\n\r\n\r\n     //modal body lower part\r\n\r\n    this._iconBar = $('<td>',{\r\n       class:'modal_addTask_body_icons_col'});\r\n\r\n     let submit_Btn = $('<div>',{\r\n       class:'blue_botton',\r\n       id:'modal_addTask_body_submit_btn',\r\n       tabindex: 3,\r\n       text: 'Add task'});\r\n\r\n     let add_btn_col = $('<td>',{\r\n       class:'modal_addTask_body_submit_col'});\r\n     add_btn_col.append(submit_Btn);\r\n\r\n     let buttonsTableBodyRow = $('<tr>',{});\r\n     buttonsTableBodyRow.append(add_btn_col).append(this._iconBar);\r\n\r\n     let buttonsTableBody = $('<tbody>',{});\r\n     buttonsTableBody.append(buttonsTableBodyRow);\r\n\r\n     let buttonsTable = $('<table>',{\r\n       class:'modal_addTask_body_buttonsRow_table'});\r\n     buttonsTable.append(buttonsTableBody);\r\n\r\n\r\n     //modal body frame\r\n     let modalBody_manager = $('<div>',{\r\n       class:'modal_addTask_body_manager',\r\n       id:'modal_addTask_body_manager'});\r\n     modalBody_manager.append(taskNameTable).append(buttonsTable);\r\n\r\n     let modalBody_EmptyDiv = $('<div>',{});\r\n     modalBody_EmptyDiv.append(modalBody_manager);\r\n\r\n     let modalBody_iframe = $('<div>',{\r\n       class:'modal_addTask_iframe'});\r\n     modalBody_iframe.append(modalBody_EmptyDiv);\r\n\r\n     let modalBody = $('<div>', {\r\n       class:'modal_addTask_body',\r\n       id:'modal_addTask_body'});\r\n     modalBody.append(modalBody_iframe);\r\n\r\n     return modalBody;\r\n\r\n   }\r\n\r\n    //(old_remove) createIconPackage\r\n    // Prints the necessary icons into the UI based on the\r\n    // type of task selected by the user.\r\n    printIcons(){\r\n\r\n      //Create icon container\r\n      let iconContainer = $('<span>',{\r\n          class:'modal_addTask_body_icons_iconHolder'});\r\n\r\n      let category_icon = {\r\n        class:'modal_addTask_menuIcon',\r\n        id:'modal_addTask_categoryIcon',\r\n        image: Icons.categories()\r\n      };\r\n\r\n      let  project_icon = {\r\n        class:'modal_addTask_menuIcon',\r\n        id:'modal_addTask_projectIcon',\r\n        image: Icons.projects()\r\n      };\r\n\r\n      let priority_icon = {\r\n        class:'modal_addTask_menuIcon',\r\n        id:'modal_addTask_priorityIcon',\r\n        image: Icons.urgNormal()\r\n      };\r\n\r\n      let learning_icon = {\r\n        class:'modal_addTask_menuIcon',\r\n        id:'modal_addTask_learningIcon',\r\n        image:Icons.learning()\r\n      };\r\n\r\n      let hours_icon = {\r\n        class:'modal_addTask_menuIcon',\r\n        id:'modal_addTask_hoursIcon',\r\n        image:Icons.hours()\r\n      };\r\n\r\n    let icons =  [priority_icon,\r\n                 learning_icon,\r\n                 project_icon,\r\n                 category_icon,\r\n                 hours_icon];\r\n\r\n    //If habit, project and learning icons are removed.\r\n    if (this._model._type == 'habit'){icons = [priority_icon,\r\n                                              category_icon,\r\n                                              hours_icon];}\r\n\r\n    for (let i=0; i<icons.length; i++){\r\n\r\n      let divContainer = $([]);\r\n      let content = $([]);\r\n\r\n      divContainer = $('<div>',{\r\n        class: icons[i].class\r\n      });\r\n\r\n      content = icons[i].image;\r\n      content.attr({class:'modal_icon hintHolder',\r\n                    id:icons[i].id});\r\n\r\n      divContainer.append(content);\r\n      iconContainer.append(divContainer);\r\n      }\r\n\r\n      this._iconBar.append(iconContainer);\r\n\r\n      //Loads a hint into each icon.\r\n      Hints.loadHints('.modal_addTask_body_icons_col .hintHolder');\r\n    }\r\n\r\n    // Set datapicker and date eventhandlers\r\n    setDateBox(){\r\n\r\n      // Jquery ui datapicker container\r\n      let dataContainer = $('.modal_addTask_body_dueDate');\r\n\r\n      // Date textbox\r\n      this._dateBox = $('#modal_addTask_body_dueDate');\r\n\r\n      if(this._model.type=='task'){\r\n\r\n        // Set jquery ui datapicker\r\n        dataContainer.datepicker({ minDate: 0, maxDate: \"+5Y +10D\" });\r\n        dataContainer.datepicker( \"option\", \"dateFormat\",\"d M, y\");\r\n\r\n        // Give a default value of Today\r\n        const today = new Date();\r\n        this._dateBox.val('Today');\r\n        this._dateBox.addClass('recognized_dueDate');\r\n\r\n        // Change placeholder\r\n        this._dateBox.attr(\"placeholder\", \"Date\");\r\n\r\n      }else{\r\n\r\n        // Disable when habit\r\n        dataContainer.datepicker( \"destroy\" );\r\n\r\n        // Remove default value and show \"days\" placeholder.\r\n        this._dateBox.val('');\r\n        this._dateBox.attr(\"placeholder\", \"N Days\");\r\n        this._dateBox.removeClass('recognized_dueDate');\r\n      }\r\n\r\n    }\r\n\r\n    // If the user inputs a valid date format, this method\r\n    // highlights the date textbox text by attaching a\r\n    // class to it.\r\n    recognizeDate(){\r\n\r\n      //Function used to validate dates.\r\n      function isValidDate(date) {\r\n        return date && Object.prototype.toString.call(date) === \"[object Date]\" && !isNaN(date);\r\n      }\r\n\r\n      //We transform input into date so we can try to validate it.\r\n      let inputDate = new Date(this._dateBox.val());\r\n      let inputYear = inputDate.getYear();\r\n\r\n      // Dates used to validate the input date.\r\n      let today = new Date();\r\n      let thisYear = today.getYear();\r\n      let nextYear = thisYear+1;\r\n\r\n      if (this._model.type == 'task'){\r\n        switch(true){\r\n          case (isValidDate(inputDate) && (inputYear>=thisYear && inputYear<=nextYear)):\r\n            this._dateBox.addClass('recognized_dueDate');\r\n            break;\r\n          case this._dateBox.val() == 'Today':\r\n            this._dateBox.addClass('recognized_dueDate');\r\n            break;\r\n          case this._dateBox.val() == 'TMR':\r\n            this._dateBox.addClass('recognized_dueDate');\r\n            break;\r\n          case this._dateBox.val() == 'DAT':\r\n            this._dateBox.addClass('recognized_dueDate');\r\n            break;\r\n          case this._dateBox.val() == '1 week':\r\n            this._dateBox.addClass('recognized_dueDate');\r\n            break;\r\n          case this._dateBox.val() == '2 weeks':\r\n            this._dateBox.addClass('recognized_dueDate');\r\n            break;\r\n          case this._dateBox.val() == '1 month':\r\n            this._dateBox.addClass('recognized_dueDate');\r\n            break;\r\n          case !isNaN(this._dateBox.val()) && this._dateBox.val()<365 && this._dateBox.val()>0:\r\n            this._dateBox.addClass('recognized_dueDate');\r\n            break;\r\n          default:\r\n            this._dateBox.removeClass('recognized_dueDate');\r\n        }\r\n      }else{\r\n        if(!isNaN(this._dateBox.val()) && this._dateBox.val()<365 && this._dateBox.val()>0){\r\n          this._dateBox.addClass('recognized_dueDate');\r\n        }else{\r\n          this._dateBox.removeClass('recognized_dueDate');\r\n        }\r\n      }\r\n    }\r\n\r\n    // Set actions that can close this modal.\r\n    setCloseEvents(){\r\n\r\n      // Set close button.\r\n      this._closeBtn = $('.modal_addTask_closeBtn');\r\n      this._closeBtn.on('click', () => this.closeModal());\r\n\r\n      // closing modal when clicking outside\r\n      this._modal.on('click', (e) =>{\r\n        let notModal = document.getElementById('modal_addTask');\r\n        if(e.target == notModal){this.closeModal();}\r\n      });\r\n\r\n      // ESCAPE key pressed\r\n      this.setEscapeKey();\r\n\r\n      // SHITF + TAB key pressed.\r\n      this.setTabBehavior();\r\n    }\r\n\r\n    // Sets return tab key so the curlet is always placed\r\n    // at the end of the task name textbox.\r\n    setTabBehavior(){\r\n\r\n      this._modal.keydown((e) => {\r\n\r\n        //shift was down when tab was pressed\r\n        if(e.shiftKey && e.keyCode == 9) {\r\n\r\n          // If the activeElement (by the moment the key was pressed) is the date selector,\r\n          // then we focus the taskName textbox and place the curlet at the end.\r\n          if(document.activeElement.classList.contains('modal_addTask_body_dueDate')){\r\n            e.preventDefault();\r\n            let textBoxNode = document.getElementsByClassName('modal_addTask_body_textBox')[0];\r\n            SetCurlet.setEndOfContenteditable(textBoxNode);\r\n          }\r\n        }\r\n\r\n      });\r\n    }\r\n\r\n    // Sets escape key for closing modal and ENTER for submit.\r\n    setEscapeKey(){\r\n\r\n      //Reset first to make sure that we are not adding\r\n      // the same event multiple times.\r\n      this._modal.off('keydown');\r\n\r\n      this._modal.keydown((e) => {\r\n        if (e.keyCode == 27) {this.closeModal();}\r\n        if (e.keyCode == 13){\r\n          e.preventDefault();\r\n          this.emit('saveNameDate', this._textBox.text(),\r\n                                    this._dateBox.val());\r\n        }\r\n      });\r\n\r\n    }\r\n\r\n    // Closes modal div and reactivates main page shortcuts.\r\n    closeModal(){\r\n      this._modal.remove();\r\n\r\n      // Removes any main page shortcuts that could affect this modal (if there are).\r\n      Shortcuts.removeMainPageShortctus();\r\n\r\n      // Sets new shortcuts.\r\n      Shortcuts.setMainPageShortcuts();\r\n    }\r\n\r\n    // sets the event handlers for the task and habit buttons.\r\n    setTodoTypeButtons(){\r\n\r\n      this._todoBtn.on('click',() => {\r\n        this.emit('saveType', 'task');\r\n      });\r\n\r\n      this._habitBtn.on('click',() =>{\r\n        this.emit('saveType', 'habit');\r\n      });\r\n    }\r\n\r\n    // Removes current icons, prints new icons, reloads hints\r\n    // sets icon actions and remove selected tags.\r\n    changeTodoType(){\r\n      this._iconBarHolder.children().remove();\r\n      this.printIcons();\r\n      this.setIconActions();\r\n      this.emit('saveProject','','');\r\n      this.emit('saveCategory','','');\r\n      this.emit('saveHours', 'Fast task');\r\n      this.emit('saveLearning', false);\r\n      this.emit('saveUrgency', 'Normal');\r\n      this.setDateBox();\r\n      this._textBox.focus();\r\n    }\r\n\r\n    // Set event handlers for option drop down menus\r\n    setDropDownTables(){\r\n\r\n      this._textBox.on('input',() =>{\r\n\r\n        // Text in the textBox\r\n        let text = this._textBox.text();\r\n\r\n        // Stores text inserted before last point in textBox.\r\n        this._textInput = text.substr(this._textBox[0].innerText.lastIndexOf('.') + 1);\r\n\r\n        // The following inputs (specific character + . ), provided that there\r\n        // are no more than 2 points in the text, will summon the corresponding menu.\r\n        // For projects or learning menus to show up, it is a condition that\r\n        // the Task button is selected.\r\n        if ((text.match( RegExp('\\\\.','g'))||[]).length < 2){\r\n\r\n          if(text.indexOf('c.') >= 0){\r\n            this.displayDropDownTable('categories');\r\n\r\n          }else if(text.indexOf('p.') >= 0 && this._model.type=='task'){\r\n            this.displayDropDownTable('projects');\r\n\r\n          }else if(text.indexOf('h.') >= 0){\r\n            this.displayDropDownTable('hours');\r\n\r\n          }else if(text.indexOf('u.') >= 0){\r\n            this.displayDropDownTable('urgency');\r\n\r\n          }else if(text.indexOf('l.') >= 0 && this._model.type=='task'){\r\n            this.displayDropDownTable('learning');\r\n\r\n          }else{\r\n            this._textInput = \"\";\r\n            this.hideDropDownTable();\r\n          }\r\n\r\n        }else{\r\n          this._textInput = \"\";\r\n          this.hideDropDownTable();\r\n        }\r\n\r\n      });\r\n    }\r\n\r\n    // Builds corresponding drop down menu\r\n    // and sets menu event listeners\r\n    displayDropDownTable(userChoice){\r\n\r\n      // First remove whatever menu might be open.\r\n      this.hideDropDownTable();\r\n\r\n      //Variable to remember the index of the active row\r\n      activeRow = 0;\r\n\r\n      //Build corresponding menu\r\n      let menu = this.buildDropDownMenu(userChoice);\r\n\r\n      if(menu){\r\n\r\n        //Selects first available row as active.\r\n        let rows = menu.find('tr');\r\n        rows[activeRow].classList.add(\"addTask_tableOption_active\");\r\n\r\n        this._modal.off('keydown');\r\n\r\n        //Add listener to keydown so we can navigate through the menu\r\n        $(document).keydown((e) =>{\r\n\r\n          //If key down - select next row\r\n          if (e.keyCode == 40){\r\n            e.preventDefault();\r\n            this.changeActiveRow('down', rows);\r\n\r\n          //If key up - move active up\r\n          }else if(e.keyCode == 38){\r\n            e.preventDefault();\r\n            this.changeActiveRow('up', rows);\r\n\r\n\r\n          //If tab or ENTER key --- save selection and remove from textbox\r\n          }else if(e.keyCode == 9 || e.keyCode ==13){\r\n            e.preventDefault();\r\n            this.saveMenuSelection(rows);\r\n\r\n          //If escape or SPACE key - close and reset table menu\r\n          }else if(e.keyCode == 27){\r\n            this.removeSelectionFromTextBox();\r\n            this._textInput='';\r\n            this.hideDropDownTable();\r\n            this.setEscapeKey();\r\n            this.setTabBehavior();\r\n          }\r\n\r\n        });\r\n\r\n\r\n\r\n        // Hightlights selected row.\r\n        $('.addTask_optTb tr').mouseover(function(e){\r\n          rows[activeRow].classList.remove(\"addTask_tableOption_active\");\r\n          activeRow = $(this).index();\r\n          rows[activeRow].classList.add(\"addTask_tableOption_active\");\r\n        });\r\n\r\n\r\n        $('.addTask_optTb tr').on('click',() =>{\r\n          this.saveMenuSelection(rows);\r\n        });\r\n\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // Removes tag text from textbox. Resets input memory.\r\n    // Hides menu. Sets escape key back.\r\n    saveMenuSelection(rows){\r\n\r\n      let currentMenu = rows[activeRow].getAttribute('data-value');\r\n      let currentOption = rows[activeRow].children[0].children[0].children[1].textContent;\r\n      let currentInput =  this._textInput;\r\n\r\n      this.removeSelectionFromTextBox();\r\n\r\n      this._textInput='';\r\n\r\n      // Close table and reset input memory\r\n      this.hideDropDownTable();\r\n\r\n      // Set escape key so it can close the modal again.\r\n      this.setEscapeKey();\r\n\r\n      // Set tab key so it can set the curlet to the end in the taskName textBox\r\n      this.setTabBehavior();\r\n\r\n      switch (currentMenu) {\r\n        case 'learning':\r\n          this.emit('saveLearning', currentOption);\r\n          break;\r\n\r\n        case 'urgency':\r\n          this.emit('saveUrgency', currentOption);\r\n          break;\r\n\r\n        case 'hours':\r\n          this.emit('saveHours', currentOption);\r\n          break;\r\n\r\n        case 'categories':\r\n        case 'new_categories':\r\n          this.emit('saveCategory', currentOption, currentInput);\r\n          break;\r\n\r\n        case 'projects':\r\n        case 'new_projects':\r\n          this.emit('saveProject', currentOption, currentInput);\r\n        break;\r\n\r\n        default:\r\n      }\r\n\r\n    }\r\n\r\n    updateLearningIcon(){\r\n\r\n      // Retrieve selected option data so we can know the corresponding icon image.\r\n      let option = this._options.learning.find( obj => {\r\n        return obj.title == 'Also a learning';\r\n      });\r\n\r\n      // Reflects image in modal.\r\n      let nodeToReplace = $('#modal_addTask_learningIcon');\r\n      let nodeParent = nodeToReplace.parent();\r\n\r\n      nodeToReplace.remove();\r\n      let newNode;\r\n\r\n      if (this._model._learning == true) {\r\n          newNode = Icons.learningActive();\r\n      }else{\r\n          newNode = Icons.learning();\r\n      }\r\n\r\n      newNode.attr({id:'modal_addTask_learningIcon',\r\n                    class:'modal_icon hintHolder'});\r\n\r\n      newNode.on('click',(e) =>{\r\n        this.iconAction(e);\r\n      });\r\n\r\n      nodeParent.append(newNode);\r\n\r\n\r\n    }\r\n\r\n    updateUrgencyIcon(){\r\n\r\n      // Retrieve selected option data so we can know the corresponding icon image.\r\n      let option = this._options.urgency.find( obj => {\r\n        return obj.title == this._model._urgency;\r\n      });\r\n\r\n      let nodeToReplace = $('#modal_addTask_priorityIcon');\r\n      let nodeParent = nodeToReplace.parent();\r\n\r\n      nodeToReplace.remove();\r\n      let newNode = Icons[option.icon]();\r\n\r\n      newNode.attr({id:'modal_addTask_priorityIcon',\r\n                    class:'modal_icon hintHolder'});\r\n\r\n      newNode.on('click',(e) =>{\r\n        this.iconAction(e);\r\n      });\r\n\r\n      nodeParent.append(newNode);\r\n\r\n    }\r\n\r\n    updateHourIcon(){\r\n      // Retrieve selected option data so we can know the corresponding icon image.\r\n      let option = this._options.hours.find( obj => {\r\n        return obj.value == this._model._hours;\r\n      });\r\n\r\n      let nodeToReplace = $('#modal_addTask_hoursIcon');\r\n      let nodeParent = nodeToReplace.parent();\r\n\r\n      nodeToReplace.remove();\r\n      let newNode = Icons[option.active]();\r\n\r\n      newNode.attr({id:'modal_addTask_hoursIcon',\r\n                    class:'modal_icon hintHolder'});\r\n\r\n      newNode.on('click',(e) =>{\r\n        this.iconAction(e);\r\n      });\r\n\r\n      nodeParent.append(newNode);\r\n\r\n    }\r\n\r\n\r\n    updateCategory(){\r\n\r\n      let nodeToReplace = $('#modal_addTask_categoryIcon');\r\n      let nodeParent = nodeToReplace.parent();\r\n\r\n      nodeToReplace.remove();\r\n      let newNode;\r\n\r\n      if (this._model.project!=''){\r\n        newNode = Icons.categoriesActive();\r\n\r\n      }else if(this._model._category == ''){\r\n        newNode = Icons.categories();\r\n\r\n      }else {\r\n        newNode = Icons.categoriesActive();\r\n      }\r\n\r\n      newNode.attr({id:'modal_addTask_categoryIcon',\r\n                    class:'modal_icon hintHolder'});\r\n\r\n      newNode.on('click',(e) =>{\r\n        this.iconAction(e);\r\n      });\r\n\r\n      nodeParent.append(newNode);\r\n\r\n      this.removeCategoryTag();\r\n      this.insertTag('category');\r\n\r\n    }\r\n\r\n    updateProject(){\r\n      let nodeToReplace = $('#modal_addTask_projectIcon');\r\n      let nodeParent = nodeToReplace.parent();\r\n\r\n      nodeToReplace.remove();\r\n      let newNode;\r\n\r\n      if (this._model._project == ''){\r\n        newNode = Icons.projects();\r\n      }else{\r\n        newNode = Icons.projectsActive();\r\n      }\r\n\r\n      newNode.attr({id:'modal_addTask_projectIcon',\r\n                    class:'modal_icon hintHolder'});\r\n\r\n      newNode.on('click',(e) =>{\r\n        this.iconAction(e);\r\n      });\r\n\r\n      nodeParent.append(newNode);\r\n\r\n      this.removeProjectTag();\r\n      this.insertTag('project');\r\n    }\r\n\r\n    removeProjectTag(){\r\n      let projContainer = $('.modal_addTask_caption_proj');\r\n      projContainer.children().remove();\r\n    }\r\n\r\n    removeCategoryTag(){\r\n      let tagContainer = $('.modal_addTask_caption_cat');\r\n      tagContainer.children().remove();\r\n\r\n    }\r\n\r\n    insertTag(type){\r\n\r\n      let targetContainer;\r\n      let tagText;\r\n      let tagColor;\r\n      let addTag;\r\n\r\n      // Default color used when it is a new category, new project\r\n      // or a undefined category.\r\n      let othercolor = '#263e65 ';\r\n      // Retrieves tag text and color from model, and decides if\r\n      // the tag must be added or not.\r\n      if (type=='category'){\r\n\r\n        targetContainer = $('.modal_addTask_caption_cat');\r\n\r\n        if (this._model._isNewCategory){\r\n            tagText = this._model.category;\r\n            tagColor = othercolor;\r\n            addTag = true;\r\n\r\n        }else if (this._model.category!= ''){\r\n          let categoryModel = this._options.categories.find( obj => {\r\n            return obj.title == this._model.category;});\r\n          tagText = this._model.category;\r\n          tagColor = categoryModel.color;\r\n          addTag = true;\r\n\r\n        }else if (this._model._isNewProject || (this._model.category== '' && this._model.project!= '')){\r\n          tagText = 'Other';\r\n          tagColor = othercolor;\r\n          addTag = true;\r\n        }\r\n\r\n      }else{\r\n\r\n        targetContainer = $('.modal_addTask_caption_proj');\r\n\r\n        if (this._model._isNewProject){\r\n          tagText = this._model.project;\r\n          tagColor = othercolor;\r\n          addTag = true;\r\n\r\n        }else if (this._model._project!=''){\r\n          let projectModel = this._options.projects.find( obj => {\r\n            return obj.title == this._model.project;});\r\n          tagText = this._model.project;\r\n          tagColor = projectModel.color;\r\n          addTag = true;\r\n        }\r\n      }\r\n\r\n      // Constructs the tag\r\n      if (addTag){\r\n\r\n        let tagBody = $('<a>',{\r\n          class: 'modal_addTask_tagBody',\r\n          text: tagText\r\n        });\r\n        tagBody.css(\"background-color\",tagColor);\r\n\r\n        let tagIcon = Icons.whiteClose();\r\n        tagIcon.addClass('modal_addTask_tagIcon');\r\n\r\n        let tagButton = $('<a>',{\r\n          class: 'modal_addTask_tagButton',\r\n        });\r\n\r\n        tagButton.css(\"background-color\",tagColor);\r\n        tagButton.append(tagIcon);\r\n\r\n        let tag = $('<div>', {\r\n          class: 'modal_addTask_tag'\r\n        });\r\n\r\n        tag.append(tagBody).append(tagButton);\r\n        targetContainer.append(tag);\r\n\r\n        if (type == 'category'){\r\n          $('.modal_addTask_caption_cat .modal_addTask_tagButton').on('click',() => {\r\n            this.emit('saveProject', '', '');\r\n            this.emit('saveCategory', '', '');\r\n          });\r\n\r\n        }else{\r\n          $('.modal_addTask_caption_proj .modal_addTask_tagButton').on('click',() => {\r\n            this.emit('saveProject', '', '');});\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n\r\n    // Removes currently selected menu option text from\r\n    // the modal user input text box.\r\n    removeSelectionFromTextBox(){\r\n\r\n      // Removes selection text.\r\n      this._textBox.text(\r\n        this._textBox.text().replace(new RegExp(this._textInput + '$'), '')\r\n      );\r\n\r\n      // Removes remaining shortcuts\r\n      this._textBox.text(\r\n        this._textBox.text().replace(new RegExp('c\\\\.' + '|' + 'p\\\\.' + '|' + 'l\\\\.' + '|' + 'u\\\\.' + '|' + 'h\\\\.' + '|', 'g'), '')\r\n      );\r\n\r\n      // Trims white spaces\r\n      this._textBox.text(this._textBox.text().trim());\r\n\r\n      // Place curlet at the end of the text box\r\n      let textBoxNode = document.getElementsByClassName('modal_addTask_body_textBox')[0];\r\n      SetCurlet.setEndOfContenteditable(textBoxNode);\r\n\r\n    }\r\n\r\n\r\n    // Changes the selected drop down table row based on\r\n    // the user's action.\r\n    changeActiveRow(direction, rows){\r\n\r\n        // Remove highlight from active row\r\n        rows[activeRow].classList.remove(\"addTask_tableOption_active\");\r\n\r\n        // Move active row up or down depending on the user input.\r\n        if (direction=='down'){\r\n            if(activeRow<rows.length-1){activeRow++;}else{activeRow=0;}\r\n        }else{\r\n            if(activeRow>0){activeRow--;}else{activeRow=rows.length-1;}\r\n        }\r\n\r\n        // Add highlight to new active row.\r\n        rows[activeRow].classList.add(\"addTask_tableOption_active\");\r\n    }\r\n\r\n    // Removes whatever drop down menu might be open.\r\n    hideDropDownTable(){\r\n\r\n      //Remove menu\r\n      $(\".addTask_floater\").remove();\r\n\r\n      //Remove key up-down listener\r\n      $(document).off('keydown');\r\n      $(document).off('keyup');\r\n\r\n      this.setCloseEvents();\r\n\r\n    }\r\n\r\n    // Builds passed menu.\r\n    buildDropDownMenu(userChoice){\r\n\r\n\r\n      // This array will store all the available menu options for this action.\r\n      let optionArray = [];\r\n\r\n      let textInput = this._textInput;\r\n      // Function used later for filtering options matching input text.\r\n      function takeIfContains(item){\r\n        return item.title.includes(textInput);\r\n      }\r\n\r\n      // If there is no input yet, show all options. If input, show matching options only.\r\n      if (this._textInput!= ''){\r\n        optionArray = this._options[userChoice].filter(takeIfContains);\r\n      }else{\r\n        optionArray = this._options[userChoice].slice();\r\n      }\r\n\r\n      // If the current type is task and the user has selected the hours menu\r\n      // we have to remove from the menu all the habit exclusive options.\r\n      // We do this by filtering those hour options that are not both type.\r\n      function takeIfBoth(item){return item.type == 'both';}\r\n      if (userChoice == 'hours' && this._model.type == 'task'){\r\n        let tempArray = optionArray.filter(takeIfBoth);\r\n        optionArray = tempArray.slice();\r\n      }\r\n\r\n      // Build tbody\r\n      let optTbody = $('<tbody>',{});\r\n\r\n      // Construct table row for each option in optionArray\r\n      if (optionArray.length>0){\r\n        for (let i = 0; i < optionArray.length; i++){\r\n          let optTbRow = this.constructTableRow(optionArray, userChoice, i);\r\n          optTbody.append(optTbRow);\r\n        }\r\n\r\n      // If we got an empty array\r\n      }else{\r\n\r\n        let otherOptions = [];\r\n        if (userChoice =='categories' || userChoice =='projects'){otherOptions.push({title: 'Add new', property: userChoice});}\r\n        let optTbRow = this.constructTableRow(otherOptions, 'new_' + userChoice , 0);\r\n\r\n        if (optTbRow){optTbody.append(optTbRow);}\r\n        else{return null;}\r\n      }\r\n\r\n      // Build option table\r\n      let optTable = $('<table>',{\r\n        id:'addTask_optTb_' + userChoice,\r\n        class:'addTask_optTb'});\r\n      optTable.append(optTbody);\r\n\r\n      // Build inner holder\r\n      let innerHolder = $('<div>',{\r\n        id:'addTask_innerHolder_' + userChoice,\r\n        class:'addTask_innerHolder'});\r\n      innerHolder.append(optTable);\r\n\r\n      //Build base div container\r\n      let outerHolder = $('<div>',{\r\n        id:'addTask_floater_' + userChoice,\r\n        class:'addTask_floater'});\r\n      outerHolder.append(innerHolder);\r\n\r\n      $('#modal_addTask_content').append(outerHolder);\r\n\r\n      //The drop down table receives its position and width from the text box.\r\n      let textBoxFrame = $('.modal_addTask_body_taskNameRow_table');\r\n      let refPos = textBoxFrame.offset();\r\n      let refWidth = this._textBox[0].parentNode.offsetWidth;\r\n\r\n      //Position and display menu.\r\n      outerHolder.css({top: refPos.top + 38 - window.scrollY,left: refPos.left,width:refWidth});\r\n      outerHolder.show();\r\n\r\n      return outerHolder;\r\n    }\r\n\r\n    //Builds each menu table row\r\n    constructTableRow(optionArray, property, index){\r\n\r\n      //If we get an empty array because all possible options have been filtered\r\n      //we retun a null object\r\n      if (optionArray.length==0){return null;}\r\n\r\n      let itemIcon = $([]);\r\n\r\n      //Icon changes depending on the property.\r\n      switch (property) {\r\n        case 'categories':\r\n          itemIcon = $('<div>',{\r\n            class:'addTask_tableOption_catIcon'});\r\n          itemIcon.css(\"background-color\",optionArray[index].color);\r\n          break;\r\n\r\n        case 'projects':\r\n          itemIcon = $('<div>',{\r\n            class:'addTask_tableOption_proIcon'});\r\n          itemIcon.css(\"background-color\",optionArray[index].color);\r\n          break;\r\n\r\n        case 'hours':\r\n          itemIcon = Icons[optionArray[index].icon]();\r\n          itemIcon.addClass('addTask_tableOption_icon');\r\n          break;\r\n\r\n        case 'urgency':\r\n          itemIcon = Icons[optionArray[index].icon]();\r\n          itemIcon.addClass('addTask_tableOption_icon');\r\n          break;\r\n\r\n        case 'learning':\r\n          itemIcon = Icons[optionArray[index].icon]();\r\n          itemIcon.addClass('addTask_tableOption_icon');\r\n          break;\r\n\r\n        case 'new_categories':\r\n          itemIcon = Icons.plus();\r\n          itemIcon.attr({class:'addTask_tableOption_icon',\r\n                        'data-value':optionArray[index].property});\r\n          break;\r\n\r\n        case 'new_projects':\r\n          itemIcon = Icons.plus();\r\n          itemIcon.attr({class:'addTask_tableOption_icon',\r\n                        'data-value':optionArray[index].property});\r\n          break;\r\n      }\r\n\r\n      // Row structure\r\n      let leftPart = $('<div>',{\r\n        class:'addTask_tableOption_leftPart'});\r\n      leftPart.append(itemIcon);\r\n\r\n      let rightPart = $('<div>',{\r\n        class:'addTask_tableOption_rightPart',\r\n        text: optionArray[index].title});\r\n\r\n      let emptyDiv = $('<div>',{});\r\n      emptyDiv.css('display','flex');\r\n      emptyDiv.css('align-items','center');\r\n      emptyDiv.append(leftPart).append(rightPart);\r\n\r\n      let optTbCol = $('<td>',{\r\n        class:'addTask_tableOption'});\r\n      optTbCol.append(emptyDiv);\r\n\r\n      let optTbRow = $('<tr>',{\r\n        'data-value':property\r\n      });\r\n\r\n      optTbRow.append(optTbCol);\r\n\r\n      return optTbRow;\r\n\r\n    }\r\n\r\n    // Set icon button actions\r\n    setIconActions(){\r\n\r\n      let iconBtn = $('.modal_icon');\r\n\r\n      iconBtn.on('click',(e) =>{\r\n        this.iconAction(e);\r\n      });\r\n\r\n    }\r\n\r\n    iconAction(e){\r\n\r\n      let keyword;\r\n      let choice;\r\n\r\n      switch (e.currentTarget.id) {\r\n        case 'modal_addTask_categoryIcon':\r\n          keyword='c.';\r\n          choice='categories';\r\n          break;\r\n        case 'modal_addTask_projectIcon':\r\n          keyword='p.';\r\n          choice='projects';\r\n          break;\r\n\r\n        case 'modal_addTask_hoursIcon':\r\n          keyword='h.';\r\n          choice='hours';\r\n          break;\r\n\r\n        case 'modal_addTask_learningIcon':\r\n          keyword='l.';\r\n          choice='learning';\r\n          break;\r\n\r\n        case 'modal_addTask_priorityIcon':\r\n          keyword='u.';\r\n          choice='urgency';\r\n          break;\r\n      }\r\n\r\n      //Remove input\r\n      this.removeSelectionFromTextBox();\r\n\r\n      //Adds the selected icon shorcut to the end of the text box\r\n      if (this._textBox.text()==\"\"){\r\n        this._textBox.text(keyword);\r\n      }else{\r\n        this._textBox.text(this._textBox.text() + ' ' + keyword);\r\n      }\r\n\r\n      // Place curlet at the end of the text box\r\n      let textBoxNode = document.getElementsByClassName('modal_addTask_body_textBox')[0];\r\n      SetCurlet.setEndOfContenteditable(textBoxNode);\r\n\r\n      this._textInput = '';\r\n\r\n      //Display corresponding menu\r\n      this.displayDropDownTable(choice);\r\n    }\r\n\r\n\r\n };\r\n\n\n//# sourceURL=webpack:///./controllers/forms/add_task_form/new_task_view.js?");

/***/ }),

/***/ "./controllers/habitFactory/habitFactory.js":
/*!**************************************************!*\
  !*** ./controllers/habitFactory/habitFactory.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\nconst EventEmitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\r\n\r\nlet db;\r\n\r\nmodule.exports = class HabitFactory extends EventEmitter{\r\n  constructor(dbHandler){\r\n    super(dbHandler);\r\n\r\n    db = dbHandler;\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * generateTasks - Loops habit array and creates 1 or multiple tasks, depending on\r\n   * the number of days passed since the last task was created, for each habit (when necessary).\r\n   *\r\n   * @param  {type} habits  Array of habit objects.\r\n   * @return {Array}        Array of todo objects.\r\n   */\r\n  generateTasks(habits){\r\n\r\n    // Create a today date with 0h0s.\r\n    let today = new Date();\r\n    let flatToday = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0);\r\n\r\n    // Array with the habit tasks that need to be generated.\r\n    let tasks = [];\r\n\r\n    // Will decide if habit tasks must be generated.\r\n    let generateTasks;\r\n\r\n    for(let i=0;i<habits.length;i++){\r\n\r\n      generateTasks=false;\r\n\r\n      // If empty, it means that the habit was just created\r\n      // and therefore it needs its first task.\r\n      // As nextTaskDate, we add yesterday's date so\r\n      if(!habits[i].nextTaskDate){\r\n        generateTasks=true;\r\n        habits[i].nextTaskDate = new Date(flatToday.getFullYear(), flatToday.getMonth(), flatToday.getDate() - 1, 0, 0, 0);\r\n      }else{\r\n\r\n        habits[i].nextTaskDate = new Date(habits[i].nextTaskDate);\r\n        // If the deadline for finishing the previous task has been exceeded,\r\n        // we can create the following task.\r\n        if(flatToday.getTime() > habits[i].nextTaskDate.getTime()){\r\n          generateTasks=true;\r\n        }\r\n      }\r\n\r\n      if(generateTasks){\r\n\r\n\r\n        // We copy the habit id into the habitId property so the tasks\r\n        // that get greated from this habit have a reference id to the habit.\r\n        // We also kill the id property to prevent from getting a duplicate key\r\n        // error when saving the tasks in the db.\r\n        let habitId = habits[i]._id;\r\n        delete habits[i]._id;\r\n        habits[i].habitId = habitId;\r\n\r\n        // Type is changed into 'task' so the created tasks are considered\r\n        // like tasks by the system.\r\n        habits[i].type = 'task';\r\n\r\n\r\n        // We find out the number of days passed since the last deadline\r\n        // until today.\r\n        let daysPassed = differenceOfDays(habits[i].nextTaskDate, flatToday);\r\n\r\n        // If the result is 0 days, we add 1 to avoid errors in the following\r\n        // methods.\r\n        daysPassed = (daysPassed==0)? daysPassed+1:daysPassed;\r\n\r\n        // We calculate the number of tasks to create based on the number\r\n        // of days passed.\r\n        let periods = Math.ceil(daysPassed/habits[i].frequency);\r\n\r\n\r\n        // For each period, we update the deadline and save it into\r\n        // the tasks array.\r\n        for(let j=1; j<=periods; j++){\r\n          habits[i].dueTo = new Date(habits[i].nextTaskDate.getFullYear(), habits[i].nextTaskDate.getMonth(), habits[i].nextTaskDate.getDate() + habits[i].frequency, 0, 0, 0);\r\n          habits[i].nextTaskDate = new Date(habits[i].dueTo.getFullYear(), habits[i].dueTo.getMonth(), habits[i].dueTo.getDate(), 0, 0, 0);\r\n          tasks.push(cloneHabit(habits[i]));\r\n        }\r\n\r\n        // We request the db to update the habit with\r\n        // the latest deadline.\r\n        updateDatabaseHabit(habitId, habits[i].nextTaskDate);\r\n\r\n      }\r\n    }\r\n\r\n    return tasks;\r\n\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * updateDatabaseHabit - Compiles request into an object that moongose\r\n * can understand, applies a 4000 delay and then requests the update\r\n * to the dbhandler.\r\n * To avoid that these post requests get ahead of other more important posts\r\n * (something that could slow down the process), I give some delay to this\r\n * method so this post is sent after the ui has been printed and the end user\r\n * won't perceive the delay.\r\n *\r\n * @param  {String} id       target todo id.\r\n * @param  {Date} nextDate\r\n */\r\nfunction updateDatabaseHabit(id, nextDate){\r\n\r\n  const request = {nextTaskDate: nextDate};\r\n\r\n  setTimeout( () => {\r\n    const promiseToUpdateHabit = db.updateTodoById(id,request);\r\n\r\n    promiseToUpdateHabit.done((data)=>{}).fail((err)=>{\r\n      console.log(`Error when updating habit ${id} on db.`);\r\n      });\r\n  }, 1000);\r\n\r\n\r\n\r\n}\r\n\r\n/**\r\n * differenceOfDays - Returns the number of days between to dates\r\n *\r\n * @param  {date} date1\r\n * @param  {date} date2\r\n * @return {number}\r\n */\r\nfunction differenceOfDays(date1,date2){\r\n\r\n  let res = Math.abs(date1 - date2) / 1000;\r\n  let difference = Math.floor(res / 86400);\r\n\r\n  return difference;\r\n}\r\n\r\n\r\n\r\n/**\r\n * cloneHabit - Returns a clone of the object passed.\r\n *\r\n * @param  {object} habit\r\n * @return {object}\r\n */\r\nfunction cloneHabit(habit){\r\n\r\n  let newHabit = JSON.parse(JSON.stringify(habit));\r\n  return newHabit;\r\n\r\n}\r\n\n\n//# sourceURL=webpack:///./controllers/habitFactory/habitFactory.js?");

/***/ }),

/***/ "./controllers/hints/help_hint.js":
/*!****************************************!*\
  !*** ./controllers/hints/help_hint.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*jshint esversion: 6 */\r\n\r\n/** @Module\r\n * Display hints when hovering elements in the ui that use specif css classes.\r\n */\r\n\r\nlet elementsWithHints;\r\nlet hintBox;\r\n\r\n\r\n\r\n/**\r\n * @Class\r\n * In charge of adding, displaying and hidding hints to\r\n * the different elements of the user interface.\r\n */\r\nclass Hints{\r\n  constructor(){}\r\n\r\n\r\n\r\n  /**\r\n   * loadHints - Identifies the elements that need a hint\r\n   * to be displayed and adds the necessary hover event to\r\n   * those elements.\r\n   *\r\n   * @param  {string} targetElements ex. '.modal_addTask_body_icons_col .hintHolder'\r\n   */\r\n  loadHints(targetElements){\r\n\r\n    elementsWithHints = $(targetElements);\r\n    hintBox = $('.hintBox_frame');\r\n\r\n    elementsWithHints.hover((e) => {\r\n      if(e.type=='mouseenter'){\r\n        showHint(e);\r\n      }else{\r\n        hideHint();\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * showHint - Finds the position of the hovered element\r\n * and displayes the correspnding hint to that element\r\n * next to it.\r\n * @private\r\n * @param  {Object} e hover jquery event\r\n */\r\nfunction showHint (e){\r\n\r\n      //Hints can become a big annoynace when accessing the mobile version\r\n      //as they are being displayed every time you hit a button.\r\n      //Therefore, for mobile version, we deactivate this function.\r\n      if($( window ).width()<950){return;}\r\n\r\n      let targetId = e.currentTarget.id;\r\n      let hintText = hintMatcher(targetId);\r\n\r\n      let hintTextContainer = $('<div>', {\r\n        class:'hintBoxContent',\r\n        text: hintText});\r\n\r\n      let iconHeightInPixels = 25;\r\n      let xPosition = calculateXValue($('#' + targetId).offset().left);\r\n      let yPosition = $('#' + targetId).offset().top + iconHeightInPixels;\r\n\r\n      hintBox.append(hintTextContainer);\r\n      hintBox.css('display','block');\r\n      hintBox.css('top', yPosition);\r\n      hintBox.css('left', xPosition);\r\n  }\r\n\r\n\r\n\r\n/**\r\n * hideHint - Hides all hintBoxes displayed at the\r\n * moment this function is executed\r\n */\r\nfunction hideHint (){\r\n      $('.hintBoxContent').remove();\r\n      hintBox.css('display','none');\r\n    }\r\n\r\n\r\n\r\n/**\r\n * calculateXValue - Calculates the necessary x position\r\n * for the hintbox so it is never displayed out of the screen.\r\n *\r\n * @param  {Number} targetPosition ex. 520\r\n * @return {Number}\r\n */\r\nfunction calculateXValue(xPosition){\r\n\r\n    let result = xPosition;\r\n\r\n    //200 is the max width of the hintBox\r\n    if ((xPosition + 200) > $( window ).width()){\r\n        result = result-((xPosition + 200) - $( window ).width()-26);\r\n    }else{\r\n        // IMPORTANT: Due to an unknown issue, hint boxes always show up around\r\n        // 120px sepparated from where they should show up.\r\n        // I added this line as my last resource in order to be able to fix the problem.\r\n        result = result-120;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * hintMatcher - Gets the corresponding hint message for\r\n   * the passed ui element id\r\n   *\r\n   * @param  {String} id ex. 'top_bar_menu_icon_container'\r\n   * @return {String}    hint mesage\r\n   */\r\n  function hintMatcher(id){\r\n\r\n    switch (id) {\r\n      case 'top_bar_add_btn': return 'Add new tasks and habits. [q]';\r\n      case 'top_bar_stats_btn': return 'See your performance in numbers!';\r\n      case 'top_bar_account_btn': return 'Manage your account like a boss!';\r\n      case 'modal_addTask_categoryIcon': return 'Assing a category to this item [c.]';\r\n      case 'modal_addTask_projectIcon': return 'Include this task inside a project [p.]';\r\n      case 'modal_addTask_priorityIcon': return 'Select the urgency level of this item [u.]';\r\n      case 'modal_addTask_learningIcon': return 'Add this item to your list of learnt things [l.]';\r\n      case 'modal_addTask_hoursIcon': return 'Estimate how many hours this item will take to complete to get more accurate stats later! [h.]';\r\n      default: return 'Error: No hint found';\r\n    }\r\n  }\r\n\r\n  module.exports = new Hints();\r\n\n\n//# sourceURL=webpack:///./controllers/hints/help_hint.js?");

/***/ }),

/***/ "./controllers/icons/icons.js":
/*!************************************!*\
  !*** ./controllers/icons/icons.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*jshint esversion: 6 */\r\n\r\nconst inactiveGrey = '#c6c6c6';\r\nconst activeBlue ='#1551b5';\r\n\r\n// Task menu\r\nconst taskMenuGrey = '#757575';\r\n\r\n// Close btn\r\nconst lightGrey = '#dddddd';\r\n\r\n// Task drag icon\r\nconst veryDarkBlue = '#263e65';\r\n\r\n// Task menu icon\r\nconst brightBlue = '#7383BF';\r\n\r\n// Urgency levels\r\nconst urgRed = '#ff5c3f';\r\nconst urgGrey = '#c6c6c6';\r\nconst urgBlue = '#7da7c5';\r\n\r\nclass Icons{\r\n\r\n  constructor(){}\r\n\r\n  // Task menu icons\r\n\r\n  edit(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 480 480'});\r\n\r\n    let path1 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path1.attr({d:'m456 176h-52c-.847656-2.175781-1.777344-4.390625-2.785156-6.679688l36.800781-36.800781c9.378906-9.375 9.378906-24.578125 0-33.953125l-56.558594-56.558594c-9.375-9.378906-24.578125-9.378906-33.953125 0l-36.800781 36.800782c-2.289063-1.007813-4.503906-1.9375-6.679687-2.785156v-52.023438c0-13.253906-10.746094-24-24-24h-80.023438c-13.253906 0-24 10.746094-24 24v52c-2.175781.847656-4.390625 1.777344-6.679688 2.785156l-36.800781-36.800781c-9.375-9.378906-24.578125-9.378906-33.953125 0l-56.566406 56.558594c-9.359375 9.382812-9.359375 24.570312 0 33.953125l36.800781 36.800781c-1.007812 2.289063-1.9375 4.503906-2.785156 6.679687h-52.015625c-13.253906 0-24 10.746094-24 24v80.023438c0 13.253906 10.746094 24 24 24h52c.847656 2.175781 1.777344 4.390625 2.785156 6.679688l-36.800781 36.800781c-9.378906 9.375-9.378906 24.578125 0 33.953125l56.558594 56.558594c9.382812 9.359374 24.570312 9.359374 33.953125 0l36.800781-36.800782c2.289063 1.007813 4.503906 1.9375 6.679687 2.785156v52.023438c0 13.253906 10.746094 24 24 24h80.023438c13.253906 0 24-10.746094 24-24v-52c2.175781-.847656 4.390625-1.777344 6.679688-2.785156l36.800781 36.800781c9.382812 9.359375 24.570312 9.359375 33.953125 0l56.566406-56.558594c9.359375-9.382812 9.359375-24.570312 0-33.953125l-36.800781-36.800781c1.007812-2.289063 1.9375-4.503906 2.785156-6.679687h52.015625c13.253906 0 24-10.746094 24-24v-80.023438c0-13.253906-10.746094-24-24-24zm8 104c0 4.417969-3.582031 8-8 8h-57.601562c-3.417969 0-6.457032 2.171875-7.566407 5.40625-1.847656 5.300781-4.003906 10.492188-6.449219 15.546875-1.449218 3.066406-.808593 6.714844 1.601563 9.101563l40.71875 40.722656c1.503906 1.5 2.351563 3.539062 2.351563 5.664062s-.847657 4.160156-2.351563 5.664063l-56.558594 56.558593c-3.171875 3.019532-8.15625 3.019532-11.328125 0l-40.71875-40.71875c-2.390625-2.410156-6.039062-3.050781-9.105468-1.601562-5.054688 2.445312-10.242188 4.597656-15.542969 6.449219-3.265625 1.097656-5.460938 4.164062-5.449219 7.605469v57.601562c0 4.417969-3.582031 8-8 8h-80c-4.417969 0-8-3.582031-8-8v-57.601562c0-3.417969-2.171875-6.457032-5.40625-7.566407-5.300781-1.847656-10.492188-4.003906-15.546875-6.449219-3.066406-1.449218-6.714844-.808593-9.101563 1.601563l-40.722656 40.71875c-3.171875 3.019531-8.152344 3.019531-11.328125 0l-56.558593-56.558594c-1.503907-1.5-2.351563-3.539062-2.351563-5.664062s.847656-4.164063 2.351563-5.664063l40.71875-40.71875c2.410156-2.390625 3.050781-6.039062 1.601562-9.105468-2.445312-5.054688-4.597656-10.242188-6.449219-15.542969-1.097656-3.265625-4.164062-5.460938-7.605469-5.449219h-57.601562c-4.417969 0-8-3.582031-8-8v-80c0-4.417969 3.582031-8 8-8h57.601562c3.417969 0 6.457032-2.171875 7.566407-5.40625 1.847656-5.300781 4.003906-10.492188 6.449219-15.546875 1.449218-3.066406.808593-6.714844-1.601563-9.101563l-40.71875-40.722656c-1.503906-1.5-2.351563-3.539062-2.351563-5.664062s.847657-4.160156 2.351563-5.664063l56.558594-56.558593c3.167969-3.027344 8.160156-3.027344 11.328125 0l40.71875 40.71875c2.390625 2.410156 6.039062 3.050781 9.105468 1.601562 5.054688-2.445312 10.242188-4.597656 15.542969-6.449219 3.265625-1.097656 5.460938-4.164062 5.449219-7.605469v-57.601562c0-4.417969 3.582031-8 8-8h80c4.417969 0 8 3.582031 8 8v57.601562c0 3.417969 2.171875 6.457032 5.40625 7.566407 5.300781 1.847656 10.492188 4.003906 15.546875 6.449219 3.066406 1.449218 6.714844.808593 9.101563-1.601563l40.722656-40.71875c3.171875-3.019531 8.152344-3.019531 11.328125 0l56.558593 56.558594c1.503907 1.5 2.351563 3.539062 2.351563 5.664062s-.847656 4.164063-2.351563 5.664063l-40.71875 40.71875c-2.410156 2.390625-3.050781 6.039062-1.601562 9.105468 2.445312 5.054688 4.597656 10.242188 6.449219 15.542969 1.097656 3.265625 4.164062 5.460938 7.605469 5.449219h57.601562c4.417969 0 8 3.582031 8 8zm0 0'});\r\n    path1.attr({fill:taskMenuGrey});\r\n\r\n    let path2 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path2.attr({d:'m240 136c-57.4375 0-104 46.5625-104 104s46.5625 104 104 104 104-46.5625 104-104c-.066406-57.410156-46.589844-103.933594-104-104zm0 192c-48.601562 0-88-39.398438-88-88s39.398438-88 88-88 88 39.398438 88 88c-.058594 48.578125-39.421875 87.941406-88 88zm0 0'});\r\n    path2.attr({fill:taskMenuGrey});\r\n\r\n\r\n    icon.append(path1)\r\n        .append(path2);\r\n\r\n    return icon;\r\n  }\r\n\r\n  pending(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 60.064 60.064'});\r\n\r\n    let path = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path.attr({d:'M59.84,7.897c-0.218-0.268-0.556-0.393-0.893-0.353c-0.077,0.004-0.149,0.017-0.224,0.039L0.738,23.354  C0.312,23.47,0.012,23.852,0,24.293c-0.011,0.441,0.269,0.838,0.688,0.976l21.217,6.952l-1.898,15.182  c-0.05,0.4,0.145,0.791,0.494,0.991c0.155,0.089,0.327,0.133,0.498,0.133c0.215,0,0.43-0.069,0.608-0.206l7.765-5.946l6.807,9.725  c0.188,0.269,0.494,0.427,0.819,0.427c0.022,0,0.045-0.001,0.068-0.002c0.35-0.024,0.661-0.229,0.821-0.542l22.063-43  C60.134,8.631,60.09,8.205,59.84,7.897z M52.895,11.241L22.861,30.429L4.484,24.408L52.895,11.241z M22.288,45.281l1.382-11.053  l4.555,6.507L22.288,45.281z M36.868,49.594L24.418,31.808l32.1-20.508L36.868,49.594z'});\r\n    path.attr({fill:taskMenuGrey});\r\n\r\n    icon.append(path);\r\n    return icon;\r\n  }\r\n\r\n  delete(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 729.837 729.838'});\r\n\r\n    let path1 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path1.attr({d:'M589.193,222.04c0-6.296,5.106-11.404,11.402-11.404S612,215.767,612,222.04v437.476c0,19.314-7.936,36.896-20.67,49.653     c-12.733,12.734-30.339,20.669-49.653,20.669H188.162c-19.315,0-36.943-7.935-49.654-20.669     c-12.734-12.734-20.669-30.313-20.669-49.653V222.04c0-6.296,5.108-11.404,11.403-11.404c6.296,0,11.404,5.131,11.404,11.404     v437.476c0,13.02,5.37,24.922,13.97,33.521c8.6,8.601,20.503,13.993,33.522,13.993h353.517c13.019,0,24.896-5.394,33.498-13.993     c8.624-8.624,13.992-20.503,13.992-33.498V222.04H589.193z'});\r\n    path1.attr({fill:taskMenuGrey});\r\n\r\n    let path2 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path2.attr({d:'M279.866,630.056c0,6.296-5.108,11.403-11.404,11.403s-11.404-5.107-11.404-11.403v-405.07     c0-6.296,5.108-11.404,11.404-11.404s11.404,5.108,11.404,11.404V630.056z'});\r\n    path2.attr({fill:taskMenuGrey});\r\n\r\n    let path3 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path3.attr({d:'M376.323,630.056c0,6.296-5.107,11.403-11.403,11.403s-11.404-5.107-11.404-11.403v-405.07     c0-6.296,5.108-11.404,11.404-11.404s11.403,5.108,11.403,11.404V630.056z'});\r\n    path3.attr({fill:taskMenuGrey});\r\n\r\n    let path4 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path4.attr({d:'M472.803,630.056c0,6.296-5.106,11.403-11.402,11.403c-6.297,0-11.404-5.107-11.404-11.403v-405.07     c0-6.296,5.107-11.404,11.404-11.404c6.296,0,11.402,5.108,11.402,11.404V630.056L472.803,630.056z'});\r\n    path4.attr({fill:taskMenuGrey});\r\n\r\n    let path5 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path5.attr({d:'M273.214,70.323c0,6.296-5.108,11.404-11.404,11.404c-6.295,0-11.403-5.108-11.403-11.404     c0-19.363,7.911-36.943,20.646-49.677C283.787,7.911,301.368,0,320.73,0h88.379c19.339,0,36.92,7.935,49.652,20.669     c12.734,12.734,20.67,30.362,20.67,49.654c0,6.296-5.107,11.404-11.403,11.404s-11.403-5.108-11.403-11.404     c0-13.019-5.369-24.922-13.97-33.522c-8.602-8.601-20.503-13.994-33.522-13.994h-88.378c-13.043,0-24.922,5.369-33.546,13.97     C278.583,45.401,273.214,57.28,273.214,70.323z'});\r\n    path5.attr({fill:taskMenuGrey});\r\n\r\n    let path6 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path6.attr({d:'M99.782,103.108h530.273c11.189,0,21.405,4.585,28.818,11.998l0.047,0.048c7.413,7.412,11.998,17.628,11.998,28.818     v29.46c0,6.295-5.108,11.403-11.404,11.403h-0.309H70.323c-6.296,0-11.404-5.108-11.404-11.403v-0.285v-29.175     c0-11.166,4.585-21.406,11.998-28.818l0.048-0.048C78.377,107.694,88.616,103.108,99.782,103.108L99.782,103.108z      M630.056,125.916H99.782c-4.965,0-9.503,2.02-12.734,5.274L87,131.238c-3.255,3.23-5.274,7.745-5.274,12.734v18.056h566.361     v-18.056c0-4.965-2.02-9.503-5.273-12.734l-0.049-0.048C639.536,127.936,635.021,125.916,630.056,125.916z'});\r\n    path6.attr({fill:taskMenuGrey});\r\n\r\n    icon.append(path1)\r\n        .append(path2)\r\n        .append(path3)\r\n        .append(path4)\r\n        .append(path5)\r\n        .append(path6);\r\n    return icon;\r\n  }\r\n\r\n  progress(){\r\n\r\n    let icon = this.hours();\r\n    icon.children(0).attr('fill',taskMenuGrey);\r\n    return icon;\r\n  }\r\n\r\n  notes(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 380.832 380.832'});\r\n\r\n    let path1 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path1.attr({d:'M320.159,30.864h-47.243V12.5c0-6.904-5.597-12.5-12.5-12.5s-12.5,5.596-12.5,12.5v18.364h-45V12.5    c0-6.904-5.597-12.5-12.5-12.5c-6.903,0-12.5,5.596-12.5,12.5v18.364h-45V12.5c0-6.904-5.597-12.5-12.5-12.5    s-12.5,5.596-12.5,12.5v18.364H60.673c-6.903,0-12.5,5.597-12.5,12.5v324.968c0,6.903,5.597,12.5,12.5,12.5h259.486    c6.903,0,12.5-5.597,12.5-12.5V43.364C332.659,36.461,327.062,30.864,320.159,30.864z M307.659,355.832H73.173V55.864h34.743    v14.59c0,6.904,5.597,12.5,12.5,12.5s12.5-5.596,12.5-12.5v-14.59h45v14.59c0,6.904,5.597,12.5,12.5,12.5    c6.903,0,12.5-5.596,12.5-12.5v-14.59h45v14.59c0,6.904,5.597,12.5,12.5,12.5s12.5-5.596,12.5-12.5v-14.59h34.743V355.832z'});\r\n    path1.attr({fill:taskMenuGrey});\r\n\r\n    let path2 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path2.attr({d:'M264.416,139.758h-148c-6.903,0-12.5,5.597-12.5,12.5c0,6.903,5.597,12.5,12.5,12.5h148c6.903,0,12.5-5.597,12.5-12.5    C276.916,145.355,271.319,139.758,264.416,139.758z'});\r\n    path2.attr({fill:taskMenuGrey});\r\n\r\n    let path3 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path3.attr({d:'M264.416,209.758h-148c-6.903,0-12.5,5.598-12.5,12.5c0,6.903,5.597,12.5,12.5,12.5h148c6.903,0,12.5-5.597,12.5-12.5    C276.916,215.355,271.319,209.758,264.416,209.758z'});\r\n    path3.attr({fill:taskMenuGrey});\r\n\r\n    let path4 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path4.attr({d:'M264.416,279.758h-148c-6.903,0-12.5,5.598-12.5,12.5c0,6.903,5.597,12.5,12.5,12.5h148c6.903,0,12.5-5.597,12.5-12.5    C276.916,285.355,271.319,279.758,264.416,279.758z'});\r\n    path4.attr({fill:taskMenuGrey});\r\n\r\n    icon.append(path1)\r\n        .append(path2)\r\n        .append(path3)\r\n        .append(path4);\r\n    return icon;\r\n  }\r\n\r\n\r\n  // Task list item icons\r\n\r\n  drag(){\r\n\r\n    // We add the instant class so the task list item can be\r\n    // dragged by the user.\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 53 53'});\r\n\r\n    let path1 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path1.attr({d:'M2,13.5h49c1.104,0,2-0.896,2-2s-0.896-2-2-2H2c-1.104,0-2,0.896-2,2S0.896,13.5,2,13.5z'});\r\n    path1.attr({fill:veryDarkBlue});\r\n    path1.attr({class:'instant'});\r\n\r\n    let path2 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path2.attr({d:'M2,28.5h49c1.104,0,2-0.896,2-2s-0.896-2-2-2H2c-1.104,0-2,0.896-2,2S0.896,28.5,2,28.5z'});\r\n    path2.attr({fill:veryDarkBlue});\r\n    path2.attr({class:'instant'});\r\n\r\n    let path3 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path3.attr({d:'M2,43.5h49c1.104,0,2-0.896,2-2s-0.896-2-2-2H2c-1.104,0-2,0.896-2,2S0.896,43.5,2,43.5z'});\r\n    path3.attr({fill:veryDarkBlue});\r\n    path3.attr({class:'instant'});\r\n\r\n    icon.append(path1)\r\n        .append(path2)\r\n        .append(path3);\r\n    return icon;\r\n  }\r\n\r\n  menu(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 58 58'});\r\n\r\n    let path1 = $(document.createElementNS('http://www.w3.org/2000/svg', 'circle'));\r\n    path1.attr({cx:\"7\",cy:\"29\", r:\"7\"});\r\n    path1.attr({fill:brightBlue});\r\n\r\n    let path2 = $(document.createElementNS('http://www.w3.org/2000/svg', 'circle'));\r\n    path2.attr({cx:\"51\",cy:\"29\", r:\"7\"});\r\n    path2.attr({fill:brightBlue});\r\n\r\n    let path3 = $(document.createElementNS('http://www.w3.org/2000/svg', 'circle'));\r\n    path3.attr({cx:\"29\",cy:\"29\", r:\"7\"});\r\n    path3.attr({fill:brightBlue});\r\n\r\n    icon.append(path1)\r\n        .append(path2)\r\n        .append(path3);\r\n    return icon;\r\n  }\r\n\r\n\r\n  // Urgency icons\r\n\r\n  urgHigh(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 512.171 512.171'});\r\n\r\n    let path = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path.attr({d:'m479.046,283.925c-1.664,-3.989 -5.547,-6.592 -9.856,-6.592l-116.885,0l0,-266.666c0,-5.888 -4.779,-10.667 -10.667,-10.667l-170.667,0c-5.888,0 -10.667,4.779 -10.667,10.667l0,266.667l-117.333,0c-4.309,0 -8.192,2.603 -9.856,6.571c-1.643,3.989 -0.747,8.576 2.304,11.627l212.8,213.504c2.005,2.005 4.715,3.136 7.552,3.136s5.547,-1.131 7.552,-3.115l213.419,-213.504c3.051,-3.052 3.968,-7.638 2.304,-11.628z'});\r\n    path.attr({fill:urgRed});\r\n    path.attr({transform:\"rotate(-180 256.0851745605469,256.08599853515625) \"});\r\n\r\n    icon.append(path);\r\n    return icon;\r\n  }\r\n\r\n  urgNormal(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 512.171 512.171'});\r\n\r\n    let group = $(document.createElementNS('http://www.w3.org/2000/svg', 'g'));\r\n    group.attr({transform:\"rotate(90 256.0851745605469,256.0859985351563) \"});\r\n\r\n    let path = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path.attr({d:\"m479.046,283.925c-1.664,-3.989 -5.547,-6.592 -9.856,-6.592l-116.885,0l0,-266.666c0,-5.888 -4.779,-10.667 -10.667,-10.667l-170.667,0c-5.888,0 -10.667,4.779 -10.667,10.667l0,266.667l-117.333,0c-4.309,0 -8.192,2.603 -9.856,6.571c-1.643,3.989 -0.747,8.576 2.304,11.627l212.8,213.504c2.005,2.005 4.715,3.136 7.552,3.136s5.547,-1.131 7.552,-3.115l213.419,-213.504c3.051,-3.052 3.968,-7.638 2.304,-11.628z\"});\r\n    path.attr({fill:urgGrey});\r\n\r\n    group.append(path);\r\n    icon.append(group);\r\n    return icon;\r\n  }\r\n\r\n  urgLow(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 512.171 512.171'});\r\n\r\n    let path = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path.attr({d:\"M479.046,283.925c-1.664-3.989-5.547-6.592-9.856-6.592H352.305V10.667C352.305,4.779,347.526,0,341.638,0H170.971    c-5.888,0-10.667,4.779-10.667,10.667v266.667H42.971c-4.309,0-8.192,2.603-9.856,6.571c-1.643,3.989-0.747,8.576,2.304,11.627    l212.8,213.504c2.005,2.005,4.715,3.136,7.552,3.136s5.547-1.131,7.552-3.115l213.419-213.504    C479.793,292.501,480.71,287.915,479.046,283.925z\"});\r\n    path.attr({fill:urgBlue});\r\n\r\n    icon.append(path);\r\n    return icon;\r\n  }\r\n\r\n\r\n  // Task icon\r\n\r\n  star(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 19.481 19.481'});\r\n\r\n    let path = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path.attr({d:\"m10.201,.758l2.478,5.865 6.344,.545c0.44,0.038 0.619,0.587 0.285,0.876l-4.812,4.169 1.442,6.202c0.1,0.431-0.367,0.77-0.745,0.541l-5.452-3.288-5.452,3.288c-0.379,0.228-0.845-0.111-0.745-0.541l1.442-6.202-4.813-4.17c-0.334-0.289-0.156-0.838 0.285-0.876l6.344-.545 2.478-5.864c0.172-0.408 0.749-0.408 0.921,0z\"});\r\n    path.attr({fill:inactiveGrey});\r\n\r\n    icon.append(path);\r\n    return icon;\r\n\r\n  }\r\n\r\n  starActive(){\r\n\r\n    let icon = this.star();\r\n    icon.children(0).attr({fill:activeBlue});\r\n    return icon;\r\n\r\n  }\r\n\r\n  hours(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 612 612'});\r\n\r\n    let path = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path.attr({d:\"M306,0C136.992,0,0,136.992,0,306s136.992,306,306,306s306-137.012,306-306S475.008,0,306,0z M306,573.157     C158.451,573.157,38.843,453.55,38.843,306C38.843,158.451,158.451,38.843,306,38.843c147.55,0,267.157,119.608,267.157,267.157     C573.157,453.55,453.55,573.157,306,573.157z M325.125,115.955h-37.657l0.593,209.782l132.077,112.952l23.313-32.876     l-118.326-99.221V115.955z\"});\r\n    path.attr({fill:inactiveGrey});\r\n\r\n    icon.append(path);\r\n    return icon;\r\n\r\n  }\r\n\r\n  categories(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 28 28'});\r\n\r\n    let path = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path.attr({d:\"M15,18v-4h-4v8l4,0.001V20h8v8h-8v-4H9V8H5V0h8v8h-2v4h4v-2h8v8H15z\"});\r\n    path.attr({fill:inactiveGrey});\r\n\r\n    icon.append(path);\r\n    return icon;\r\n\r\n  }\r\n\r\n  categoriesActive(){\r\n\r\n    let icon = this.categories();\r\n    icon.children(0).attr({fill:activeBlue});\r\n    return icon;\r\n\r\n  }\r\n\r\n  projects(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 -52 512.00001 512'});\r\n\r\n    let path1 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path1.attr({d:\"m0 113.292969h113.292969v-113.292969h-113.292969zm30.003906-83.289063h53.289063v53.289063h-53.289063zm0 0\"});\r\n    path1.attr({fill:inactiveGrey});\r\n\r\n    let path2 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path2.attr({d:\"m149.296875 0v113.292969h362.703125v-113.292969zm332.699219 83.292969h-302.695313v-53.289063h302.695313zm0 0\"});\r\n    path2.attr({fill:inactiveGrey});\r\n\r\n    let path3 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path3.attr({d:\"m0 260.300781h113.292969v-113.292969h-113.292969zm30.003906-83.292969h53.289063v53.289063h-53.289063zm0 0\"});\r\n    path3.attr({fill:inactiveGrey});\r\n\r\n    let path4 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path4.attr({d:\"m149.296875 260.300781h362.703125v-113.292969h-362.703125zm30.003906-83.292969h302.695313v53.289063h-302.695313zm0 0\"});\r\n    path4.attr({fill:inactiveGrey});\r\n\r\n    let path5 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path5.attr({d:\"m0 407.308594h113.292969v-113.296875h-113.292969zm30.003906-83.292969h53.289063v53.289063h-53.289063zm0 0\"});\r\n    path5.attr({fill:inactiveGrey});\r\n\r\n    let path6 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path6.attr({d:\"m149.296875 407.308594h362.703125v-113.296875h-362.703125zm30.003906-83.292969h302.695313v53.289063h-302.695313zm0 0\"});\r\n    path6.attr({fill:inactiveGrey});\r\n\r\n    icon.append(path1)\r\n        .append(path2)\r\n        .append(path3)\r\n        .append(path4)\r\n        .append(path5)\r\n        .append(path6);\r\n\r\n    return icon;\r\n\r\n  }\r\n\r\n  projectsActive(){\r\n\r\n    let icon = this.projects();\r\n    icon.children(0).attr({fill:activeBlue});\r\n    icon.children(1).attr({fill:activeBlue});\r\n    icon.children(2).attr({fill:activeBlue});\r\n    icon.children(3).attr({fill:activeBlue});\r\n    icon.children(4).attr({fill:activeBlue});\r\n    icon.children(5).attr({fill:activeBlue});\r\n    return icon;\r\n\r\n  }\r\n\r\n  learning(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 -47 512.00002 512'});\r\n\r\n    let path = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path.attr({d:\"m507.105469 95.203125-161.90625-61.726563c-3.925781-1.496093-8.320313.472657-9.816407 4.394532-1.496093 3.925781.472657 8.320312 4.398438 9.816406l143.269531 54.621094-99.179687 37.816406-124.734375-56.476562c-3.828125-1.734376-8.332031-.035157-10.0625 3.789062-1.734375 3.828125-.035157 8.332031 3.789062 10.066406l110.988281 50.253906-107.851562 41.117188-227.050781-86.566406 227.050781-86.566406 55.953125 21.335937c3.917969 1.492187 8.316406-.472656 9.816406-4.398437 1.496094-3.921876-.472656-8.316407-4.398437-9.8125l-58.660156-22.367188c-1.746094-.664062-3.675782-.667969-5.421876 0l-248.394531 94.703125c-2.945312 1.125-4.894531 3.953125-4.894531 7.105469v34.726562c0 3.152344 1.949219 5.980469 4.894531 7.105469l77.566407 29.570313v26.351562c0 4.199219 3.402343 7.605469 7.601562 7.605469 4.203125 0 7.605469-3.40625 7.605469-7.605469v-20.550781l155.621093 59.332031c.875.332031 1.792969.5 2.710938.5s1.835938-.167969 2.710938-.5l117.304687-44.722656v120.34375c-36.828125 19.332031-78.125 29.691406-120.015625 29.691406-57.171875 0-113.25-19.273438-158.332031-54.347656v-59.328125c0-4.199219-3.402344-7.605469-7.605469-7.605469-4.199219 0-7.601562 3.40625-7.601562 7.605469v63.011719c0 2.308593 1.046874 4.492187 2.847656 5.933593 48.246094 38.652344 108.867187 59.9375 170.691406 59.9375 41.695312 0 82.835938-9.695312 120.015625-27.855469v30.777344c-12.253906 3.347656-21.289063 14.570313-21.289063 27.871094 0 15.929688 12.960938 28.894531 28.890626 28.894531 15.933593 0 28.894531-12.964843 28.894531-28.894531 0-13.300781-9.035157-24.523438-21.289063-27.871094v-38.808594c12.394532-7.050781 24.269532-15.074218 35.472656-24.050781 1.800782-1.441406 2.851563-3.625 2.851563-5.933593v-119.785157l77.558594-29.570312c2.945312-1.121094 4.894531-3.949219 4.894531-7.105469v-34.722656c0-3.152344-1.949219-5.980469-4.894531-7.105469zm-109.800781 294.953125c0 7.542969-6.140626 13.683594-13.6875 13.683594-7.542969 0-13.683594-6.140625-13.683594-13.683594 0-7.546875 6.140625-13.6875 13.683594-13.6875 7.546874 0 13.6875 6.140625 13.6875 13.6875zm-382.097657-276.808594 233.1875 88.90625v18.445313l-233.1875-88.90625zm248.398438 107.351563v-18.445313l112.410156-42.859375v18.449219zm150.730469 69.105469c-7.417969 5.773437-15.140626 11.109374-23.113282 16.007812v-117.492188l23.113282-8.8125zm-23.113282-117.761719v-18.445313l105.570313-40.25v18.445313zm0 0\"});\r\n    path.attr({fill:inactiveGrey});\r\n\r\n    icon.append(path);\r\n    return icon;\r\n\r\n  }\r\n\r\n  learningActive(){\r\n\r\n    let icon = this.learning();\r\n    icon.children(0).attr({fill:activeBlue});\r\n    return icon;\r\n  }\r\n\r\n  regularTask(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 415.998 415.998'});\r\n\r\n    let path = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path.attr({d:\"M367.998,95.999c0-17.673-14.326-32-31.999-32h-44.424c-5.926-6.583-13.538-11.62-22.284-14.136    c-7.367-2.118-13.037-7.788-15.156-15.155C248.37,14.663,229.897,0,207.998,0c-21.898,0-40.37,14.663-46.134,34.706    c-2.122,7.376-7.806,13.039-15.182,15.164c-8.736,2.518-16.341,7.55-22.262,14.129H79.999c-17.674,0-32,14.327-32,32v287.999    c0,17.673,14.326,32,32,32c73.466,0,163.758,0,256,0c17.674,0,32-14.327,32-32C367.999,293.119,367.998,206.096,367.998,95.999z     M128,95.742c0.11-14.066,9.614-26.606,23.112-30.496c12.71-3.662,22.477-13.426,26.127-26.116    C181.157,25.51,193.805,16,207.998,16c14.194,0,26.842,9.51,30.758,23.13c3.652,12.698,13.413,22.459,26.111,26.11    c13.618,3.917,23.13,16.566,23.13,30.758v16H128V95.742z M335.999,399.998c-85.455,0-170.77,0-256,0c-8.823,0-16-7.178-16-16    V95.999c0-8.822,7.177-16,16-16h34.742c-1.73,4.892-2.698,10.143-2.74,15.617v32.383h191.998v-32c0-5.615-0.992-10.991-2.764-16    h34.764c8.822,0,15.999,7.178,15.999,16c0,45.743-0.001,260.254,0.002,287.999C351.999,392.82,344.822,399.998,335.999,399.998z\"});\r\n    path.attr({fill:inactiveGrey});\r\n\r\n    icon.append(path);\r\n    return icon;\r\n\r\n  }\r\n\r\n  number1(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 512 512'});\r\n\r\n    let path1 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path1.attr({d:\"M256,0C114.609,0,0,114.609,0,256c0,141.391,114.609,256,256,256c141.391,0,256-114.609,256-256   C512,114.609,397.391,0,256,0z M256,472c-119.297,0-216-96.703-216-216S136.703,40,256,40s216,96.703,216,216S375.297,472,256,472z   \"});\r\n    path1.attr({fill:activeBlue});\r\n\r\n    let path2 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path2.attr({d:\"M249.703,201.25H188v-25h19.312c6.859,0,13.422-1.219,19.5-3.594c6.172-2.375,11.438-5.641,15.797-9.797    c4.358-4.203,7.922-9.25,10.547-15.234c2.734-5.906,4.047-12.5,4.047-19.625H284v256h-34.297V201.25z\"});\r\n    path2.attr({fill:activeBlue});\r\n\r\n    icon.append(path1)\r\n        .append(path2);\r\n\r\n    return icon;\r\n  }\r\n\r\n  number2(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 512 512'});\r\n\r\n    let path1 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path1.attr({d:\"M256,0C114.609,0,0,114.609,0,256c0,141.391,114.609,256,256,256c141.391,0,256-114.609,256-256   C512,114.609,397.391,0,256,0z M256,472c-119.297,0-216-96.703-216-216S136.703,40,256,40s216,96.703,216,216S375.297,472,256,472z   \"});\r\n    path1.attr({fill:activeBlue});\r\n\r\n    let path2 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path2.attr({d:\"M176,209.75c2.531-24.406,10.969-44.141,25.375-59.219c14.344-15.031,34-22.531,58.859-22.531    c12.233,0,23.172,2.141,32.594,6.484c9.422,4.297,17.375,10.141,23.719,17.484c6.328,7.281,11.219,15.547,14.516,24.797    c3.281,9.266,4.938,18.844,4.938,28.703c0,8.625-0.984,16.391-3.062,23.266c-2.095,6.875-4.953,12.984-8.688,18.297    c-3.75,5.438-8.031,10.375-13.109,15c-4.922,4.688-10.327,9.078-16.188,13.234c-10.845,8.405-22.125,16.452-33.672,24.202    c-11.594,7.75-22.719,16.531-33.375,26.328c-3.875,3.672-7.062,7.438-9.594,11.453c-2.5,4.017-4.594,9.031-6.266,15.017h117.375    V384H178.531v-24.203c0-10.047,3.188-20,9.625-29.578c6.438-9.734,14.438-19.188,24.125-28.219    c9.625-9.031,20.188-17.828,31.781-26.359c11.609-8.516,22.531-16.766,32.891-24.781c7.844-5.984,14.031-12.359,18.672-19.234    c4.516-6.859,6.859-15.625,6.859-26.344c0-15.172-3.812-27.031-11.734-35.531c-7.781-8.484-17.938-12.734-30.516-12.734    c-15.359,0-27.531,4.703-36.453,14.109c-9,9.375-13.438,22.25-13.438,38.625L176,209.75L176,209.75z\"});\r\n    path2.attr({fill:activeBlue});\r\n\r\n    icon.append(path1)\r\n        .append(path2);\r\n\r\n    return icon;\r\n  }\r\n\r\n  number3(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 512 512'});\r\n\r\n    let path1 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path1.attr({d:\"M256,0C114.609,0,0,114.609,0,256c0,141.391,114.609,256,256,256c141.391,0,256-114.609,256-256   C512,114.609,397.391,0,256,0z M256,472c-119.297,0-216-96.703-216-216S136.703,40,256,40s216,96.703,216,216S375.297,472,256,472z   \"});\r\n    path1.attr({fill:activeBlue});\r\n\r\n    let path2 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path2.attr({d:\"M182.828,204.781c2.688-24.062,9.672-42.922,20.938-56.5C215.031,134.766,232.812,128,257.25,128    c21.156,0,37.938,5.969,50.25,17.875s18.469,27.75,18.469,47.469c0,14.125-2.562,25.375-7.781,33.781    c-5.233,8.375-13.453,14.906-24.78,19.625c5.422,1.75,10.641,4.25,15.688,7.5c5.188,3.25,9.734,7.406,13.672,12.594    c4.062,5.156,7.267,11.234,9.734,18.344c2.344,7.047,3.5,15.359,3.5,25.095c0,12.172-2.078,22.688-6.234,31.75    c-4.28,9.188-9.983,16.905-17.077,22.983c-7.234,6.219-15.642,10.938-25.047,14.188c-9.531,3.233-19.673,4.797-30.392,4.797    c-21.969,0-40.156-6.983-54.5-20.983c-14.344-13.984-23.25-34.548-26.75-62h32.562c3.188,20,8.734,34.047,16.5,42.202    c7.75,8.031,18.531,12.062,32.188,12.062c6.156,0,12.094-1.017,17.703-3.048c5.641-2.016,10.516-5.016,14.812-9.016    c4.312-4,7.734-8.734,10.392-14.281c2.5-5.688,3.702-11.905,3.702-18.655c0-13.517-4.125-25.017-12.5-34.438    c-8.25-9.375-19.641-14.094-34.108-14.094h-18.516v-28.719h18.516c6.719,0,12.422-1.062,17.108-3.281    c4.656-2.234,8.484-5.094,11.453-8.625c2.953-3.5,5.031-7.5,6.22-11.875c1.297-4.469,1.797-8.875,1.797-13.25    c0-12.375-3.406-22.109-10.25-29.156c-6.828-7.078-15.922-10.594-27.188-10.594c-6.953,0-12.797,1.281-17.656,3.984    c-4.812,2.641-8.875,6.156-12.078,10.547c-3.188,4.453-5.719,9.594-7.625,15.484c-1.859,5.875-3.219,12.109-4,18.516H182.828z\"});\r\n    path2.attr({fill:activeBlue});\r\n\r\n    icon.append(path1)\r\n        .append(path2);\r\n\r\n    return icon;\r\n  }\r\n\r\n  number4(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 512 512'});\r\n\r\n    let path1 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path1.attr({d:\"M256,0C114.609,0,0,114.609,0,256c0,141.391,114.609,256,256,256c141.391,0,256-114.609,256-256   C512,114.609,397.391,0,256,0z M256,472c-119.297,0-216-96.703-216-216S136.703,40,256,40s216,96.703,216,216S375.297,472,256,472z   \"});\r\n    path1.attr({fill:activeBlue});\r\n\r\n    let path2 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path2.attr({d:\"M274.203,384v-62.5H176v-37.203L274.203,128H303.5v164.484H336V321.5h-32.5V384H274.203z M202.438,292.484h71.766V176.969    L202.438,292.484z\"});\r\n    path2.attr({fill:activeBlue});\r\n\r\n    icon.append(path1)\r\n        .append(path2);\r\n\r\n    return icon;\r\n  }\r\n\r\n  number5(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 512 512'});\r\n\r\n    let path1 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path1.attr({d:\"M256,0C114.609,0,0,114.609,0,256c0,141.391,114.609,256,256,256c141.391,0,256-114.609,256-256   C512,114.609,397.391,0,256,0z M256,472c-119.297,0-216-96.703-216-216S136.703,40,256,40s216,96.703,216,216S375.297,472,256,472z   \"});\r\n    path1.attr({fill:activeBlue});\r\n\r\n    let path2 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path2.attr({d:\"M183.219,263.844L198.453,128h124.062v29.031H221.328L214.5,227.14l1.219,0.484c5.844-5.641,12.719-9.656,20.656-12.031    c7.875-2.375,15.719-3.594,23.469-3.594c10.969,0,21.109,2.234,30.5,6.719c9.266,4.406,17.359,10.531,24.078,18.281    c6.734,7.75,12.078,16.891,15.906,27.5C334.125,275.03,336,286.28,336,298.232c0,11.017-1.656,21.578-5.031,31.984    c-3.531,10.25-8.656,19.328-15.391,27.5c-6.734,8-15.297,14.328-25.656,19.078c-10.406,4.75-22.578,7.203-36.484,7.203    c-19.531,0-36.375-6.188-50.531-18.281c-14.219-12.234-23.188-30.172-26.906-53.688h32.516c2.922,13.453,8.453,23.969,16.641,31.5    c8.172,7.531,17.719,11.453,28.656,11.453c7.5,0,14.329-1.5,20.422-4.5c6.219-2.969,11.453-6.984,15.906-12.017    c4.328-5.155,7.828-11.219,10.155-18.422c2.453-7.078,3.595-14.733,3.595-22.766c0-8.298-1.392-15.859-4.345-22.767    c-3.062-6.797-6.905-12.733-11.858-17.641c-4.922-4.891-10.625-8.75-17.031-11.625C264.234,242.469,257.688,241,251,241    c-7.469,0-14.719,1.844-21.688,5.375c-6.938,3.609-12.812,9.375-17.625,17.469H183.219z\"});\r\n    path2.attr({fill:activeBlue});\r\n\r\n    icon.append(path1)\r\n        .append(path2);\r\n\r\n    return icon;\r\n  }\r\n\r\n  number6(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 512 512'});\r\n\r\n    let path1 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path1.attr({d:\"M256,0C114.609,0,0,114.609,0,256c0,141.391,114.609,256,256,256c141.391,0,256-114.609,256-256   C512,114.609,397.391,0,256,0z M256,472c-119.297,0-216-96.703-216-216S136.703,40,256,40s216,96.703,216,216S375.297,472,256,472z   \"});\r\n    path1.attr({fill:activeBlue});\r\n\r\n    let path2 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path2.attr({d:\"M302.922,193.656c0-4.406-1-8.797-3.297-13.188c-2.156-4.438-5.141-8.375-8.688-11.938    c-3.547-3.531-7.938-6.375-13.047-8.562c-5.109-2.219-10.517-3.344-16.281-3.344c-10.281,0-18.517,2.516-24.859,7.5    c-6.312,5-11.375,11.531-15.094,19.625c-3.688,8.094-6.344,17.125-7.875,27.125c-1.516,9.969-2.375,19.781-2.688,29.5h1.266    c14.312-14.656,29.797-22.031,46.579-22.031c10.688,0,20.766,2.047,30.328,6.156c9.438,4.125,17.625,9.875,24.452,17.234    c6.97,7.281,12.359,16.141,16.375,26.391c3.97,10.297,5.906,21.422,5.906,33.422c0,11.22-1.844,21.906-5.391,31.892    c-3.531,10-8.656,18.625-15.25,26.094c-6.595,7.5-14.595,13.469-24.142,17.938c-9.422,4.328-20.094,6.531-31.938,6.531    c-12.656,0-24.141-2.562-34.469-7.938c-10.25-5.267-19.016-12.812-26.156-22.609c-7.172-9.922-12.703-21.891-16.688-35.953    c-4-14.047-5.969-30.062-5.969-48.016c0-25.609,1.969-47.392,5.969-65.484c4-18.031,9.719-32.641,17.156-43.844    c7.469-11.141,16.406-19.281,26.875-24.422c10.5-5.125,22.156-7.734,35.155-7.734c10.188,0,19.688,1.844,28.359,5.5    c8.688,3.719,16.156,8.609,22.312,14.766c6.141,6.203,11.203,13.234,14.953,21.141c3.594,7.953,5.733,16.062,6.358,24.25    L302.922,193.656L302.922,193.656z M259.141,355.453c14.828,0,25.906-5.172,33-15.219c7.234-10.219,10.781-22.734,10.781-37.734    c0-7.297-0.906-14.281-2.641-20.938c-1.828-6.578-4.625-12.453-8.359-17.578c-3.609-5.142-8.219-9.25-13.625-12.359    C272.906,248.5,266.672,247,259.5,247c-8.797,0-16.281,1.75-22.281,5.25c-6.094,3.531-11,8.016-14.75,13.484    c-3.656,5.391-6.344,11.358-7.844,17.797c-1.469,6.484-2.266,12.766-2.266,18.969c0,15.953,4.234,28.719,12.797,38.438    C233.719,350.516,245,355.453,259.141,355.453z\"});\r\n    path2.attr({fill:activeBlue});\r\n\r\n    icon.append(path1)\r\n        .append(path2);\r\n\r\n    return icon;\r\n  }\r\n\r\n  number7(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 512 512'});\r\n\r\n    let path1 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path1.attr({d:\"M256,0C114.609,0,0,114.609,0,256c0,141.391,114.609,256,256,256c141.391,0,256-114.609,256-256   C512,114.609,397.391,0,256,0z M256,472c-119.297,0-216-96.703-216-216S136.703,40,256,40s216,96.703,216,216S375.297,472,256,472z   \"});\r\n    path1.attr({fill:activeBlue});\r\n\r\n    let path2 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path2.attr({d:\"M210.188,384c5.156-43.219,15.688-83.281,31.562-120.266c15.844-37.017,36.953-72.328,63.391-105.828v-0.438H176V128h160    v29.469c-13.047,17.516-24.922,35.875-35.562,55.031c-10.75,19.219-20.155,38.5-28.155,58    c-7.984,19.484-14.5,38.953-19.531,58.234c-5.047,19.281-8.344,37.75-10,55.266H210.188z\"});\r\n    path2.attr({fill:activeBlue});\r\n\r\n    icon.append(path1)\r\n        .append(path2);\r\n\r\n    return icon;\r\n  }\r\n\r\n  number8(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 512 512'});\r\n\r\n    let path1 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path1.attr({d:\"M256,0C114.609,0,0,114.609,0,256c0,141.391,114.609,256,256,256c141.391,0,256-114.609,256-256   C512,114.609,397.391,0,256,0z M256,472c-119.297,0-216-96.703-216-216S136.703,40,256,40s216,96.703,216,216S375.297,472,256,472z   \"});\r\n    path1.attr({fill:activeBlue});\r\n\r\n    let path2 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path2.attr({d:\"M327.172,271.406c-3.094-5.688-7.219-10.688-12.141-15c-4.892-4.25-10.75-7.531-17.547-9.906    c9.812-4.984,17.766-12.109,23.875-21.359c6.25-9.266,9.297-21.047,9.297-35.484c0-8.516-1.672-16.516-5.142-24.016    c-3.469-7.5-8.391-14.016-14.938-19.609c-6.547-5.547-14.453-10-23.562-13.172C277.781,129.625,267.453,128,256,128    c-11.766,0-22.172,1.625-31.375,4.859c-9.125,3.172-16.938,7.625-23.344,13.172c-6.422,5.594-11.297,12.109-14.562,19.609    c-3.281,7.5-4.906,15.5-4.906,24.016c0,14.438,2.938,26.344,9,35.719c5.953,9.375,14.078,16.484,24.219,21.125    c-7.188,2.375-13.156,5.75-18.062,10.141c-4.984,4.392-8.969,9.578-12.125,15.469c-3.125,5.875-5.375,12.125-6.75,18.673    c-1.391,6.688-2.094,13.202-2.094,19.672c0,9.594,1.859,18.844,5.594,27.75c3.703,8.78,8.969,16.562,15.969,23.312    c6.984,6.75,15.375,12.234,25.219,16.267C232.656,381.984,243.656,384,256,384s23.391-2.016,33.172-6.219    c9.938-4.031,18.344-9.547,25.344-16.5c6.845-6.812,12.203-14.797,15.922-23.781c3.703-8.984,5.562-18.266,5.562-27.984    c0-6.483-0.688-12.983-2.078-19.547C332.531,283.297,330.375,277.172,327.172,271.406z M214.688,193.234    c0-9.453,3.422-17.969,10.312-25.609c6.875-7.625,17.375-11.469,31.453-11.469c7.141,0,13.328,1.078,18.531,3.094    c5.281,2.094,9.5,4.875,12.781,8.375c3.422,3.516,5.827,7.5,7.452,11.891c1.656,4.453,2.531,8.984,2.531,13.719    c0,5.266-0.906,10.266-2.75,14.922c-1.688,4.719-4.281,8.938-7.75,12.594s-7.844,6.609-13.047,8.781    c-5.267,2.219-11.188,3.344-17.75,3.344c-13.766,0-24.234-4.016-31.234-12.125C218.203,212.641,214.688,203.5,214.688,193.234z     M300.141,326.734c-1.906,5.266-4.733,10.031-8.656,14.281c-3.766,4.266-8.625,7.719-14.422,10.202    c-5.78,2.5-12.655,3.75-20.608,3.75c-6.641,0-12.828-1.25-18.641-3.75c-5.734-2.483-10.75-5.766-15.047-9.969    c-4.297-4.047-7.688-8.797-10.141-14.267c-2.469-5.469-3.734-11.188-3.734-17c0-5.938,1.047-11.75,3.141-17.688    c2.094-5.812,5-11.031,8.859-15.562c3.859-4.594,8.734-8.233,14.672-11.016c5.875-2.828,12.75-4.219,20.438-4.219    c7.469,0,14.125,1.391,20.047,4.219c5.892,2.781,10.938,6.422,14.906,11.016c3.983,4.531,7.016,9.75,9.094,15.562    c1.953,5.938,3.062,11.75,3.062,17.688C303.109,315.797,302.172,321.484,300.141,326.734z\"});\r\n    path2.attr({fill:activeBlue});\r\n\r\n    icon.append(path1)\r\n        .append(path2);\r\n\r\n    return icon;\r\n  }\r\n\r\n  number9(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 512 512'});\r\n\r\n    let path1 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path1.attr({d:\"M256,0C114.609,0,0,114.609,0,256c0,141.391,114.609,256,256,256c141.391,0,256-114.609,256-256   C512,114.609,397.391,0,256,0z M256,472c-119.297,0-216-96.703-216-216S136.703,40,256,40s216,96.703,216,216S375.297,472,256,472z   \"});\r\n    path1.attr({fill:activeBlue});\r\n\r\n    let path2 = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path2.attr({d:\"M208.594,317.016c3.188,13.517,9.125,23.422,17.875,29.422c8.672,6.017,17.656,9.017,26.688,9.017    c9.672,0,17.766-2.438,24.344-7.172c6.547-4.578,11.812-11,15.875-18.845c4.078-7.953,6.858-16.969,8.642-27.172    c1.688-10.062,2.547-20.578,2.547-31.5c-7.359,10.922-15.734,18.234-24.875,22.017c-9.094,3.922-17.969,5.733-26.531,5.733    c-9.031,0-18.219-1.983-27.281-5.969c-9.094-3.984-17.375-9.516-24.781-16.703c-7.312-7.203-13.375-15.719-18.031-25.562    c-4.69-9.813-7.065-20.782-7.065-32.813c0-12.062,1.719-23.5,5.031-34.375c3.375-10.859,8.266-20.344,14.672-28.438    c6.484-8.062,14.469-14.531,24.141-19.391c9.594-4.797,20.688-7.266,33.312-7.266c26.031,0,46.328,10,60.938,29.984    C328.688,177.969,336,206.625,336,243.875c0,15.875-1.156,32.141-3.438,48.672c-2.298,16.688-6.548,31.719-12.703,45.203    c-6.188,13.516-14.625,24.688-25.312,33.266C283.844,379.734,270.031,384,253.156,384c-8.781,0-17.469-1.234-26.125-3.734    c-8.547-2.5-16.156-6.312-22.891-11.703c-6.703-5.28-12.297-12.108-16.859-20.625c-4.562-8.5-7.203-18.905-8.094-30.922H208.594z     M253.016,269.875c6.391,0,12.546-1.406,18.266-4.375c5.844-2.969,10.766-6.984,15.016-12.125    c4.156-5.125,7.531-11.141,10.048-18.094c2.53-6.891,3.858-14.281,3.858-22.25c0-7.906-1.328-15.266-3.858-22.031    c-2.517-6.734-5.892-12.719-10.048-17.844c-4.25-5.125-9.172-9.156-15.016-12.125c-5.72-2.906-11.875-4.406-18.266-4.406    c-6.234,0-12.031,1.5-17.422,4.406c-5.344,2.969-10.109,7-14.125,12.125c-4,5.125-7.281,11.109-9.688,17.844    c-2.406,6.766-3.625,14.125-3.625,22.031c0,7.969,1.219,15.359,3.625,22.25c2.406,6.953,5.688,12.969,9.688,18.094    c4.016,5.141,8.781,9.156,14.125,12.125C240.984,268.469,246.781,269.875,253.016,269.875z\"});\r\n    path2.attr({fill:activeBlue});\r\n\r\n    icon.append(path1)\r\n        .append(path2);\r\n\r\n    return icon;\r\n  }\r\n\r\n  // UI\r\n\r\n  close(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 47.971 47.971'});\r\n\r\n    let path = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path.attr({d:\"M28.228,23.986L47.092,5.122c1.172-1.171,1.172-3.071,0-4.242c-1.172-1.172-3.07-1.172-4.242,0L23.986,19.744L5.121,0.88   c-1.172-1.172-3.07-1.172-4.242,0c-1.172,1.171-1.172,3.071,0,4.242l18.865,18.864L0.879,42.85c-1.172,1.171-1.172,3.071,0,4.242   C1.465,47.677,2.233,47.97,3,47.97s1.535-0.293,2.121-0.879l18.865-18.864L42.85,47.091c0.586,0.586,1.354,0.879,2.121,0.879   s1.535-0.293,2.121-0.879c1.172-1.171,1.172-3.071,0-4.242L28.228,23.986z\"});\r\n    path.attr({fill:lightGrey});\r\n\r\n    icon.append(path);\r\n    return icon;\r\n\r\n  }\r\n\r\n  whiteClose(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 47.971 47.971'});\r\n\r\n    let path = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));\r\n    path.attr({d:\"M28.228,23.986L47.092,5.122c1.172-1.171,1.172-3.071,0-4.242c-1.172-1.172-3.07-1.172-4.242,0L23.986,19.744L5.121,0.88   c-1.172-1.172-3.07-1.172-4.242,0c-1.172,1.171-1.172,3.071,0,4.242l18.865,18.864L0.879,42.85c-1.172,1.171-1.172,3.071,0,4.242   C1.465,47.677,2.233,47.97,3,47.97s1.535-0.293,2.121-0.879l18.865-18.864L42.85,47.091c0.586,0.586,1.354,0.879,2.121,0.879   s1.535-0.293,2.121-0.879c1.172-1.171,1.172-3.071,0-4.242L28.228,23.986z\"});\r\n    path.attr({fill:'#ffffff'});\r\n\r\n    icon.append(path);\r\n    return icon;\r\n\r\n  }\r\n\r\n  plus(){\r\n\r\n    let icon = $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));\r\n    icon.attr({viewBox:'0 0 42 42'});\r\n\r\n    let path = $(document.createElementNS('http://www.w3.org/2000/svg', 'polygon'));\r\n    path.attr({points:\"42,19 23,19 23,0 19,0 19,19 0,19 0,23 19,23 19,42 23,42 23,23 42,23 \"});\r\n    path.attr({fill:lightGrey});\r\n\r\n    icon.append(path);\r\n    return icon;\r\n\r\n  }\r\n\r\n}\r\n\r\n module.exports = new Icons();\r\n\n\n//# sourceURL=webpack:///./controllers/icons/icons.js?");

/***/ }),

/***/ "./controllers/index.js":
/*!******************************!*\
  !*** ./controllers/index.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\n\r\n// Hides and displays left menu depending on screen resolution.\r\nconst leftMenuHandler = __webpack_require__(/*! ./menus/left_menu */ \"./controllers/menus/left_menu.js\");\r\n\r\n// Applies click events to top bar elements.\r\nconst topBarHandler = __webpack_require__(/*! ./menus/top_bar */ \"./controllers/menus/top_bar.js\");\r\n\r\nconst Shortcuts = __webpack_require__(/*! ./shortcuts/shortcuts */ \"./controllers/shortcuts/shortcuts.js\");\r\n\r\nconst TodoListController = __webpack_require__(/*! ./todoList/todoList_controller */ \"./controllers/todoList/todoList_controller.js\");\r\n\r\nconst OPTIONS = __webpack_require__(/*! ./optionHandler/optionHandler.js */ \"./controllers/optionHandler/optionHandler.js\");\r\n\r\n//Sandbox. To delete when phase 1 is ready.\r\nconst SandBox = __webpack_require__(/*! ./../sandBox/sandbox.js */ \"./sandBox/sandbox.js\");\r\n\r\n// Not nice, but this was the only way I found so far\r\n// to display the content div correctly from the very\r\n// beginning.\r\n$('#content').css('min-height',$( window ).height()+'px');\r\n\r\n\r\n// Generate habit tasks (if necessary) and print todo list.\r\n// True: display list with a fadein effect.\r\n const TodoListMaster = new TodoListController();\r\n TodoListMaster.generateAndDisplayTasks(true);\r\n\r\n\r\n$(document).ready(function(){\r\n\r\n\r\n\r\n  //Set main page Shortcuts\r\n  Shortcuts.setMainPageShortcuts();\r\n\r\n\r\n});\r\n\n\n//# sourceURL=webpack:///./controllers/index.js?");

/***/ }),

/***/ "./controllers/menus/left_menu.js":
/*!****************************************!*\
  !*** ./controllers/menus/left_menu.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*jshint esversion: 6 */\r\n\r\n/**\r\n * @Module\r\n * In charge of displaying and hidding the main left menu.\r\n */\r\n\r\n//User interface elements\r\nconst leftMenuIconHolder = $('#top_bar_menu_icon_container');\r\nconst leftMenu = $(\"#left_menu\");\r\nconst content = $(\"#content\");\r\nconst leftMenuIcon = $(\"#top_bar_menu_icon\");\r\n\r\n\r\n//Shows and hides left menu in mobile version.\r\nleftMenuIconHolder.on('click', function(){\r\n  if ($( window ).width()<950){\r\n    if(leftMenu.hasClass(\"show_left_menu\")){\r\n      leftMenuHide(leftMenu,content,leftMenuIcon);\r\n    }else{\r\n      leftMenuShow(content,leftMenu,leftMenuIcon);\r\n    }\r\n  }\r\n});\r\n\r\n\r\n//Removes mobile left menu when screen is enlarged to PC size.\r\n$( window ).resize(function() {\r\n if($( window ).width()>950 &&  leftMenu.hasClass(\"show_left_menu\")){\r\n   leftMenuHide(leftMenu,content,leftMenuIcon);\r\n }\r\n});\r\n\r\n\r\nfunction leftMenuHide(){\r\n  leftMenu.removeClass(\"show_left_menu\");\r\n  content.removeClass(\"grey_content\");\r\n  leftMenuIcon.attr(\"src\", \"/assets/btn_topbar_menuicon.svg\");\r\n}\r\n\r\n\r\nfunction leftMenuShow(){\r\n  content.addClass(\"grey_content\");\r\n  leftMenu.addClass(\"show_left_menu\");\r\n  leftMenuIcon.attr(\"src\", \"/assets/btn_top_close_menu.svg\");\r\n}\r\n\n\n//# sourceURL=webpack:///./controllers/menus/left_menu.js?");

/***/ }),

/***/ "./controllers/menus/task_menu.js":
/*!****************************************!*\
  !*** ./controllers/menus/task_menu.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\n\r\nconst Shortcuts = __webpack_require__(/*! ./../shortcuts/shortcuts */ \"./controllers/shortcuts/shortcuts.js\");\r\nconst ProgressForm = __webpack_require__(/*! ./../forms/add_progress_form */ \"./controllers/forms/add_progress_form.js\");\r\nconst NotesForm = __webpack_require__(/*! ./../forms/add_note_form */ \"./controllers/forms/add_note_form.js\");\r\nconst Icons = __webpack_require__(/*! ./../icons/icons.js */ \"./controllers/icons/icons.js\");\r\nconst OPTIONS = __webpack_require__(/*! ./../optionHandler/optionHandler.js */ \"./controllers/optionHandler/optionHandler.js\");\r\n\r\n\r\nlet listController;\r\nlet swipeController;\r\nlet todo;\r\nlet thisMenu;\r\n\r\n\r\n//Menu buttons\r\nlet options = {\r\n  edit:{\r\n    text: 'Edit',\r\n    src: Icons.edit(),\r\n    fun: (todo) => {\r\n      alert('Edit. Cooming soon');\r\n      console.log(todo);\r\n    }\r\n  },\r\n  pending:{\r\n    text: 'Pending',\r\n    src: Icons.pending(),\r\n    fun: (todo) => {\r\n      closeTaskMenu();\r\n      listController.updateTaskProgress(todo._id, {status:'pending'});\r\n      OPTIONS.removeTodoById(todo._id);\r\n\r\n      // Removes object and minimizes list header if went empty.\r\n      swipeController.minimize(todo._id);\r\n      }\r\n  },\r\n  remove:{\r\n    text: 'Remove',\r\n    src: Icons.delete(),\r\n    fun: (todo) => {\r\n      closeTaskMenu();\r\n      listController.removeTodoFromDb(todo._id);\r\n\r\n      // Removes object and minimizes list header if went empty.\r\n      swipeController.minimize(todo._id);\r\n\r\n    }\r\n  },\r\n  progress:{\r\n    text: 'Progress',\r\n    src: Icons.progress(),\r\n    fun: (todo) => {\r\n      closeTaskMenu();\r\n      let progressForm = new ProgressForm(listController, swipeController);\r\n      progressForm.displayForm(todo);\r\n    }\r\n  },\r\n  notes:{\r\n    text: 'Notes',\r\n    src: Icons.notes(),\r\n    fun: (todo) => {\r\n      closeTaskMenu();\r\n      let NotesF = new NotesForm(listController);\r\n      NotesF.displayForm(todo);\r\n    }\r\n  },\r\n};\r\n\r\n\r\n\r\nmodule.exports = class TaskMenu{\r\n  constructor(listControl, currentTodo, swipeControl){\r\n\r\n    listController = listControl;\r\n    todo = currentTodo;\r\n    swipeController = swipeControl;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  /**\r\n   * displayTaskMenu - Loads elegible buttons, print menu,\r\n   * set a different background for the current task\r\n   * and set the different menu closing methods.\r\n   *\r\n   * @param  {type} elm description\r\n   * @return {type}     description\r\n   */\r\n  displayTaskMenu(elm){\r\n\r\n    // Disable main page shortcuts.\r\n    Shortcuts.removeMainPageShortctus();\r\n\r\n    // Load menu bottons.\r\n    let options = ['notes', 'edit','pending', 'remove'];\r\n    if(todo.hours!='Score'){options.unshift('progress');}\r\n\r\n    // Build menu with the passed options.\r\n    $(document.body).append(buildMenu(options, elm));\r\n\r\n    //Hightlights selected list todo.\r\n    $(`#${todo._id}`).css('background-color','#f7f9fc');\r\n\r\n    // Closes menu when clicking outside.\r\n    setCloseEvents();\r\n\r\n  }\r\n};\r\n\r\n\r\n\r\n/**\r\n * buildMenu - Builds and returns menu inside a jquery element.\r\n * @private\r\n * @param  {Object} options global variable inside this module\r\n * @param {jquery}  jquery element that triggered the action.\r\n * @return {$}      jquery dom element.\r\n */\r\nfunction buildMenu(options, elm){\r\n\r\n  // Div for setting menu position\r\n  thisMenu = $('<div>', {\r\n    class:'task_menu_floater',\r\n    id:'task_menu_floater',\r\n  });\r\n\r\n  // First visible element\r\n  let innerHolder = $('<div>',{\r\n    class:'task_menu_innerHolder'});\r\n\r\n  let menuTable = $('<table>',{\r\n    class:'task_menu_table'});\r\n\r\n  let optTbody = $('<tbody>',{});\r\n\r\n  $.each( options, ( index, option ) => {\r\n    optTbody.append(buildMenuRow(option));\r\n  });\r\n\r\n  // Menu Assemble!\r\n  menuTable.append(optTbody);\r\n  innerHolder.append(menuTable);\r\n  thisMenu.append(innerHolder);\r\n\r\n  // Get icon position\r\n  let leftPos = elm.offset().left;\r\n  let topPos = elm.offset().top;\r\n\r\n  // Adjust left value if menu goes out of the screen.\r\n  // 185 is the width of the contextmenu.\r\n  if ((leftPos + 185 ) > $( window ).width()){\r\n\r\n    //33 is added to align the menu to the right side of\r\n    // the icon.\r\n    leftPos = leftPos - 185 + 33;\r\n  }\r\n\r\n  // Apply values.\r\n  thisMenu.css({top:topPos + 32, left: leftPos + 13});\r\n\r\n  return thisMenu;\r\n\r\n}\r\n\r\n\r\n/**\r\n * buildMenuRow - Builds and returns row for passed menu option.\r\n * Due to my severe lazyness, this method reuses the same classes\r\n * as the drop down menu from the add new task modal.\r\n *\r\n * @param  {Object} option ex:{text: '',src: '', fun: ()\r\n * @return {$}       jquery dom element.\r\n */\r\nfunction buildMenuRow(optionName) {\r\n\r\n  let option = options[optionName];\r\n\r\n  //Option icon\r\n  let rowIcon = option.src;\r\n  rowIcon.addClass('addTask_tableOption_icon');\r\n\r\n\r\n  let leftPart = $('<div>',{\r\n    class:'addTask_tableOption_leftPart'});\r\n  leftPart.append(rowIcon);\r\n\r\n  //Option text\r\n\r\n  let rightPart = $('<div>',{\r\n    class:'addTask_tableOption_rightPart',\r\n    text: option.text});\r\n\r\n  //Option containers\r\n\r\n  let emptyDiv = $('<div>');\r\n  emptyDiv.css('display','flex');\r\n  emptyDiv.css('align-items','center');\r\n  emptyDiv.append(leftPart).append(rightPart);\r\n\r\n  let optTbCol = $('<td>',{\r\n    class:'addTask_tableOption'});\r\n  optTbCol.append(emptyDiv);\r\n\r\n  let optTbRow = $('<tr>');\r\n\r\n  optTbRow.append(optTbCol);\r\n\r\n  // Add on click event\r\n\r\n  optTbRow.click( () => {\r\n    option.fun(todo);\r\n  });\r\n\r\n  // Add mouseover event\r\n  optTbRow.mouseenter(()=>{optTbRow.css('background-color','#ededed');});\r\n  optTbRow.mouseleave(()=>{optTbRow.css('background-color','white');});\r\n\r\n  return optTbRow;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * setCloseEvents - Adds click event so the menu is removed from\r\n * the screen when the user clicks outside the menu.\r\n */\r\nfunction setCloseEvents() {\r\n\r\n\r\n  // Close menu when clicking outside.\r\n  $(document).click((e) =>{\r\n    if(e.target != thisMenu ){\r\n      closeTaskMenu();\r\n      restoreShortcuts();\r\n    }\r\n  });\r\n\r\n  // Close menu when clicking escape key.\r\n  // (we remove keydowns before to avoid possible duplicates)\r\n  $(document).off('keydown');\r\n  $(document).keydown((e) => {\r\n    if (e.keyCode == 27) {\r\n      closeTaskMenu();\r\n      restoreShortcuts();}\r\n  });\r\n\r\n}\r\n\r\n/**\r\n * @private\r\n * closeTaskMenu - Removes menu from screen and sets original shortcuts.\r\n */\r\nfunction closeTaskMenu(){\r\n\r\n  thisMenu.remove();\r\n  $(`#${todo._id}`).css('background-color','white');\r\n  $(document).off('click');\r\n\r\n}\r\n\r\n\r\n/**\r\n * restoreShortcuts - Set main page shortcuts.\r\n *  (Remove first to avoid any possible duplicates. )\r\n * @return {type}  description\r\n */\r\nfunction restoreShortcuts(){\r\n  Shortcuts.removeMainPageShortctus();\r\n  Shortcuts.setMainPageShortcuts();\r\n}\r\n\n\n//# sourceURL=webpack:///./controllers/menus/task_menu.js?");

/***/ }),

/***/ "./controllers/menus/top_bar.js":
/*!**************************************!*\
  !*** ./controllers/menus/top_bar.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\n\r\nconst addTaksForm = __webpack_require__(/*! ./../forms/add_task_form */ \"./controllers/forms/add_task_form.js\");\r\nconst Shortcuts = __webpack_require__(/*! ./../shortcuts/shortcuts */ \"./controllers/shortcuts/shortcuts.js\");\r\nconst Hints = __webpack_require__(/*! ./../hints/help_hint */ \"./controllers/hints/help_hint.js\");\r\n\r\n/**\r\n * @Module\r\n * Applies click events to top bar elements.\r\n */\r\n\r\n\r\n\r\n //Displays add task form\r\n $('#top_bar_add_btn').on('click', function(){\r\n     Shortcuts.removeMainPageShortctus();\r\n     addTaksForm.showModal();\r\n });\r\n\r\n\r\n //Add date to top bar\r\n const todaysDate = new Date();\r\n\r\n function short_month(dt){\r\n   let shortMonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n   return shortMonths[dt.getMonth()];}\r\n\r\n const todaysDateString = short_month(todaysDate) + ' ' + todaysDate.getDate() + ', ' + todaysDate.getFullYear();\r\n $('#top_bar_center').text(todaysDateString);\r\n\r\n\r\n //Load hints into the top bar buttons.\r\n Hints.loadHints('.hintHolder');\r\n\n\n//# sourceURL=webpack:///./controllers/menus/top_bar.js?");

/***/ }),

/***/ "./controllers/messageBox/messageBox.js":
/*!**********************************************!*\
  !*** ./controllers/messageBox/messageBox.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*jshint esversion: 6 */\r\n\r\nmodule.exports = class MsgBox{\r\n  constructor(){\r\n  }\r\n\r\n\r\n  /**\r\n   * showMsgBox - temporarily displays a floating message with the color\r\n   * and in the position passed by the caller.\r\n   *\r\n   * @param  {string} msg      Text to display in the floating message box.\r\n   * @param  {string} type     Can be 'error','notice','goal'\r\n   * @param  {string} position Can be 'up', 'down'\r\n   */\r\n  showMsgBox(msg, type, position){\r\n\r\n    let targetClass;\r\n\r\n    // Set msgbox background color.\r\n    switch (type) {\r\n      case 'error':\r\n        targetClass = 'inner_msgBox_error';\r\n        break;\r\n      default:\r\n        targetClass = 'inner_msgBox';\r\n    }\r\n\r\n    // Construct msgbox container\r\n    let msgBoxWrapper = $('<div>', {\r\n      class: 'floating_msgBox',\r\n      id:'floating_msgBox'});\r\n\r\n    // If mobile, reduce top value.\r\n    let topDistance = '82px';\r\n    if($(window).width()<950){\r\n      topDistance='27px';\r\n    }\r\n\r\n    // Set msbgox position\r\n    if(position=='up'){\r\n      msgBoxWrapper.css('top',topDistance);\r\n    }else{\r\n      msgBoxWrapper.css('bottom','40px');\r\n    }\r\n\r\n\r\n    // Construct inner div\r\n    let msgBox = $('<div>', {\r\n      class: targetClass});\r\n\r\n    msgBox.html(msg);\r\n\r\n    // Remove any possible previous msg to avoid conflicts\r\n    $('#floating_msgBox').remove();\r\n\r\n    // Append to body\r\n    msgBoxWrapper.append(msgBox);\r\n    $(document.body).append(msgBoxWrapper);\r\n\r\n    //Apply animation\r\n    if(type=='goal'){\r\n\r\n      $('#floating_msgBox').hide().fadeIn(200).delay(2500).fadeOut(200, function(){\r\n        $(this).remove();\r\n      });\r\n\r\n    }else{\r\n\r\n      $('#floating_msgBox').hide().fadeIn(800).delay(4000).fadeOut(1000, function(){\r\n        $(this).remove();\r\n      });\r\n    }\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack:///./controllers/messageBox/messageBox.js?");

/***/ }),

/***/ "./controllers/optionHandler/optionHandler.js":
/*!****************************************************!*\
  !*** ./controllers/optionHandler/optionHandler.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\nconst EventEmitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\r\nconst DbHandler = __webpack_require__(/*! ./../DbHandler/DbHandler */ \"./controllers/DbHandler/DbHandler.js\");\r\n\r\n/** @module\r\n *  Module in charge of reading and updating the options set by the user.\r\n */\r\n\r\n let OPTIONS;\r\n let db;\r\n let userId;\r\n\r\nclass Options extends EventEmitter{\r\n  constructor(){\r\n    super();\r\n\r\n    // User data and options are stored at the very end of the main view ejs file.\r\n    // Before the user gets see it, we retrieve the data form the ejs and\r\n    // remove the element from the view to leave no trace.\r\n    let user = JSON.parse($('#variableJSON').text());\r\n    $('#variableJSON').remove();\r\n\r\n    OPTIONS = user.options;\r\n    userId = user._id;\r\n\r\n    // Loads dbhandler so this class can send options updates to the db.\r\n    db = new DbHandler();\r\n\r\n  }\r\n\r\n  get id(){\r\n    return userId;\r\n  }\r\n\r\n  get options(){\r\n    return OPTIONS;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * registerTodos - Saves all received todos into the todoList array\r\n   * inside the options object.\r\n   * This array is used later to remember in which order the todos must\r\n   * be displayed in the todo main list.\r\n   *\r\n   * @param  {[Object]} todos\r\n   */\r\n  registerTodos(todos){\r\n      for (let i=0; i< todos.length;i++){addTodo(todos[i],'');}\r\n      updateDatabase();\r\n  }\r\n\r\n\r\n  /**\r\n   * removeTodoFromList - Removes todo from todolist in option object.\r\n   *\r\n   * @param  {String} id todo id\r\n   */\r\n  removeTodoById(id){\r\n    removeTodo(id);\r\n    updateDatabase();\r\n  }\r\n\r\n  /**\r\n   * updateTodoPosition - Updates todo index and date slow in war file\r\n   * todoList array when user changes the position in the main list.\r\n   *\r\n   * @param  {object} updatedTodo todo item received by the db.\r\n   * @param  {type} referenceId id of the todo list item next to wich the new todo is going to be placed in.\r\n   * @param  {type} over        indicates if the new todo is over the reference todo or not in the list.\r\n   */\r\n  updateTodoIndex(updatedTodo, referenceId, over){\r\n\r\n    removeTodo(updatedTodo._id);\r\n    addTodo(updatedTodo, referenceId, over);\r\n    updateDatabase();\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * updateDatabase - Patches data into database afer waiting 1000s\r\n * to avoid slowing down other proceses.\r\n */\r\nfunction updateDatabase(){\r\n  setTimeout( () => {\r\n    db.updateOptions(userId, {todoList: OPTIONS.todoList});\r\n  }, 0);\r\n}\r\n\r\n\r\n\r\n/**\r\n * removeTodo - Removes single todo from optiopn todolist array.\r\n *\r\n * @param  {String} id todo id\r\n */\r\nfunction removeTodo(id){\r\n\r\n  // Loop war file todolist object until you find the corresponding item.\r\n  for(let i=0; i<OPTIONS.todoList.length; i++){\r\n    for(let j=0;j<OPTIONS.todoList[i].todos.length;j++){\r\n      if(OPTIONS.todoList[i].todos[j].id==id){\r\n\r\n        // If the date only has one element, remove the whole date item.\r\n        if(OPTIONS.todoList[i].todos.length==1){\r\n          OPTIONS.todoList.splice( i, 1 );\r\n\r\n        // If the date has multiple elements, remove the target item and\r\n        // update the index of the rest of the elements.\r\n        }else{\r\n          let indexToReplace = OPTIONS.todoList[i].todos[j].index;\r\n          OPTIONS.todoList[i].todos.splice( j, 1 );\r\n          for(let k=0; k<OPTIONS.todoList[i].todos.length; k++){\r\n            if(OPTIONS.todoList[i].todos[k].index>indexToReplace){\r\n              OPTIONS.todoList[i].todos[k].index--;\r\n            }\r\n          }\r\n        }\r\n      break;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * addTodo - Adds single todo to war file todoList array, finding the\r\n * right date slot and index value for it.\r\n *\r\n * @param  {object} todo      db todo item.\r\n * @param  {string} referenceId  id of the todo list item next to wich the new todo is going to be placed in.\r\n * @param  {boolean} over      indicates if the new todo is over the reference todo or not in the list.\r\n * @return {type}             description\r\n */\r\nfunction addTodo(todo, referenceId, over){\r\n\r\n  // Item to be added to the war file todolist array.\r\n  const newTodo = {id: todo._id,\r\n                  index: 0,\r\n                  name:todo.name};\r\n\r\n  // If date exists in current list, returns true.\r\n  let dateExists = false;\r\n\r\n  // In case date does not exist in war file todo list, we use\r\n  // this variable to find the index in which we should add the\r\n  // new item so all items in the war file todo list are in a\r\n  // chornological order.\r\n  let targetIndex = 0;\r\n\r\n  // Used to compare dates between the new todo and the war file.\r\n  let todoDate = new Date(todo.dueTo);\r\n\r\n  // Check item by item in the todoList of the war file if\r\n  // the date matches.\r\n  // If the date matches, the new todo is added to that item array\r\n  // in the last position. If it doesn't match the new todo is added\r\n  // as a new date item to the list war.\r\n  for (let i=0; i<OPTIONS.todoList.length; i++){\r\n\r\n    let warDate = new Date(OPTIONS.todoList[i].date);\r\n    let sameDay = (todoDate.getDate() == warDate.getDate())? true:false;\r\n    let sameMonth = (todoDate.getMonth() == warDate.getMonth())? true:false;\r\n    let sameYear = (todoDate.getFullYear() == warDate.getFullYear())? true:false;\r\n\r\n    if(sameDay && sameMonth && sameYear){\r\n        dateExists=true;\r\n\r\n        switch (referenceId) {\r\n\r\n          // If referenceId is empty, just insert new todo at the end.\r\n          case '':\r\n            newTodo.index = OPTIONS.todoList[i].todos.length;\r\n            break;\r\n\r\n          // If received 'first', add new todo as the first item.\r\n          case 'first':\r\n            for (let j=0;j<OPTIONS.todoList[i].todos.length;j++){\r\n              OPTIONS.todoList[i].todos[j].index++;}\r\n            newTodo.index = 0;\r\n          break;\r\n\r\n          // Else we assume a proper reference id was received.\r\n          // Find the index of the reference, insert the new todo\r\n          // and adjust the rest of indexes based on the given position.\r\n          default:\r\n          let reference = OPTIONS.todoList[i].todos.find (obj => {\r\n            return obj.id == referenceId;});\r\n          newTodo.index = (over) ? reference.index : reference.index+1;\r\n          for (let k=0; k < OPTIONS.todoList[i].todos.length; k++){\r\n            if(OPTIONS.todoList[i].todos[k].index>=newTodo.index){\r\n              OPTIONS.todoList[i].todos[k].index++;\r\n            }\r\n          }\r\n        }\r\n        OPTIONS.todoList[i].todos.push(newTodo);\r\n\r\n    }\r\n    // We find out the location in which we would add the new item\r\n    // inside the war file todolist in case the date does not\r\n    // exist.\r\n    targetIndex = (todoDate > warDate) ? i+1 : targetIndex;\r\n    if (dateExists) { break; }\r\n  }\r\n\r\n  // If date does not exist, we add new todo into corresponding\r\n  // chronological order.\r\n  if(dateExists==false){\r\n    let dateAndTodo = {\r\n      date: todo.dueTo,\r\n      todos:[newTodo]\r\n    };\r\n\r\n    OPTIONS.todoList.splice(targetIndex, 0, dateAndTodo);\r\n  }\r\n}\r\n\r\n module.exports = new Options();\r\n\n\n//# sourceURL=webpack:///./controllers/optionHandler/optionHandler.js?");

/***/ }),

/***/ "./controllers/otherMethods/setCaret.js":
/*!**********************************************!*\
  !*** ./controllers/otherMethods/setCaret.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n// Places the curlet at the end in contend editable elements\r\nexports.setEndOfContenteditable = function setEndOfContenteditable(contentEditableElement)\r\n{\r\n    var range,selection;\r\n    if(document.createRange) //Firefox, Chrome, Opera, Safari, IE 9+\r\n    {\r\n        range = document.createRange(); //Create a range (a range is a like the selection but invisible)\r\n        range.selectNodeContents(contentEditableElement); //Select the entire contents of the element with the range\r\n        range.collapse(false); //collapse the range to the end point. false means collapse to end rather than the start\r\n        selection = window.getSelection();//get the selection object (allows you to change selection)\r\n        selection.removeAllRanges();//remove any selections already made\r\n        selection.addRange(range);//make the range you have just created the visible selection\r\n    }\r\n    else if(document.selection)//IE 8 and lower\r\n    {\r\n        range = document.body.createTextRange();//Create a range (a range is a like the selection but invisible)\r\n        range.moveToElementText(contentEditableElement);//Select the entire contents of the element with the range\r\n        range.collapse(false);//collapse the range to the end point. false means collapse to end rather than the start\r\n        range.select();//Select the range (make it the visible selection\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./controllers/otherMethods/setCaret.js?");

/***/ }),

/***/ "./controllers/pointFactory/pointFactory.js":
/*!**************************************************!*\
  !*** ./controllers/pointFactory/pointFactory.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\nconst MsgBox = __webpack_require__(/*! ./../messageBox/messageBox */ \"./controllers/messageBox/messageBox.js\");\r\n\r\nlet OPTIONS;\r\n\r\nmodule.exports = class PointFactory{\r\n  constructor(options, db){\r\n\r\n  this._db = db;\r\n  this._messanger = new MsgBox();\r\n  OPTIONS = options;\r\n  }\r\n\r\n\r\n//Updated todo example:\r\n  // category: \"\"\r\n  // categoryId: \"\"\r\n  // dueTo: \"2019-01-12T06:12:33.000Z\"\r\n  // frequency: 0\r\n  // habitId: \"\"\r\n  // hours: \"Fast task\"\r\n  // learning: false\r\n  // name: \"ki qye sda\"\r\n  // nextTaskDate: null\r\n  // progress: 1\r\n  // project: \"\"\r\n  // projectId: \"\"\r\n  // status: \"done\"\r\n  // type: \"task\"\r\n  // urgency: \"Normal\"\r\n  // user: \"tally\"\r\n  // __v: 0\r\n  // _id: \"5c3985514dd5781c80920943\"\r\n\r\n\r\n  /**\r\n   * generatePoints - Receives a completed todo and the number of points\r\n   * cleared since its last progress update. Then saves those points\r\n   * into one Point item in the point collection of the database. Then it informs\r\n   * the user through a notice message.\r\n   *\r\n   * @param  {Object} updatedTodo Todo received from the db.\r\n   * @param  {Number} points      1,2,3,4...\r\n   */\r\n  generatePoints(updatedTodo, points){\r\n\r\n    let today = new Date();\r\n    let flatToday = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0);\r\n\r\n    let pointDbItem = {\r\n      points: points,\r\n      taskId : updatedTodo._id,\r\n      categoryId: updatedTodo.categoryId,\r\n      projectId: updatedTodo.projectId,\r\n      date: flatToday,\r\n      user: OPTIONS.id\r\n    };\r\n\r\n    const promiseToUpdate = this._db.addPoints([pointDbItem]);\r\n\r\n    promiseToUpdate.done((points)=>{\r\n      this.reportScore(points[0].points);\r\n\r\n    }).fail((err)=>{\r\n      this._messanger.showMsgBox('Failed to save point data\\ninto database.','error','down');\r\n      console.log(err);\r\n    });\r\n\r\n  }\r\n\r\n  reportScore(points){\r\n\r\n    let singularCase;\r\n    let plurarCase;\r\n\r\n    if(points>0){\r\n      singularCase = `You got <span class=\"msg_highlight\">${points}</span> point!`;\r\n      plurarCase = `You got <span class=\"msg_highlight\">${points}</span> points!`;\r\n\r\n      let msg = (points>1) ? plurarCase : singularCase;\r\n      this._messanger.showMsgBox(msg,'goal','down');\r\n\r\n    }else{\r\n\r\n      let positiveNumber = Math.abs(points);\r\n      singularCase = `You lost <span class=\"msg_highlight\">${positiveNumber}</span> point!`;\r\n      plurarCase = `You lost <span class=\"msg_highlight\">${positiveNumber}</span> points!`;\r\n\r\n      let msg = (positiveNumber>1) ? plurarCase : singularCase;\r\n      this._messanger.showMsgBox(msg,'goal','down');\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * savePointWithId - Generates a 1 point using the passed id as\r\n   * the point taskId. Only returns an error msg if fails to save\r\n   * the point.\r\n   *\r\n   * @param  {String} pointId  task id + p + point index\r\n   * @param  {Object} todo    Todo received by the app.\r\n   */\r\n  savePointWithId(pointId, todo){\r\n\r\n    let today = new Date();\r\n    let flatToday = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0);\r\n\r\n    let pointDbItem = {\r\n      points: 1,\r\n      taskId : pointId,\r\n      categoryId: todo.categoryId,\r\n      projectId: todo.projectId,\r\n      date: flatToday,\r\n      user: OPTIONS.id\r\n    };\r\n\r\n    const promiseToUpdate = this._db.addPoints([pointDbItem]);\r\n\r\n    promiseToUpdate.done((point)=>{}).fail((err)=>{\r\n      this._messanger.showMsgBox('Failed to save point data\\ninto database.','error','down');\r\n      console.log(err);\r\n    });\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * removePointWithId - Removes indicated point from the db.\r\n   *\r\n   * @param  {String} pointId task id + p + point index\r\n   */\r\n  removePointWithId(pointId){\r\n\r\n    let pointDbItem = {taskId : pointId};\r\n\r\n    const promiseToUpdate = this._db.removePoint(pointDbItem);\r\n\r\n    promiseToUpdate.done((point)=>{}).fail((err)=>{\r\n      this._messanger.showMsgBox('Failed to remove point\\nfrom database.','error','down');\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n};\r\n\n\n//# sourceURL=webpack:///./controllers/pointFactory/pointFactory.js?");

/***/ }),

/***/ "./controllers/shortcuts/shortcuts.js":
/*!********************************************!*\
  !*** ./controllers/shortcuts/shortcuts.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\nconst addTaksForm = __webpack_require__(/*! ./../forms/add_task_form */ \"./controllers/forms/add_task_form.js\");\r\n\r\n\r\nclass Shortcuts{\r\n  constructor(){\r\n    this._mainPage = $(document);\r\n  }\r\n\r\n  setMainPageShortcuts(){\r\n\r\n    this._mainPage.keydown((e) =>{\r\n\r\n      //(q) Opens addtask panel.\r\n      if (e.keyCode == 81){\r\n        e.preventDefault();\r\n        this._mainPage.off('keydown');\r\n        addTaksForm.showModal();\r\n      }\r\n  });\r\n  }\r\n\r\n  removeMainPageShortctus(){\r\n    this._mainPage.off('keydown');\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = new Shortcuts();\r\n\n\n//# sourceURL=webpack:///./controllers/shortcuts/shortcuts.js?");

/***/ }),

/***/ "./controllers/swipe/swipe.js":
/*!************************************!*\
  !*** ./controllers/swipe/swipe.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\nconst MsgBox = __webpack_require__(/*! ./../messageBox/messageBox */ \"./controllers/messageBox/messageBox.js\");\r\nconst ScoreForm = __webpack_require__(/*! ./../forms/add_score_form */ \"./controllers/forms/add_score_form.js\");\r\n\r\nmodule.exports = class Swipe{\r\n\r\n  /**\r\n   * constructor - Using the public script slip, it addes the slip(swipe)\r\n   * functionality to the list items.\r\n   *\r\n   */\r\n  constructor(listController){\r\n\r\n    this._messenger = new MsgBox();\r\n\r\n    this._listController = listController;\r\n\r\n    // Used for getting specific list items using the index.\r\n    this._mainListItems = $('#mainList li');\r\n\r\n    // Used to add event listeners to the swipe acctions\r\n    this._ol= document.getElementById('mainList');\r\n\r\n    this.preventReorder();\r\n    this.saveSwipeDirection();\r\n    this.colorizeTodo();\r\n    this.cancelTodo();\r\n    this.preventSwipe();\r\n    this.enableReorder();\r\n    this.actionExecuter();\r\n    this.reorder();\r\n\r\n    new Slip(this._ol);\r\n\r\n  }\r\n\r\n\r\n\r\n/**\r\n * preventReorder - Items with the class /demo-no-reorder/cannot be\r\n * reordered in the list.\r\n *\r\n * @return nothing\r\n */\r\npreventReorder(){\r\n\r\n  this._ol.addEventListener('slip:beforereorder', function(e){\r\n      if (/demo-no-reorder/.test(e.target.className)) {\r\n          e.preventDefault();\r\n      }\r\n  }, false);\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * saveSwipeDirection - Saves the direction of the swipe.\r\n *\r\n * @return Saves index and direction of the swipped item.\r\n */\r\nsaveSwipeDirection(){\r\n\r\n  this._ol.addEventListener('slip:swipe', (e) =>{\r\n    this._direction = e.detail.direction;\r\n    this._index = e.detail.originalIndex;\r\n  },false);\r\n\r\n}\r\n\r\n\r\n/**\r\n * colorizeTodo - Changes the todo task color to green or red depending the direction.\r\n */\r\ncolorizeTodo(){\r\n\r\n  this._ol.addEventListener('slip:animateswipe',function(e){\r\n    if(e.detail.x>0){\r\n        e.target.style.opacity  = 1-(e.detail.x/600);\r\n        e.target.style.backgroundColor = 'rgb(' + [255-((e.detail.x*10)/300),255,255-((e.detail.x*10)/300)].join(',') +')';\r\n    }else{\r\n        e.target.style.opacity  = 1-(-e.detail.x/600);\r\n        e.target.style.backgroundColor = 'rgb(' + [255,255-((-e.detail.x*10)/200),255-((-e.detail.x*10)/200)].join(',') +')';\r\n    }\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * cancelTodo - If for some reason, the swipe gets cancelled, the todo item goes back to\r\n *  its original opacity and color values.\r\n *\r\n * @return {type}  description\r\n */\r\ncancelTodo(){\r\n\r\n  this._ol.addEventListener('slip:cancelswipe',function(e){\r\n    e.target.style.opacity  = 1;\r\n    e.target.style.backgroundColor = 'rgb(255,255,255)';\r\n    console.log('cancelled!');\r\n  });\r\n}\r\n\r\n\r\n\r\n/**\r\n * preventSwipe - Items with the class /demo-no-reorder/ or /INPUT/ cannot be\r\n * swipped in the list.\r\n */\r\npreventSwipe(){\r\n\r\n  this._ol.addEventListener('slip:beforeswipe', function(e){\r\n      if (e.target.nodeName == 'INPUT' || /demo-no-swipe/.test(e.target.className)) {\r\n          e.preventDefault();\r\n      }\r\n  }, false);\r\n}\r\n\r\n\r\n\r\n/**\r\n * enableReorder - This seems to be the method that enables the reorder functionality.\r\n */\r\nenableReorder(){\r\n  this._ol.addEventListener('slip:beforewait', function(e){\r\n\r\n    // When the event target is an embedded svg, the className\r\n    // does not return a string but an object. To prevent this\r\n    // method from failing trying to retrieve the clas information,\r\n    // we use typeof first to distinguish the type of element. \r\n\r\n    if(typeof e.target.className == 'string'){\r\n      if (e.target.className.indexOf('instant') > -1){\r\n        e.preventDefault();\r\n      }\r\n    }else{\r\n      if (e.target.className.animVal.indexOf('instant') > -1){\r\n        e.preventDefault();\r\n      }\r\n    }\r\n\r\n  }, false);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * actionExecuter - Execute the following actions when todos are swipped:\r\n *  Left: Marks todo as \"Removed\" and removes it from the list.\r\n *  Right: Marks todo as \"Completed\" and removes i from the list.\r\n * @return Removes the item directly from the list.\r\n */\r\nactionExecuter(){\r\n\r\n    // Removes or completes the todo depending on the direction of the swipe.\r\n    this._ol.addEventListener('slip:afterswipe', (e) =>{\r\n\r\n      if(navigator.onLine){\r\n\r\n        if(this._direction=='left'){\r\n\r\n            // Remove object from list\r\n            e.target.parentNode.removeChild(e.target);\r\n            // Remove object from db and war\r\n            this._listController.removeTodoFromDb(e.target.id);\r\n\r\n        }else{\r\n\r\n          let completedTodo = {id: e.target.id,\r\n                              hours: (e.target.getAttribute('data-hours')=='Fast task') ? 1: e.target.getAttribute('data-hours'),\r\n                              progress: e.target.getAttribute('data-progress')};\r\n\r\n          // Remove object from list\r\n          e.target.parentNode.removeChild(e.target);\r\n\r\n          if(completedTodo.hours == 'Score'){\r\n\r\n            // Get todo title so it can be displayed in the\r\n            // score popup.\r\n            let todoName = e.target.getAttribute('data-name');\r\n\r\n            // If Score type, display score modal.\r\n            let scoreForm = new ScoreForm(this._listController);\r\n            scoreForm.displayForm(completedTodo, todoName);\r\n          }else{\r\n\r\n            // Mark object as complete and extract points\r\n            this._listController.completeTodo(completedTodo);\r\n          }\r\n\r\n        }\r\n\r\n        this.minimizeHeader();\r\n\r\n        // If not connected to the Internet, restart todo and show error message.\r\n      }else{\r\n        e.target.style.opacity  = 1;\r\n        e.target.style.backgroundColor = 'rgb(255,255,255)';\r\n        this._messenger.showMsgBox('Failed to remove item. \\nCheck if there is an internet connection.','error','down');\r\n      }\r\n    }, false);\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * minimizeHeader - Minimizes header if a period went empty in the todo list.\r\n   * Reason why not asking this to the todolist_view class : Because that class\r\n   * applies changes based on the most recent status of the war file. Having\r\n   * to check the war file and reprint all the todos takes time and that is not very\r\n   * compatible with this swipe class. The animation does not look clean and fast.\r\n   *\r\n   * @return Directly changes header margin on the list (when necessary)\r\n   */\r\n  minimizeHeader(){\r\n\r\n    // Get the latest version of the list.\r\n    this._mainListItems = $('#mainList li');\r\n\r\n    // If last item in the list, we know there is no need to minimize.\r\n    // So we exit the method after getting the latest status of the list.\r\n    if(this._mainListItems.length==this._index){\r\n      return;\r\n    }\r\n\r\n    // If next item is a header, this could be a sign that the previos period went empty.\r\n    if(this._mainListItems[this._index].className=='demo-no-reorder demo-no-swipe list_header'){\r\n\r\n        // If the previous item is a header of the beginning of the list, we know the period went empty.\r\n        if(this._index==0 || this._mainListItems[this._index-1].className=='demo-no-reorder demo-no-swipe list_header'){\r\n          this._mainListItems[this._index].style.marginTop='30px';\r\n        }\r\n    }\r\n  }\r\n\r\n\r\n  minimize(passedId){\r\n      let passedListItem = document.getElementById(passedId);\r\n      this._index = nodeIndex(passedListItem);\r\n      $('#'+passedId).remove();\r\n      this.minimizeHeader();\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * maximizeHeader - Mazimizes header (adds a top margin) if the previos period\r\n   * went empty in the todo list. To make the UI look cleaner.\r\n   *\r\n   * @return {type}  description\r\n   */\r\n  maximizeHeader(){\r\n\r\n    // If last item in the list, we know there is no need to mazimize.\r\n    if(this._mainListItems.length==this._newIndex+1){\r\n      return;\r\n    }\r\n\r\n    // If next item is a header, then this header needs to be expanded.\r\n    if(this._mainListItems[this._newIndex+1].className=='demo-no-reorder demo-no-swipe list_header'){\r\n      this._mainListItems[this._newIndex+1].style.marginTop='95px';\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * reorder - description\r\n   *\r\n   * @return {type}  description\r\n   */\r\n  reorder(){\r\n\r\n    this._ol.addEventListener('slip:reorder', (e)=>{\r\n        e.target.parentNode.insertBefore(e.target, e.detail.insertBefore);\r\n\r\n        // If item position does not change, do nothing.\r\n        if(e.detail.originalIndex == e.detail.spliceIndex){\r\n          return false;\r\n        }\r\n\r\n        // Get the index before reordering.\r\n        this._index=e.detail.originalIndex;\r\n        this._newIndex = e.detail.spliceIndex;\r\n\r\n        // If the item was moved from a top to a bottom position, we added\r\n        // one to the index so the minimization method is applied to the\r\n        // correct item.\r\n        if(e.detail.originalIndex > e.detail.spliceIndex){\r\n          this._index++;\r\n        }\r\n\r\n        // Adds and removes top margin to the headers depending on if they went\r\n        // empty or not.\r\n        this.minimizeHeader();\r\n        this.maximizeHeader();\r\n\r\n        this.updateItemDate();\r\n\r\n        return false;\r\n    }, false);\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * updateItemDate - Calculates and saves the new dueTo date\r\n   * after the item was reordered.\r\n   */\r\n  updateItemDate(){\r\n\r\n    let newDate = new Date();\r\n    let referenceId;\r\n    let currentId = this._mainListItems[this._newIndex].id;\r\n    let over = true;\r\n\r\n    // If todo became the first item of the list, war index becomes 0 and\r\n    // if previos element is Today header, gets Today-1day, else gets the same\r\n    // date as the previos todo.\r\n    if(this._newIndex==0){\r\n\r\n      if(this._mainListItems[1].className=='demo-no-reorder demo-no-swipe list_header'){\r\n        newDate.setDate(newDate.getDate()-1);\r\n      }else{\r\n        newDate = new Date(this._mainListItems[1].getAttribute('data-date'));\r\n      }\r\n      referenceId='first';\r\n\r\n    // If previos list item is a header, gets the header date.\r\n    }else if(this._mainListItems[this._newIndex-1].className=='demo-no-reorder demo-no-swipe list_header'){\r\n\r\n      switch (this._mainListItems[this._newIndex-1].textContent) {\r\n        case 'Today':\r\n          break;\r\n        case 'Tomorrow':\r\n          newDate.setDate(newDate.getDate()+1);\r\n          break;\r\n        case 'To come':\r\n          newDate.setDate(newDate.getDate()+2);\r\n          break;\r\n        default:\r\n      }\r\n      referenceId='first';\r\n\r\n    // If next item in list is a todo, takes the reference id and date from it.\r\n    }else if(this._mainListItems.length>this._newIndex+1 && this._mainListItems[this._newIndex+1].className=='task_item task'){\r\n      newDate = new Date(this._mainListItems[this._newIndex+1].getAttribute('data-date'));\r\n      referenceId = this._mainListItems[this._newIndex+1].id;\r\n\r\n    // Else we assume that there is a todo right on top and we take the data from it.\r\n    }else{\r\n      newDate = new Date(this._mainListItems[this._newIndex-1].getAttribute('data-date'));\r\n      referenceId = this._mainListItems[this._newIndex-1].id;\r\n      over = false;\r\n    }\r\n\r\n\r\n\r\n    //Get dueTo container element.\r\n    let itemToUpdate = $('#'+currentId + ' .task_deadline');\r\n\r\n    function short_month(dt){\r\n      let shortMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n      return shortMonths[dt.getMonth()];\r\n    }\r\n\r\n    // Wait until margin transition has been completed to apply fade animation and change the date.\r\n    setTimeout( () => {\r\n      itemToUpdate.fadeOut(500);\r\n      setTimeout( () => {\r\n        itemToUpdate.text(short_month(newDate) + ' ' + newDate.getDate()).fadeIn(500);\r\n        this._mainListItems[this._newIndex].setAttribute('data-date', newDate);\r\n      }, 500);\r\n    }, 800);\r\n\r\n\r\n    if(navigator.onLine){\r\n\r\n      // Update index and date in db and warp file.\r\n      this._listController.updatePosition(currentId, referenceId, newDate, over);\r\n\r\n    }else{\r\n      this._messenger.showMsgBox('Failed to save the changes\\ndue to connection issues.\\nCheck your internet connection\\nand refresh the page.','error','down');\r\n    }\r\n  }\r\n\r\n};\r\n\r\nfunction nodeIndex(el) {\r\n  let i=0;\r\n  while(el.previousElementSibling ) {\r\n    el=el.previousElementSibling;\r\n    i++;\r\n  }\r\n  return i;\r\n}\r\n\n\n//# sourceURL=webpack:///./controllers/swipe/swipe.js?");

/***/ }),

/***/ "./controllers/todoList/todoList_controller.js":
/*!*****************************************************!*\
  !*** ./controllers/todoList/todoList_controller.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\nconst EventEmitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\r\nconst DbHandler = __webpack_require__(/*! ./../DbHandler/DbHandler */ \"./controllers/DbHandler/DbHandler.js\");\r\nconst TodoListView = __webpack_require__(/*! ./todoList_view */ \"./controllers/todoList/todoList_view.js\");\r\nconst HabitFactory = __webpack_require__(/*! ./../habitFactory/habitFactory */ \"./controllers/habitFactory/habitFactory.js\");\r\nconst PointFactory = __webpack_require__(/*! ./../pointFactory/pointFactory */ \"./controllers/pointFactory/pointFactory.js\");\r\nconst MsgBox = __webpack_require__(/*! ./../messageBox/messageBox */ \"./controllers/messageBox/messageBox.js\");\r\nconst OPTIONS = __webpack_require__(/*! ./../optionHandler/optionHandler.js */ \"./controllers/optionHandler/optionHandler.js\");\r\n\r\n\r\nmodule.exports = class TodoListController extends EventEmitter{\r\n  constructor(newTask){\r\n    super(newTask);\r\n\r\n    this._newTask = newTask;\r\n    this._db = new DbHandler();\r\n    this._pointFac = new PointFactory(OPTIONS, this._db);\r\n    this._habitFac = new HabitFactory(this._db);\r\n    this._view = new TodoListView(this);\r\n    this._messanger = new MsgBox();\r\n\r\n\r\n    // When creating this controller, if there is a new task loaded,\r\n    // this listener captures when the user has clicked Submit and saves\r\n    // the new todo into the db.\r\n    if (newTask){newTask.on('dateSaved', todo => this.addTodosToDataBase(todo, this._newTask.type));}\r\n\r\n\r\n\r\n    // Once one or multiple habits has been received from the db,\r\n    // requests the habit fabric to generate tasks for these habits\r\n    // (if there are).\r\n    this._db.on('habitSaved', habit => this._habitFac.generateTasks(habit));\r\n   }\r\n\r\n\r\n  /**\r\n   * addTodoToWar - Once new tasks have been saved into the database\r\n   * this method sends the tasks to the war handler so they can be\r\n   * added to the war file.\r\n   *\r\n   * @param  {object} todo Object returned by the database.\r\n   */\r\n  addTodosToWar(todos){\r\n\r\n    this._newTodoIds=[];\r\n\r\n    for(let i=0;i<todos.length;i++){\r\n      this._newTodoIds.push(todos[i]._id);\r\n    }\r\n\r\n    // Close add task modal first (if opened)\r\n    this.emit('taskSaved');\r\n\r\n    // Register new todos into the options\r\n    // That's were we register the position of each todo in the list.\r\n    OPTIONS.registerTodos(todos);\r\n\r\n    this.printActiveTodos(this._newTodoIds);\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * addTodosToDataBase - Add all passed todos to database.\r\n   *\r\n   * @param  {Array} todos Array of todo objects\r\n   */\r\n  addTodosToDataBase(todos, type){\r\n\r\n    const promiseTodos = this._db.addTodos(todos);\r\n    promiseTodos.done((savedTodos)=>{\r\n\r\n      if(type=='habit'){\r\n        this.generateTodos(savedTodos);\r\n      }else{\r\n        this.addTodosToWar(savedTodos);\r\n      }\r\n\r\n    }).fail((err)=>{\r\n      this._messanger.showMsgBox('Failed to add todos to database.\\nPlease refresh the page and try again.','error','down');\r\n      console.log(err);\r\n    });\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * generateAndDisplayTasks - Retrieves all user habits from database,\r\n   * requests the habit fabric method to generate all the pending todos\r\n   * for the passed habits and with the received array of todos to create,\r\n   * passes the information to the database.\r\n   *\r\n   * If no tasks need to be added to the system, it calls the printTodos\r\n   * method to print the main list.\r\n   *\r\n   * @param  {boolean} fadeList indicates if todolist must be displayed with\r\n   *                            and initial fadein or not.\r\n   */\r\n  generateAndDisplayTasks(fadeList){\r\n    this._fadeList = fadeList;\r\n\r\n    const promiseHabits = this._db.getTodos({user: OPTIONS.id, type: 'habit'});\r\n    promiseHabits.done((habits)=>{\r\n\r\n      this.generateTodos(habits);\r\n\r\n\r\n    }).fail((err)=>{\r\n      this._messanger.showMsgBox('Failed to retrieve habits.\\nPlease refresh the page and try again.','error','down');\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n\r\ngenerateTodos(habits){\r\n\r\n  let todos = this._habitFac.generateTasks(habits);\r\n  if(todos.length>0){\r\n    this.addTodosToDataBase(todos);\r\n  }else{\r\n    this.printActiveTodos([]);\r\n  }\r\n\r\n}\r\n\r\n  /** (PENDING) Make this function private.\r\n   * printTodos - Prints todos in todo list.\r\n   * Requires the active userid and the status of the todos to get.\r\n   *\r\n   * @param  {[String]} newTodoIds\r\n   */\r\n  printActiveTodos(newTodoIds){\r\n    this._newTodoIds = newTodoIds;\r\n\r\n    let request = {user: OPTIONS.id, status:'active'};\r\n\r\n    const promiseTodos = this._db.getTodos(request);\r\n\r\n    promiseTodos.done((todos) =>{\r\n\r\n      this._view.printTodos({options: OPTIONS.options,\r\n                             todos: todos,\r\n                             newTodoId: this._newTodoIds,\r\n                             fadein: this._fadeList});\r\n\r\n    }).fail((err)=>{\r\n      this._messanger.showMsgBox('Failed to retrieve active items.\\nPlease refresh the page and try again.','error','down');\r\n      console.log(err);\r\n    });\r\n\r\n  }\r\n\r\n\r\n  refreshActiveTodoList(){\r\n    this._fadeList = false;\r\n    this.printActiveTodos([]);\r\n  }\r\n\r\n\r\n  /**\r\n   * removeTodoFromDb - description\r\n   *\r\n   * @param  {string} id id of the todo to remove.\r\n   */\r\n  removeTodoFromDb(id){\r\n\r\n    OPTIONS.removeTodoById(id);\r\n\r\n    const promiseToUpdate = this._db.updateTodoById(id, {status: 'removed'});\r\n\r\n    promiseToUpdate.done((todo)=>{}).fail((err)=>{\r\n      this._messanger.showMsgBox('Failed to remove item from database.\\nPlease refresh the page and try again.','error','down');\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * updatePosition - Requests db handler to update dueTo for passed todo.\r\n   *\r\n   * @param  {string} currentId   id of todo to modify\r\n   * @param  {string} referenceId id of neighbour todo\r\n   * @param  {date} newDate     dueto date to save\r\n   * @param  {boolean} over       position of neighbour todo\r\n   * @return {emit}               db handler emits a message back to this class.\r\n   */\r\n  updatePosition(currentId, referenceId, newDate, over){\r\n\r\n    this._referenceId = referenceId;\r\n    this._over = over;\r\n\r\n    const promiseToUpdate = this._db.updateTodoById(currentId, {dueTo: newDate});\r\n\r\n    promiseToUpdate.done((updatedTodo)=>{\r\n      OPTIONS.updateTodoIndex(updatedTodo, this._referenceId, this._over);\r\n\r\n    }).fail((err)=>{\r\n      this._messanger.showMsgBox('Failed to update date in database.\\nPlease refresh the page and try again.','error','down');\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * completeTodo - Updates db with the completed todo data.\r\n   * @public\r\n   * @param  {object} completedTodo necessary data for status update\r\n   * and point fabrication.\r\n   */\r\n  completeTodo(completedTodo){\r\n\r\n    let finalProgress;\r\n\r\n    if(completedTodo.hours == 'Score'){\r\n      this._points = completedTodo.progress;\r\n      finalProgress = completedTodo.progress;\r\n    }else{\r\n      this._points = completedTodo.hours - completedTodo.progress;\r\n      finalProgress = Number(completedTodo.hours);\r\n    }\r\n\r\n    OPTIONS.removeTodoById(completedTodo.id);\r\n\r\n    const promiseToUpdate = this._db.updateTodoById(completedTodo.id,\r\n                                                    {status: 'done',\r\n                                                     progress: finalProgress});\r\n\r\n    promiseToUpdate.done((todo)=>{\r\n      this._pointFac.generatePoints(todo, this._points);\r\n\r\n    }).fail((err)=>{\r\n      this._messanger.showMsgBox('Failed to mark item as complete.\\nPlease refresh the page and try again.','error','down');\r\n      console.log(err);\r\n    });\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  /**\r\n   * sendPoints - Requests the Point Factory to register one\r\n   * point under the passed ID.\r\n   *\r\n   * @param  {type} pointId description\r\n   * @return {type}         description\r\n   */\r\n  sendPoint(pointId, todo){\r\n    this._pointFac.savePointWithId(pointId, todo);\r\n  }\r\n\r\n\r\n  /**\r\n   * removePoint - Removes the indicated point from\r\n   * the database.\r\n   *\r\n   * @param  {String} pointId description\r\n   */\r\n  removePoint(pointId){\r\n    this._pointFac.removePointWithId(pointId);\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  /**\r\n   * updateTaskProgress - Saves progress into db task.\r\n   *\r\n   * @param  {Object} request includes id and properties to update\r\n   */\r\n  updateTaskProgress(currentId, request){\r\n\r\n    const promiseToUpdate = this._db.updateTodoById(currentId, request);\r\n\r\n    promiseToUpdate.done((todo)=>{}).fail((err)=>{\r\n      this._messanger.showMsgBox('Failed to save task progress.\\nPlease refresh the page and try again.','error','down');\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n};\r\n\n\n//# sourceURL=webpack:///./controllers/todoList/todoList_controller.js?");

/***/ }),

/***/ "./controllers/todoList/todoList_view.js":
/*!***********************************************!*\
  !*** ./controllers/todoList/todoList_view.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*jshint esversion: 6 */\r\nconst EventEmitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\r\nconst Swipe = __webpack_require__(/*! ./../swipe/swipe */ \"./controllers/swipe/swipe.js\");\r\nconst MsgBox = __webpack_require__(/*! ./../messageBox/messageBox */ \"./controllers/messageBox/messageBox.js\");\r\nconst TaskMenu = __webpack_require__(/*! ./../menus/task_menu */ \"./controllers/menus/task_menu.js\");\r\nconst Icons = __webpack_require__(/*! ./../icons/icons.js */ \"./controllers/icons/icons.js\");\r\nconst OPTIONS = __webpack_require__(/*! ./../optionHandler/optionHandler.js */ \"./controllers/optionHandler/optionHandler.js\");\r\n\r\nmodule.exports = class TodoListView extends EventEmitter{\r\n  constructor(listController){\r\n    super();\r\n\r\n    this._controller = listController;\r\n\r\n    // Editor parent\r\n    this._editorParent = $('#content');\r\n\r\n    // List of errors\r\n    this._missedTodos = [];\r\n\r\n    this._messenger = new MsgBox();\r\n  }\r\n\r\n\r\n  /**\r\n   * printTodos - Splits todos in four categories: overdue, today, tomorrow and to come,\r\n   * and requests printListTodo to print both todos and corresponding headers too.\r\n   *printRequest.options\r\n   * @param  {object} printRequest Includes a warTodo object (config file data with todos index info),\r\n   *                                and also todos object (collection of active todos in db)\r\n   */\r\n  printTodos(printRequest){\r\n\r\n    // Remove editor DOM\r\n    $('#editor').remove();\r\n\r\n    // Create new editor\r\n    this._theEditor = $('<div>',{\r\n      id:'editor'\r\n    });\r\n\r\n    // Create new list\r\n    this._theList = $('<ol>',{\r\n      id:'mainList'\r\n    });\r\n\r\n    // Collections used to divide todos into their respective period category.\r\n    let overdueCol = [];\r\n    let todayCol = [];\r\n    let tomorrowCol = [];\r\n    let toComeCol = [];\r\n\r\n    for (let i=0;i<printRequest.options.todoList.length;i++){\r\n      for (let j=0; j<printRequest.options.todoList[i].todos.length;j++){\r\n\r\n        let today = new Date();\r\n        today.setHours(0,0,0,0);\r\n\r\n        let warTodo = printRequest.options.todoList[i].todos.find (obj => {\r\n          return obj.index == j;\r\n        });\r\n\r\n        let currentTodo = printRequest.todos.find (obj => {\r\n          return obj._id == warTodo.id;\r\n        });\r\n\r\n        let todoDate = new Date(printRequest.options.todoList[i].date);\r\n\r\n        if(currentTodo!=undefined){\r\n\r\n          switch (true) {\r\n\r\n            case todoDate < today:\r\n              overdueCol.push(currentTodo);\r\n              break;\r\n\r\n            case todoDate < today.setDate(today.getDate()+1):\r\n              todayCol.push(currentTodo);\r\n              break;\r\n\r\n              case todoDate < today.setDate(today.getDate()+1):\r\n              tomorrowCol.push(currentTodo);\r\n              break;\r\n\r\n            default:\r\n              toComeCol.push(currentTodo);\r\n\r\n            }\r\n\r\n          // If war todo cannot be found in db.\r\n          }else{\r\n            this._missedTodos.push(warTodo.name);\r\n\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    // Overdue header goes out of the list so the user can never\r\n    // place anything on top of it.\r\n    let overDueHeader = $('<div>',{\r\n      id:'overDueHeader',\r\n      class:'list_header_top',\r\n      text: 'Overdue'\r\n    });\r\n\r\n\r\n    // Nest four arrays into one parent array.\r\n    let periods = [overdueCol,\r\n                   'Today', todayCol,\r\n                   'Tomorrow', tomorrowCol,\r\n                   'To come', toComeCol];\r\n\r\n    // Determines if the header needs a big margin top or not.\r\n    // Used to minimize the headers when they have no items inside.\r\n    let minimizeNextHeader = false;\r\n\r\n    // Finally prints todos and headers into the list.\r\n    for (let index=0; index<periods.length; index++){\r\n\r\n      // If object, check items inside.\r\n      if(typeof periods[index] === 'object')\r\n\r\n        // If periods, print periods\r\n        if(periods[index].length>0){\r\n\r\n          for(let o=0;o<periods[index].length;o++){\r\n          this.printListTodo(periods[index][o], printRequest.options);}\r\n\r\n        // If no items in one period, we reduce the top margin of the next header.\r\n        }else{\r\n          minimizeNextHeader=true;\r\n\r\n      // If string, print header with string.\r\n      // If minimize header, changes the size of the top margin to a smaller one.\r\n      }else{\r\n        let minimized = (minimizeNextHeader) ? true : false;\r\n        this.printListHeader(periods[index],minimized);\r\n        minimizeNextHeader=false;\r\n      }\r\n    }\r\n\r\n    // Append overdue header and list to the editor and print editor\r\n    this._theEditor.append(overDueHeader).append(this._theList);\r\n\r\n\r\n    // Only fade in the screen when fadein is true and no need items\r\n    // have been added to the list.\r\n    if(printRequest.fadein && printRequest.newTodoId.length==0){\r\n      this._theEditor.hide().fadeIn(800);\r\n      this._editorParent.append(this._theEditor);\r\n\r\n    // Fade in first and apply  color animation for new items later.\r\n    }else if(printRequest.fadein && printRequest.newTodoId.length>0){\r\n\r\n      this._theEditor.hide().fadeIn(800);\r\n      this._editorParent.append(this._theEditor);\r\n\r\n      setTimeout( () => {\r\n\r\n      for(let t=0;t<printRequest.newTodoId.length;t++){\r\n        this._newTodo = $('#' + printRequest.newTodoId[t]);\r\n\r\n        this._newTodo.animate({backgroundColor: \"#fff4bf\"}, 500 )\r\n        .animate({backgroundColor: 'white'}, 4000 );\r\n      }\r\n\r\n    }, 800);\r\n\r\n    // If no fade in effect and only one new item, color animation and scroll\r\n    // to the item.\r\n    }else if(printRequest.newTodoId.length==1){\r\n      this._editorParent.append(this._theEditor);\r\n      this._newTodo = $('#' + printRequest.newTodoId[0]);\r\n      this._newTodo.get(0).scrollIntoView();\r\n\r\n      // Scroll correction to avoid that the new task shows behind the top\r\n      // bar.\r\n      if(window.scrollY != (document.body.offsetHeight-window.innerHeight)){\r\n        window.scrollBy(0, -200);}\r\n\r\n      this._newTodo.animate({backgroundColor: \"#fff4bf\"}, 500 )\r\n      .animate({backgroundColor: 'white'}, 4000 );\r\n    }\r\n\r\n\r\n    this._swipe = new Swipe(this._controller);\r\n\r\n    //If error, displays a message with the list of errors that failed to print.\r\n    if(this._missedTodos.length>0){\r\n      this._messenger.showMsgBox('Failed to print:\\n' +\r\n                                  this._missedTodos.join('\\n'),'error','down');\r\n\r\n      console.log(printRequest.options.todoList);\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  /**\r\n   * printListTodo - receives a todo item, builds the html,\r\n   * applies the necessary css classes, picks up the category and\r\n   * project tag colors and prints the item into the main todo list\r\n   * in the main page.\r\n   *\r\n   * @param  {object} todo the target todo to print\r\n   * @param  {object} war  an object with all the most recent war data\r\n   *\r\n   */\r\n  printListTodo(todo, war){\r\n\r\n    let firstColumn = $('<td>');\r\n    let dragIcon = Icons.drag();\r\n    dragIcon.addClass('task_drag_btn instant');\r\n    firstColumn.append(dragIcon);\r\n\r\n    let todoTitle = $('<div>',{\r\n      text: todo.name});\r\n\r\n    let labelContainer = $('<div>',{\r\n      class: 'task_label_container'\r\n    });\r\n\r\n\r\n\r\n    // Get tag color from resource file.\r\n    let tagColor;\r\n\r\n    if(todo.categoryId!=''){\r\n      tagColor = war.categories.find (obj => {\r\n      return obj.id == todo.categoryId;});\r\n    }else{\r\n      tagColor = {color: \"#263e65\"};\r\n    }\r\n\r\n\r\n    // If category, add category to tag container, else add Other.\r\n    let categoryText = (todo.categoryId!='')? todo.category : 'Other';\r\n      let categoryTag = $('<span>',{\r\n        class:'task_category_label',\r\n        id: todo.categoryId,\r\n        text:categoryText});\r\n      categoryTag.css('background-color',tagColor.color);\r\n      labelContainer.append(categoryTag);\r\n\r\n\r\n    //If project, add project to tag container.\r\n    if (todo.project!=''){\r\n      let projectTag = $('<span>',{\r\n        class:'task_category_label',\r\n        id: todo.projectId,\r\n        text:todo.project});\r\n      projectTag.css('background-color', tagColor.color);\r\n      labelContainer.append(projectTag);\r\n    }\r\n\r\n    // If learning, add learning icon\r\n    if (todo.learning){\r\n      let learningTag = $('<span>',{\r\n        class:'task_category_label',\r\n        id:'learningTag',\r\n        text:'L'});\r\n      learningTag.css('background-color', tagColor.color);\r\n      learningTag.css('opacity', '0.75');\r\n      labelContainer.append(learningTag);\r\n    }\r\n\r\n\r\n    let notesTag = $('<span>',{\r\n      class:'task_category_label',\r\n      id:'notesTag',\r\n      text:'N'});\r\n    notesTag.css('background-color', tagColor.color);\r\n    notesTag.css('opacity', '0');\r\n\r\n    if((todo.hasOwnProperty('notes') && todo.notes!='')){notesTag.css('opacity', '0.75');}\r\n    labelContainer.append(notesTag);\r\n\r\n\r\n    let secondColumn = $('<td>',{\r\n      class:'task_title_cats'});\r\n    secondColumn.append(todoTitle).append(labelContainer);\r\n\r\n\r\n\r\n    // Hours column\r\n    let hourColumn = $('<td>',{\r\n      class:'hour_icon_container'});\r\n\r\n    let hourIcon;\r\n\r\n    // If Score, displays star icon.\r\n    // If value, displays progress (ej. 0/0h)\r\n    // If nothing, display invisible '0/0' to keep the same margin in all todos.\r\n    if(todo.hours!='Fast task' && todo.hours!='1'){\r\n      if(todo.hours=='Score'){\r\n        hourIcon = Icons.starActive();\r\n        hourIcon.addClass('task_menu_btn');\r\n      }else{\r\n        hourIcon = $('<div>',{\r\n          id: 'progress_div',\r\n          text: todo.progress + '/' + todo.hours});\r\n        hourIcon.css({\r\n          'color':'#1551b5',\r\n          'text-align':'right'\r\n      });\r\n      }\r\n    }else{\r\n      hourIcon = $('<div>',{\r\n        id: 'progress_div',\r\n        text: '0/1'});\r\n      hourIcon.css('opacity','0');\r\n    }\r\n    hourColumn.append(hourIcon);\r\n\r\n\r\n    // Date column\r\n\r\n    function short_month(dt){\r\n      let shortMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n      return shortMonths[dt.getMonth()];\r\n    }\r\n\r\n    let todoDate = new Date(todo.dueTo);\r\n    let abrevDate = short_month(todoDate) + ' ' + todoDate.getDate();\r\n\r\n    let thirdColumn = $('<td>',{\r\n      class:'task_deadline',\r\n      text: abrevDate});\r\n    if(todo.frequency>0){\r\n      thirdColumn.css('font-style','italic');\r\n      thirdColumn.css('color','#1551b5');\r\n    }\r\n\r\n\r\n    //Urgency column\r\n\r\n    function get_urgency_icon(urgency){\r\n      switch (urgency) {\r\n        case 'High':\r\n          return Icons.urgHigh();\r\n        case 'Normal':\r\n          return Icons.urgNormal();\r\n        case 'Low':\r\n          return Icons.urgLow();\r\n      }\r\n    }\r\n\r\n\r\n\r\n    let urgencyIcon = get_urgency_icon(todo.urgency);\r\n    urgencyIcon.addClass('task_menu_btn');\r\n\r\n    let forthColumn = $('<td>',{\r\n      class:'task_arrow_container'});\r\n\r\n    forthColumn.append(urgencyIcon);\r\n\r\n\r\n    //Menu column\r\n\r\n    let menuIcon = Icons.menu();\r\n    menuIcon.addClass('task_menu_btn');\r\n\r\n    let fifthColumn = $('<td>',{\r\n      class:'task_menu_container',\r\n      id: 'task_menu_' + todo._id});\r\n\r\n\r\n    // Menu btn handler\r\n    fifthColumn.click( (e) => {\r\n\r\n      // Remove any possible existing menus first.\r\n      $('#task_menu_floater').remove();\r\n      $('.task_item').css('background-color','white');\r\n\r\n      // Get icon jquery item to locate its position\r\n      let sourceBtn = $('#task_menu_' + todo._id);\r\n\r\n      // Call menu through TaskMenu class\r\n      let taskMenu = new TaskMenu(this._controller, todo, this._swipe);\r\n      taskMenu.displayTaskMenu(sourceBtn);\r\n\r\n      return false;\r\n    });\r\n\r\n    fifthColumn.append(menuIcon);\r\n\r\n\r\n    //Put all columns together\r\n\r\n    let firstRow = $('<tr>');\r\n    firstRow.append(firstColumn)\r\n            .append(secondColumn)\r\n            .append(hourColumn)\r\n            .append(thirdColumn)\r\n            .append(forthColumn)\r\n            .append(fifthColumn);\r\n\r\n\r\n\r\n    //Put rows together\r\n\r\n    let tableBody = $('<tbody>');\r\n    tableBody.append(firstRow);\r\n\r\n\r\n    //Put row in table\r\n\r\n    let todoTable = $('<table>',{\r\n      cellpadding: '0',\r\n      cellspacing: '0',\r\n      class: 'task_table'});\r\n    todoTable.append(tableBody);\r\n\r\n\r\n    //Include table into a div.\r\n\r\n    let upperDiv = $('<div>',{\r\n      class:'task_item_container_div'\r\n    });\r\n    upperDiv.append(todoTable);\r\n\r\n    let notes = (todo.hasOwnProperty('notes')) ? todo.notes : '';\r\n\r\n\r\n    //List item\r\n\r\n    let listItem = $('<li>',{\r\n      class: 'task_item ' + todo.type,\r\n      id:todo._id,\r\n      'data-date':todo.dueTo,\r\n      'data-hours': todo.hours,\r\n      'data-progress': todo.progress,\r\n      'data-name': todo.name,\r\n      'data-notes': notes});\r\n      listItem.css('background-color','white');\r\n\r\n    listItem.append(upperDiv);\r\n\r\n    // Second div for containing the progress bar (when there is)\r\n\r\n    if(todo.hours!='Score'){\r\n\r\n      let lowerDiv = $('<div>',{\r\n        class:'task_item_progress_bar'});\r\n\r\n\r\n        let totalProgress = (todo.progress>0) ? Math.round((todo.progress/Number(todo.hours))*100) : 0;\r\n\r\n        lowerDiv.css('width',totalProgress+'%');\r\n        listItem.append(lowerDiv);\r\n\r\n    }\r\n\r\n    // Adding a mouseover event to display the drag and menu buttons\r\n    // when hovering the task. (only for desktop version)\r\n\r\n    if($( window ).width()>950){\r\n\r\n      listItem.hover(e => fifthColumn.animate({opacity: 1}, 0),\r\n                     e => fifthColumn.animate({opacity: 0}, 0));\r\n\r\n       listItem.hover(e => dragIcon.animate({opacity: 1}, 0),\r\n                      e => dragIcon.animate({opacity: 0}, 0));\r\n\r\n      }\r\n\r\n    this._theList.append(listItem);\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * printListHeader - Prints period headers into the todo list.\r\n   *\r\n   * @param  {string} title text that will display in the header.\r\n   * @return directly appends the header to the list.\r\n   */\r\n  printListHeader(title, minimized){\r\n\r\n    let listHeader = $('<li>',{\r\n      class: 'demo-no-reorder demo-no-swipe list_header',\r\n      text: title\r\n    });\r\n\r\n    if(minimized){\r\n      listHeader.css('margin-top','30px');\r\n    }\r\n\r\n    this._theList.append(listHeader);\r\n  }\r\n\r\n};\r\n\n\n//# sourceURL=webpack:///./controllers/todoList/todoList_view.js?");

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n//# sourceURL=webpack:///./node_modules/events/events.js?");

/***/ }),

/***/ "./sandBox/sandbox.js":
/*!****************************!*\
  !*** ./sandBox/sandbox.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*jshint esversion: 6 */\r\n\r\nclass Sandbox{\r\n\r\n  checkDays(){\r\n\r\n    let a = {a:\"1\", b:\"2\"};\r\n    let arra = [];\r\n    arra.push(a);\r\n\r\n    a.a=\"2\";\r\n    arra.push(a);\r\n\r\n    console.log(arra);\r\n\r\n\r\n    let today = new Date();\r\n    let flatToday = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0);\r\n    let otherday = new Date(today.getFullYear(), today.getMonth()+2, today.getDate()+3, 10, 0, 0);\r\n    console.log(otherday);\r\n    console.log(differenceOfDays(flatToday,today));\r\n  }\r\n\r\n}\r\n\r\nfunction differenceOfDays(date1,date2){\r\n\r\n  let res = Math.abs(date1 - date2) / 1000;\r\n  let difference = Math.floor(res / 86400);\r\n\r\n  return difference;\r\n}\r\n\r\n//For testing purposes\r\nconst Sb = new Sandbox();\r\n\r\n$('#filter_container').on('click', function(){\r\n    Sb.checkDays();\r\n});\r\n\n\n//# sourceURL=webpack:///./sandBox/sandbox.js?");

/***/ })

/******/ });